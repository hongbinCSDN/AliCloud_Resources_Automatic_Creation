USE [<<DBNAME>>]
GO

SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO


CREATE Trigger [dbo].[TG_AUD_AGENCY_OnDeleted]
On [dbo].[AGENCY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AGENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AGENCY_CODE = ' + Case When AGENCY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_CODE) + '''' End + ', AGENCY_NAME = ' + Case When AGENCY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_NAME) + '''' End + ', AGENCY_TEL_NO = ' + Case When AGENCY_TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_TEL_NO) + '''' End + ', COMMISSION = ' + Case When COMMISSION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COMMISSION) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AGENCY_CODE = ''' + Convert(NVarChar(4000), AGENCY_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AGENCY] ENABLE TRIGGER [TG_AUD_AGENCY_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AGENCY_OnInserted]
On [dbo].[AGENCY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AGENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AGENCY_CODE = ' + Case When AGENCY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AGENCY_CODE) + '''' End + ', AGENCY_NAME = ' + Case When AGENCY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AGENCY_NAME) + '''' End + ', AGENCY_TEL_NO = ' + Case When AGENCY_TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AGENCY_TEL_NO) + '''' End + ', COMMISSION = ' + Case When COMMISSION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COMMISSION) + '''' End + '', 4000), @PROJECT_ID, Left('AGENCY_CODE = ''' + Convert(NVarChar(4000), AGENCY_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AGENCY] ENABLE TRIGGER [TG_AUD_AGENCY_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AGENCY_OnUpdated]
On [dbo].[AGENCY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AGENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AGENCY_CODE Is Null And d.AGENCY_CODE Is Not Null) Or (i.AGENCY_CODE Is Not Null And d.AGENCY_CODE Is Null) Or (i.AGENCY_CODE Is Not Null And d.AGENCY_CODE Is Not Null And i.AGENCY_CODE <> d.AGENCY_CODE)) Then 'AGENCY_CODE = ' + Case When d.AGENCY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AGENCY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.AGENCY_NAME Is Null And d.AGENCY_NAME Is Not Null) Or (i.AGENCY_NAME Is Not Null And d.AGENCY_NAME Is Null) Or (i.AGENCY_NAME Is Not Null And d.AGENCY_NAME Is Not Null And i.AGENCY_NAME <> d.AGENCY_NAME)) Then 'AGENCY_NAME = ' + Case When d.AGENCY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AGENCY_NAME) + '''' End + ', ' Else '' End +  Case When ((i.AGENCY_TEL_NO Is Null And d.AGENCY_TEL_NO Is Not Null) Or (i.AGENCY_TEL_NO Is Not Null And d.AGENCY_TEL_NO Is Null) Or (i.AGENCY_TEL_NO Is Not Null And d.AGENCY_TEL_NO Is Not Null And i.AGENCY_TEL_NO <> d.AGENCY_TEL_NO)) Then 'AGENCY_TEL_NO = ' + Case When d.AGENCY_TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AGENCY_TEL_NO) + '''' End + ', ' Else '' End +  Case When ((i.COMMISSION Is Null And d.COMMISSION Is Not Null) Or (i.COMMISSION Is Not Null And d.COMMISSION Is Null) Or (i.COMMISSION Is Not Null And d.COMMISSION Is Not Null And i.COMMISSION <> d.COMMISSION)) Then 'COMMISSION = ' + Case When d.COMMISSION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COMMISSION) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AGENCY_CODE Is Null And d.AGENCY_CODE Is Not Null) Or (i.AGENCY_CODE Is Not Null And d.AGENCY_CODE Is Null) Or (i.AGENCY_CODE Is Not Null And d.AGENCY_CODE Is Not Null And i.AGENCY_CODE <> d.AGENCY_CODE)) Then 'AGENCY_CODE = ' + Case When i.AGENCY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AGENCY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.AGENCY_NAME Is Null And d.AGENCY_NAME Is Not Null) Or (i.AGENCY_NAME Is Not Null And d.AGENCY_NAME Is Null) Or (i.AGENCY_NAME Is Not Null And d.AGENCY_NAME Is Not Null And i.AGENCY_NAME <> d.AGENCY_NAME)) Then 'AGENCY_NAME = ' + Case When i.AGENCY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AGENCY_NAME) + '''' End + ', ' Else '' End +  Case When ((i.AGENCY_TEL_NO Is Null And d.AGENCY_TEL_NO Is Not Null) Or (i.AGENCY_TEL_NO Is Not Null And d.AGENCY_TEL_NO Is Null) Or (i.AGENCY_TEL_NO Is Not Null And d.AGENCY_TEL_NO Is Not Null And i.AGENCY_TEL_NO <> d.AGENCY_TEL_NO)) Then 'AGENCY_TEL_NO = ' + Case When i.AGENCY_TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AGENCY_TEL_NO) + '''' End + ', ' Else '' End +  Case When ((i.COMMISSION Is Null And d.COMMISSION Is Not Null) Or (i.COMMISSION Is Not Null And d.COMMISSION Is Null) Or (i.COMMISSION Is Not Null And d.COMMISSION Is Not Null And i.COMMISSION <> d.COMMISSION)) Then 'COMMISSION = ' + Case When i.COMMISSION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COMMISSION) + '''' End + ', ' Else '' End)  ChangedValue, Left('AGENCY_CODE = ''' + Convert(NVarChar(4000), i.AGENCY_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.AGENCY_CODE = d.AGENCY_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AGENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('AGENCY_CODE = ' + Case When AGENCY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_CODE) + '''' End + ', AGENCY_NAME = ' + Case When AGENCY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_NAME) + '''' End + ', AGENCY_TEL_NO = ' + Case When AGENCY_TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_TEL_NO) + '''' End + ', COMMISSION = ' + Case When COMMISSION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COMMISSION) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AGENCY_CODE = ''' + Convert(NVarChar(4000), AGENCY_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.AGENCY_CODE = d.AGENCY_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AGENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('AGENCY_CODE = ' + Case When AGENCY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_CODE) + '''' End + ', AGENCY_NAME = ' + Case When AGENCY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_NAME) + '''' End + ', AGENCY_TEL_NO = ' + Case When AGENCY_TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AGENCY_TEL_NO) + '''' End + ', COMMISSION = ' + Case When COMMISSION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COMMISSION) + '''' End + '', 4000), @PROJECT_ID, Left('AGENCY_CODE = ''' + Convert(NVarChar(4000), AGENCY_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.AGENCY_CODE = d.AGENCY_CODE)  End
GO

ALTER TABLE [dbo].[AGENCY] ENABLE TRIGGER [TG_AUD_AGENCY_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_AM_BUYER_OnDeleted]
On [dbo].[AM_BUYER]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_TYPE) + '''' End + ', CHI_NAME = ' + Case When CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHI_NAME) + '''' End + ', ENG_NAME = ' + Case When ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID) + '''' End + ', BUYER_ID_TYPE = ' + Case When BUYER_ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_TYPE) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_IS_IDEN) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GENDER) + '''' End + ', DOB = ' + Case When DOB Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DOB, 121) + '''' End + ', BUYER_NAT = ' + Case When BUYER_NAT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_NAT) + '''' End + ', CONTACT_NO = ' + Case When CONTACT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONTACT_NO) + '''' End + ', MARITAL_STATUS = ' + Case When MARITAL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MARITAL_STATUS) + '''' End + ', PROPERTY_SYSTEM = ' + Case When PROPERTY_SYSTEM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROPERTY_SYSTEM) + '''' End + ', SPOUSE_NAME = ' + Case When SPOUSE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SPOUSE_NAME) + '''' End + ', SPOUSE_ID = ' + Case When SPOUSE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SPOUSE_ID) + '''' End + ', IS_ADULT = ' + Case When IS_ADULT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), IS_ADULT) + '''' End + 'BUYER_SHARE = ' + Case When BUYER_SHARE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SHARE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BUYER_SEQ = ''' + Convert(NVarChar(4000), BUYER_SEQ) + ''', BUYER_TYPE = ''' + Convert(NVarChar(4000), BUYER_TYPE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_BUYER] ENABLE TRIGGER [TG_AUD_AM_BUYER_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_AM_BUYER_OnInserted]
On [dbo].[AM_BUYER]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_TYPE) + '''' End + ', CHI_NAME = ' + Case When CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CHI_NAME) + '''' End + ', ENG_NAME = ' + Case When ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_ID) + '''' End + ', BUYER_ID_TYPE = ' + Case When BUYER_ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_ID_TYPE) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_ID_IS_IDEN) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),GENDER) + '''' End + ', DOB = ' + Case When DOB Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DOB,121) + '''' End + ', BUYER_NAT = ' + Case When BUYER_NAT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_NAT) + '''' End + ', CONTACT_NO = ' + Case When CONTACT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CONTACT_NO) + '''' End + ', MARITAL_STATUS = ' + Case When MARITAL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MARITAL_STATUS) + '''' End + ', PROPERTY_SYSTEM = ' + Case When PROPERTY_SYSTEM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROPERTY_SYSTEM) + '''' End + ', SPOUSE_NAME = ' + Case When SPOUSE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SPOUSE_NAME) + '''' End + ', SPOUSE_ID = ' + Case When SPOUSE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SPOUSE_ID) + '''' End + ', IS_ADULT = ' + Case When IS_ADULT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),IS_ADULT) + '''' End + ', BUYER_SHARE = ' + Case When BUYER_SHARE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_SHARE) + '''' End + 'CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BUYER_SEQ = ''' + Convert(NVarChar(4000), BUYER_SEQ) + ''', BUYER_TYPE = ''' + Convert(NVarChar(4000), BUYER_TYPE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_BUYER] ENABLE TRIGGER [TG_AUD_AM_BUYER_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_AM_BUYER_OnUpdated]
On [dbo].[AM_BUYER]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SEQ Is Null And d.BUYER_SEQ Is Not Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Not Null And i.BUYER_SEQ <> d.BUYER_SEQ)) Then 'BUYER_SEQ = ' + Case When d.BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_TYPE Is Null And d.BUYER_TYPE Is Not Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Not Null And i.BUYER_TYPE <> d.BUYER_TYPE)) Then 'BUYER_TYPE = ' + Case When d.BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.CHI_NAME Is Null And d.CHI_NAME Is Not Null) Or (i.CHI_NAME Is Not Null And d.CHI_NAME Is Null) Or (i.CHI_NAME Is Not Null And d.CHI_NAME Is Not Null And i.CHI_NAME <> d.CHI_NAME)) Then 'CHI_NAME = ' + Case When d.CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CHI_NAME) + '''' End + ', ' Else '' End +  Case When ((i.ENG_NAME Is Null And d.ENG_NAME Is Not Null) Or (i.ENG_NAME Is Not Null And d.ENG_NAME Is Null) Or (i.ENG_NAME Is Not Null And d.ENG_NAME Is Not Null And i.ENG_NAME <> d.ENG_NAME)) Then 'ENG_NAME = ' + Case When d.ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ENG_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID Is Null And d.BUYER_ID Is Not Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Not Null And i.BUYER_ID <> d.BUYER_ID)) Then 'BUYER_ID = ' + Case When d.BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID_TYPE Is Null And d.BUYER_ID_TYPE Is Not Null) Or (i.BUYER_ID_TYPE Is Not Null And d.BUYER_ID_TYPE Is Null) Or (i.BUYER_ID_TYPE Is Not Null And d.BUYER_ID_TYPE Is Not Null And i.BUYER_ID_TYPE <> d.BUYER_ID_TYPE)) Then 'BUYER_ID_TYPE = ' + Case When d.BUYER_ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_ID_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID_IS_IDEN Is Null And d.BUYER_ID_IS_IDEN Is Not Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Not Null And i.BUYER_ID_IS_IDEN <> d.BUYER_ID_IS_IDEN)) Then 'BUYER_ID_IS_IDEN = ' + Case When d.BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_ID_IS_IDEN) + '''' End + ', ' Else '' End +  Case When ((i.GENDER Is Null And d.GENDER Is Not Null) Or (i.GENDER Is Not Null And d.GENDER Is Null) Or (i.GENDER Is Not Null And d.GENDER Is Not Null And i.GENDER <> d.GENDER)) Then 'GENDER = ' + Case When d.GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.GENDER) + '''' End + ', ' Else '' End +  Case When ((i.DOB Is Null And d.DOB Is Not Null) Or (i.DOB Is Not Null And d.DOB Is Null) Or (i.DOB Is Not Null And d.DOB Is Not Null And i.DOB <> d.DOB)) Then 'DOB = ' + Case When d.DOB Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DOB, 121) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_NAT Is Null And d.BUYER_NAT Is Not Null) Or (i.BUYER_NAT Is Not Null And d.BUYER_NAT Is Null) Or (i.BUYER_NAT Is Not Null And d.BUYER_NAT Is Not Null And i.BUYER_NAT <> d.BUYER_NAT)) Then 'BUYER_NAT = ' + Case When d.BUYER_NAT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_NAT) + '''' End + ', ' Else '' End +  Case When ((i.CONTACT_NO Is Null And d.CONTACT_NO Is Not Null) Or (i.CONTACT_NO Is Not Null And d.CONTACT_NO Is Null) Or (i.CONTACT_NO Is Not Null And d.CONTACT_NO Is Not Null And i.CONTACT_NO <> d.CONTACT_NO)) Then 'CONTACT_NO = ' + Case When d.CONTACT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CONTACT_NO) + '''' End + ', ' Else '' End +  Case When ((i.MARITAL_STATUS Is Null And d.MARITAL_STATUS Is Not Null) Or (i.MARITAL_STATUS Is Not Null And d.MARITAL_STATUS Is Null) Or (i.MARITAL_STATUS Is Not Null And d.MARITAL_STATUS Is Not Null And i.MARITAL_STATUS <> d.MARITAL_STATUS)) Then 'MARITAL_STATUS = ' + Case When d.MARITAL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MARITAL_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.PROPERTY_SYSTEM Is Null And d.PROPERTY_SYSTEM Is Not Null) Or (i.PROPERTY_SYSTEM Is Not Null And d.PROPERTY_SYSTEM Is Null) Or (i.PROPERTY_SYSTEM Is Not Null And d.PROPERTY_SYSTEM Is Not Null And i.PROPERTY_SYSTEM <> d.PROPERTY_SYSTEM)) Then 'PROPERTY_SYSTEM = ' + Case When d.PROPERTY_SYSTEM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROPERTY_SYSTEM) + '''' End + ', ' Else '' End +  Case When ((i.SPOUSE_NAME Is Null And d.SPOUSE_NAME Is Not Null) Or (i.SPOUSE_NAME Is Not Null And d.SPOUSE_NAME Is Null) Or (i.SPOUSE_NAME Is Not Null And d.SPOUSE_NAME Is Not Null And i.SPOUSE_NAME <> d.SPOUSE_NAME)) Then 'SPOUSE_NAME = ' + Case When d.SPOUSE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SPOUSE_NAME) + '''' End + ', ' Else '' End +  Case When ((i.SPOUSE_ID Is Null And d.SPOUSE_ID Is Not Null) Or (i.SPOUSE_ID Is Not Null And d.SPOUSE_ID Is Null) Or (i.SPOUSE_ID Is Not Null And d.SPOUSE_ID Is Not Null And i.SPOUSE_ID <> d.SPOUSE_ID)) Then 'SPOUSE_ID = ' + Case When d.SPOUSE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SPOUSE_ID) + '''' End + ', ' Else '' End +  Case When ((i.IS_ADULT Is Null And d.IS_ADULT Is Not Null) Or (i.IS_ADULT Is Not Null And d.IS_ADULT Is Null) Or (i.IS_ADULT Is Not Null And d.IS_ADULT Is Not Null And i.IS_ADULT <> d.IS_ADULT)) Then 'IS_ADULT = ' + Case When d.IS_ADULT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.IS_ADULT) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SHARE Is Null And d.BUYER_SHARE Is Not Null) Or (i.BUYER_SHARE Is Not Null And d.BUYER_SHARE Is Null) Or (i.BUYER_SHARE Is Not Null And d.BUYER_SHARE Is Not Null And i.BUYER_SHARE <> d.BUYER_SHARE)) Then 'BUYER_SHARE = ' + Case When d.BUYER_SHARE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_SHARE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SEQ Is Null And d.BUYER_SEQ Is Not Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Not Null And i.BUYER_SEQ <> d.BUYER_SEQ)) Then 'BUYER_SEQ = ' + Case When i.BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_TYPE Is Null And d.BUYER_TYPE Is Not Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Not Null And i.BUYER_TYPE <> d.BUYER_TYPE)) Then 'BUYER_TYPE = ' + Case When i.BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.CHI_NAME Is Null And d.CHI_NAME Is Not Null) Or (i.CHI_NAME Is Not Null And d.CHI_NAME Is Null) Or (i.CHI_NAME Is Not Null And d.CHI_NAME Is Not Null And i.CHI_NAME <> d.CHI_NAME)) Then 'CHI_NAME = ' + Case When i.CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CHI_NAME) + '''' End + ', ' Else '' End +  Case When ((i.ENG_NAME Is Null And d.ENG_NAME Is Not Null) Or (i.ENG_NAME Is Not Null And d.ENG_NAME Is Null) Or (i.ENG_NAME Is Not Null And d.ENG_NAME Is Not Null And i.ENG_NAME <> d.ENG_NAME)) Then 'ENG_NAME = ' + Case When i.ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ENG_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID Is Null And d.BUYER_ID Is Not Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Not Null And i.BUYER_ID <> d.BUYER_ID)) Then 'BUYER_ID = ' + Case When i.BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID_TYPE Is Null And d.BUYER_ID_TYPE Is Not Null) Or (i.BUYER_ID_TYPE Is Not Null And d.BUYER_ID_TYPE Is Null) Or (i.BUYER_ID_TYPE Is Not Null And d.BUYER_ID_TYPE Is Not Null And i.BUYER_ID_TYPE <> d.BUYER_ID_TYPE)) Then 'BUYER_ID_TYPE = ' + Case When i.BUYER_ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_ID_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID_IS_IDEN Is Null And d.BUYER_ID_IS_IDEN Is Not Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Not Null And i.BUYER_ID_IS_IDEN <> d.BUYER_ID_IS_IDEN)) Then 'BUYER_ID_IS_IDEN = ' + Case When i.BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_ID_IS_IDEN) + '''' End + ', ' Else '' End +  Case When ((i.GENDER Is Null And d.GENDER Is Not Null) Or (i.GENDER Is Not Null And d.GENDER Is Null) Or (i.GENDER Is Not Null And d.GENDER Is Not Null And i.GENDER <> d.GENDER)) Then 'GENDER = ' + Case When i.GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.GENDER) + '''' End + ', ' Else '' End +  Case When ((i.DOB Is Null And d.DOB Is Not Null) Or (i.DOB Is Not Null And d.DOB Is Null) Or (i.DOB Is Not Null And d.DOB Is Not Null And i.DOB <> d.DOB)) Then 'DOB = ' + Case When i.DOB Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DOB, 121) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_NAT Is Null And d.BUYER_NAT Is Not Null) Or (i.BUYER_NAT Is Not Null And d.BUYER_NAT Is Null) Or (i.BUYER_NAT Is Not Null And d.BUYER_NAT Is Not Null And i.BUYER_NAT <> d.BUYER_NAT)) Then 'BUYER_NAT = ' + Case When i.BUYER_NAT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_NAT) + '''' End + ', ' Else '' End +  Case When ((i.CONTACT_NO Is Null And d.CONTACT_NO Is Not Null) Or (i.CONTACT_NO Is Not Null And d.CONTACT_NO Is Null) Or (i.CONTACT_NO Is Not Null And d.CONTACT_NO Is Not Null And i.CONTACT_NO <> d.CONTACT_NO)) Then 'CONTACT_NO = ' + Case When i.CONTACT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CONTACT_NO) + '''' End + ', ' Else '' End +  Case When ((i.MARITAL_STATUS Is Null And d.MARITAL_STATUS Is Not Null) Or (i.MARITAL_STATUS Is Not Null And d.MARITAL_STATUS Is Null) Or (i.MARITAL_STATUS Is Not Null And d.MARITAL_STATUS Is Not Null And i.MARITAL_STATUS <> d.MARITAL_STATUS)) Then 'MARITAL_STATUS = ' + Case When i.MARITAL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MARITAL_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.PROPERTY_SYSTEM Is Null And d.PROPERTY_SYSTEM Is Not Null) Or (i.PROPERTY_SYSTEM Is Not Null And d.PROPERTY_SYSTEM Is Null) Or (i.PROPERTY_SYSTEM Is Not Null And d.PROPERTY_SYSTEM Is Not Null And i.PROPERTY_SYSTEM <> d.PROPERTY_SYSTEM)) Then 'PROPERTY_SYSTEM = ' + Case When i.PROPERTY_SYSTEM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROPERTY_SYSTEM) + '''' End + ', ' Else '' End +  Case When ((i.SPOUSE_NAME Is Null And d.SPOUSE_NAME Is Not Null) Or (i.SPOUSE_NAME Is Not Null And d.SPOUSE_NAME Is Null) Or (i.SPOUSE_NAME Is Not Null And d.SPOUSE_NAME Is Not Null And i.SPOUSE_NAME <> d.SPOUSE_NAME)) Then 'SPOUSE_NAME = ' + Case When i.SPOUSE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SPOUSE_NAME) + '''' End + ', ' Else '' End +  Case When ((i.SPOUSE_ID Is Null And d.SPOUSE_ID Is Not Null) Or (i.SPOUSE_ID Is Not Null And d.SPOUSE_ID Is Null) Or (i.SPOUSE_ID Is Not Null And d.SPOUSE_ID Is Not Null And i.SPOUSE_ID <> d.SPOUSE_ID)) Then 'SPOUSE_ID = ' + Case When i.SPOUSE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SPOUSE_ID) + '''' End + ', ' Else '' End +  Case When ((i.IS_ADULT Is Null And d.IS_ADULT Is Not Null) Or (i.IS_ADULT Is Not Null And d.IS_ADULT Is Null) Or (i.IS_ADULT Is Not Null And d.IS_ADULT Is Not Null And i.IS_ADULT <> d.IS_ADULT)) Then 'IS_ADULT = ' + Case When i.IS_ADULT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.IS_ADULT) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SHARE Is Null And d.BUYER_SHARE Is Not Null) Or (i.BUYER_SHARE Is Not Null And d.BUYER_SHARE Is Null) Or (i.BUYER_SHARE Is Not Null And d.BUYER_SHARE Is Not Null And i.BUYER_SHARE <> d.BUYER_SHARE)) Then 'BUYER_SHARE = ' + Case When i.BUYER_SHARE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_SHARE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End)  ChangedValue, Left('AM_NO = ''' + Convert(NVarChar(4000), i.AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', BUYER_SEQ = ''' + Convert(NVarChar(4000), i.BUYER_SEQ) + ''', BUYER_TYPE = ''' + Convert(NVarChar(4000), i.BUYER_TYPE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.BUYER_SEQ = d.BUYER_SEQ And i.BUYER_TYPE = d.BUYER_TYPE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_TYPE) + '''' End + ', CHI_NAME = ' + Case When CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHI_NAME) + '''' End + ', ENG_NAME = ' + Case When ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID) + '''' End + ', BUYER_ID_TYPE = ' + Case When BUYER_ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_TYPE) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_IS_IDEN) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GENDER) + '''' End + ', DOB = ' + Case When DOB Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DOB, 121) + '''' End + ', BUYER_NAT = ' + Case When BUYER_NAT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_NAT) + '''' End + ', CONTACT_NO = ' + Case When CONTACT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONTACT_NO) + '''' End + ', MARITAL_STATUS = ' + Case When MARITAL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MARITAL_STATUS) + '''' End + ', PROPERTY_SYSTEM = ' + Case When PROPERTY_SYSTEM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROPERTY_SYSTEM) + '''' End + ', SPOUSE_NAME = ' + Case When SPOUSE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SPOUSE_NAME) + '''' End + ', SPOUSE_ID = ' + Case When SPOUSE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SPOUSE_ID) + '''' End + ', IS_ADULT = ' + Case When IS_ADULT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), IS_ADULT) + '''' End + ', BUYER_SHARE = ' + Case When BUYER_SHARE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SHARE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BUYER_SEQ = ''' + Convert(NVarChar(4000), BUYER_SEQ) + ''', BUYER_TYPE = ''' + Convert(NVarChar(4000), BUYER_TYPE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.BUYER_SEQ = d.BUYER_SEQ And i.BUYER_TYPE = d.BUYER_TYPE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_TYPE) + '''' End + ', CHI_NAME = ' + Case When CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHI_NAME) + '''' End + ', ENG_NAME = ' + Case When ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID) + '''' End + ', BUYER_ID_TYPE = ' + Case When BUYER_ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_TYPE) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_IS_IDEN) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GENDER) + '''' End + ', DOB = ' + Case When DOB Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DOB, 121) + '''' End + ', BUYER_NAT = ' + Case When BUYER_NAT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_NAT) + '''' End + ', CONTACT_NO = ' + Case When CONTACT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONTACT_NO) + '''' End + ', MARITAL_STATUS = ' + Case When MARITAL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MARITAL_STATUS) + '''' End + ', PROPERTY_SYSTEM = ' + Case When PROPERTY_SYSTEM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROPERTY_SYSTEM) + '''' End + ', SPOUSE_NAME = ' + Case When SPOUSE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SPOUSE_NAME) + '''' End + ', SPOUSE_ID = ' + Case When SPOUSE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SPOUSE_ID) + '''' End + ', IS_ADULT = ' + Case When IS_ADULT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), IS_ADULT) + '''' End + ', BUYER_SHARE = ' + Case When BUYER_SHARE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SHARE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BUYER_SEQ = ''' + Convert(NVarChar(4000), BUYER_SEQ) + ''', BUYER_TYPE = ''' + Convert(NVarChar(4000), BUYER_TYPE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.BUYER_SEQ = d.BUYER_SEQ And i.BUYER_TYPE = d.BUYER_TYPE)  End
GO

ALTER TABLE [dbo].[AM_BUYER] ENABLE TRIGGER [TG_AUD_AM_BUYER_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AM_CONTACT_OnInserted]
On [dbo].[AM_CONTACT]
 
After Insert
As
Begin

	
	Update Mailing_List
	Set 
		Cont_Name = i.[CONT_PERSON],
		Addr_1 = i.[ADDR_1], 
		Addr_2 = i.[ADDR_2],
		Addr_3 = i.[ADDR_3], 
		MOA_Add4 = i.[ADDR_4], 
		Area = i.[AREA], 
		District = i.[DIST_CODE],
		-- Location = i.Location, 
		Country = i.[COUNTRY_CODE], 
		Office_Tel = i.[OFF_TEL],
		Home_Tel = i.[TEL_NO], 
		Mobile = i.[MOBILE], 
		Fax = i.[FAX], 
		Email = i.[EMAIL],
		REGION_CODE = i.[REGION_CODE]
	From 
		Mailing_List
		JOIN Inserted i ON Mailing_List.Prj_ID = i.Project_ID And Mailing_List.Reg_No = i.AM_NO
	Where
		Mailing_List.[Type] = N'M';

	
	Insert Into Mailing_List 
	(
		Prj_ID, Reg_No, [Type], Cont_Name, 
		Addr_1, Addr_2, Addr_3, MOA_Add4, 
		-- Area, District, Location, Country, REGION_CODE,
		Area, District, Country, REGION_CODE,
		Office_Tel, Home_Tel, Mobile, Fax, Email, DM, Deleted
	)
	Select 
		i.[PROJECT_ID], i.[AM_NO], N'M', i.[CONT_PERSON], 
		i.[ADDR_1], i.[ADDR_2], i.[ADDR_3],i.[ADDR_4], 
		-- i.[AREA], i.[DIST_CODE], i.Location, i.[COUNTRY_CODE], [REGION_CODE],
		i.[AREA], i.[DIST_CODE], i.[COUNTRY_CODE], [REGION_CODE],
		i.[OFF_TEL], i.[TEL_NO], i.[MOBILE], i.[FAX], i.[EMAIL], N'Y', N'N'
	From Inserted i
	Where 
		Not Exists (Select * From Mailing_List m Where m.Prj_ID = i.Project_ID And m.Reg_No = i.[AM_NO] And m.[Type] = N'M')
	
  
          
	
End
GO

ALTER TABLE [dbo].[AM_CONTACT] ENABLE TRIGGER [TG_AM_CONTACT_OnInserted]
GO

CREATE Trigger [dbo].[TG_AM_CONTACT_OnUpdated]
On [dbo].[AM_CONTACT]
 
After Update
As
Begin
	
	Update Mailing_List
	Set 
		Cont_Name = i.[CONT_PERSON], 
		Addr_1 = i.[ADDR_1], 
		Addr_2 = i.[ADDR_2],
		Addr_3 = i.[ADDR_3], 
		MOA_Add4 = i.[ADDR_4], 
		Area = i.[AREA], 
		District = i.[DIST_CODE],
		-- Location = i.Location, 
		Country = i.[COUNTRY_CODE], 
		Office_Tel = i.[OFF_TEL],
		Home_Tel = i.[TEL_NO], 
		Mobile = i.[MOBILE], 
		Fax = i.[FAX], 
		Email = i.[EMAIL],
		--BEGIN #20070226
		Region_Code = i.[REGION_CODE]
		--END #20070226
	FROM
		Mailing_List
		JOIN Inserted i ON Mailing_List.Prj_ID = i.Project_ID And Mailing_List.Reg_No = i.[AM_NO] 
	Where
		Mailing_List.[Type] = N'M'


End
GO

ALTER TABLE [dbo].[AM_CONTACT] ENABLE TRIGGER [TG_AM_CONTACT_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_CONTACT_OnDeleted]
On [dbo].[AM_CONTACT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CONT_PERSON = ' + Case When CONT_PERSON Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONT_PERSON) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_3) + '''' End + ', ADDR_4 = ' + Case When ADDR_4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_4) + '''' End + ', TEL_NO = ' + Case When TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEL_NO) + '''' End + ', OFF_TEL = ' + Case When OFF_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OFF_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''' End + ', AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AREA) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + 'CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_CONTACT] ENABLE TRIGGER [TG_AUD_AM_CONTACT_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_CONTACT_OnInserted]
On [dbo].[AM_CONTACT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', CONT_PERSON = ' + Case When CONT_PERSON Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CONT_PERSON) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR_3) + '''' End + ', ADDR_4 = ' + Case When ADDR_4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR_4) + '''' End + ', TEL_NO = ' + Case When TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEL_NO) + '''' End + ', OFF_TEL = ' + Case When OFF_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),OFF_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),EMAIL) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DIST_CODE) + '''' End + ', COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COUNTRY_CODE) + '''' End + ', AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AREA) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REGION_CODE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + 'UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_CONTACT] ENABLE TRIGGER [TG_AUD_AM_CONTACT_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_CONTACT_OnUpdated]
On [dbo].[AM_CONTACT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CONT_PERSON Is Null And d.CONT_PERSON Is Not Null) Or (i.CONT_PERSON Is Not Null And d.CONT_PERSON Is Null) Or (i.CONT_PERSON Is Not Null And d.CONT_PERSON Is Not Null And i.CONT_PERSON <> d.CONT_PERSON)) Then 'CONT_PERSON = ' + Case When d.CONT_PERSON Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CONT_PERSON) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_1 Is Null And d.ADDR_1 Is Not Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Not Null And i.ADDR_1 <> d.ADDR_1)) Then 'ADDR_1 = ' + Case When d.ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR_1) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_2 Is Null And d.ADDR_2 Is Not Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Not Null And i.ADDR_2 <> d.ADDR_2)) Then 'ADDR_2 = ' + Case When d.ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR_2) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_3 Is Null And d.ADDR_3 Is Not Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Not Null And i.ADDR_3 <> d.ADDR_3)) Then 'ADDR_3 = ' + Case When d.ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR_3) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_4 Is Null And d.ADDR_4 Is Not Null) Or (i.ADDR_4 Is Not Null And d.ADDR_4 Is Null) Or (i.ADDR_4 Is Not Null And d.ADDR_4 Is Not Null And i.ADDR_4 <> d.ADDR_4)) Then 'ADDR_4 = ' + Case When d.ADDR_4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR_4) + '''' End + ', ' Else '' End +  Case When ((i.TEL_NO Is Null And d.TEL_NO Is Not Null) Or (i.TEL_NO Is Not Null And d.TEL_NO Is Null) Or (i.TEL_NO Is Not Null And d.TEL_NO Is Not Null And i.TEL_NO <> d.TEL_NO)) Then 'TEL_NO = ' + Case When d.TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEL_NO) + '''' End + ', ' Else '' End +  Case When ((i.OFF_TEL Is Null And d.OFF_TEL Is Not Null) Or (i.OFF_TEL Is Not Null And d.OFF_TEL Is Null) Or (i.OFF_TEL Is Not Null And d.OFF_TEL Is Not Null And i.OFF_TEL <> d.OFF_TEL)) Then 'OFF_TEL = ' + Case When d.OFF_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.OFF_TEL) + '''' End + ', ' Else '' End +  Case When ((i.MOBILE Is Null And d.MOBILE Is Not Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Not Null And i.MOBILE <> d.MOBILE)) Then 'MOBILE = ' + Case When d.MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MOBILE) + '''' End + ', ' Else '' End +  Case When ((i.FAX Is Null And d.FAX Is Not Null) Or (i.FAX Is Not Null And d.FAX Is Null) Or (i.FAX Is Not Null And d.FAX Is Not Null And i.FAX <> d.FAX)) Then 'FAX = ' + Case When d.FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FAX) + '''' End + ', ' Else '' End +  Case When ((i.EMAIL Is Null And d.EMAIL Is Not Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Not Null And i.EMAIL <> d.EMAIL)) Then 'EMAIL = ' + Case When d.EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.EMAIL) + '''' End + ', ' Else '' End +  Case When ((i.DIST_CODE Is Null And d.DIST_CODE Is Not Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Not Null And i.DIST_CODE <> d.DIST_CODE)) Then 'DIST_CODE = ' + Case When d.DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DIST_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COUNTRY_CODE Is Null And d.COUNTRY_CODE Is Not Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Not Null And i.COUNTRY_CODE <> d.COUNTRY_CODE)) Then 'COUNTRY_CODE = ' + Case When d.COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COUNTRY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.AREA Is Null And d.AREA Is Not Null) Or (i.AREA Is Not Null And d.AREA Is Null) Or (i.AREA Is Not Null And d.AREA Is Not Null And i.AREA <> d.AREA)) Then 'AREA = ' + Case When d.AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AREA) + '''' End + ', ' Else '' End +  Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When d.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CONT_PERSON Is Null And d.CONT_PERSON Is Not Null) Or (i.CONT_PERSON Is Not Null And d.CONT_PERSON Is Null) Or (i.CONT_PERSON Is Not Null And d.CONT_PERSON Is Not Null And i.CONT_PERSON <> d.CONT_PERSON)) Then 'CONT_PERSON = ' + Case When i.CONT_PERSON Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CONT_PERSON) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_1 Is Null And d.ADDR_1 Is Not Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Not Null And i.ADDR_1 <> d.ADDR_1)) Then 'ADDR_1 = ' + Case When i.ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR_1) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_2 Is Null And d.ADDR_2 Is Not Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Not Null And i.ADDR_2 <> d.ADDR_2)) Then 'ADDR_2 = ' + Case When i.ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR_2) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_3 Is Null And d.ADDR_3 Is Not Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Not Null And i.ADDR_3 <> d.ADDR_3)) Then 'ADDR_3 = ' + Case When i.ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR_3) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_4 Is Null And d.ADDR_4 Is Not Null) Or (i.ADDR_4 Is Not Null And d.ADDR_4 Is Null) Or (i.ADDR_4 Is Not Null And d.ADDR_4 Is Not Null And i.ADDR_4 <> d.ADDR_4)) Then 'ADDR_4 = ' + Case When i.ADDR_4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR_4) + '''' End + ', ' Else '' End +  Case When ((i.TEL_NO Is Null And d.TEL_NO Is Not Null) Or (i.TEL_NO Is Not Null And d.TEL_NO Is Null) Or (i.TEL_NO Is Not Null And d.TEL_NO Is Not Null And i.TEL_NO <> d.TEL_NO)) Then 'TEL_NO = ' + Case When i.TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEL_NO) + '''' End + ', ' Else '' End +  Case When ((i.OFF_TEL Is Null And d.OFF_TEL Is Not Null) Or (i.OFF_TEL Is Not Null And d.OFF_TEL Is Null) Or (i.OFF_TEL Is Not Null And d.OFF_TEL Is Not Null And i.OFF_TEL <> d.OFF_TEL)) Then 'OFF_TEL = ' + Case When i.OFF_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.OFF_TEL) + '''' End + ', ' Else '' End +  Case When ((i.MOBILE Is Null And d.MOBILE Is Not Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Not Null And i.MOBILE <> d.MOBILE)) Then 'MOBILE = ' + Case When i.MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MOBILE) + '''' End + ', ' Else '' End +  Case When ((i.FAX Is Null And d.FAX Is Not Null) Or (i.FAX Is Not Null And d.FAX Is Null) Or (i.FAX Is Not Null And d.FAX Is Not Null And i.FAX <> d.FAX)) Then 'FAX = ' + Case When i.FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FAX) + '''' End + ', ' Else '' End +  Case When ((i.EMAIL Is Null And d.EMAIL Is Not Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Not Null And i.EMAIL <> d.EMAIL)) Then 'EMAIL = ' + Case When i.EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.EMAIL) + '''' End + ', ' Else '' End +  Case When ((i.DIST_CODE Is Null And d.DIST_CODE Is Not Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Not Null And i.DIST_CODE <> d.DIST_CODE)) Then 'DIST_CODE = ' + Case When i.DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DIST_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COUNTRY_CODE Is Null And d.COUNTRY_CODE Is Not Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Not Null And i.COUNTRY_CODE <> d.COUNTRY_CODE)) Then 'COUNTRY_CODE = ' + Case When i.COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COUNTRY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.AREA Is Null And d.AREA Is Not Null) Or (i.AREA Is Not Null And d.AREA Is Null) Or (i.AREA Is Not Null And d.AREA Is Not Null And i.AREA <> d.AREA)) Then 'AREA = ' + Case When i.AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AREA) + '''' End + ', ' Else '' End +  Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When i.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End)  ChangedValue, Left('AM_NO = ''' + Convert(NVarChar(4000), i.AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CONT_PERSON = ' + Case When CONT_PERSON Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONT_PERSON) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_3) + '''' End + ', ADDR_4 = ' + Case When ADDR_4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_4) + '''' End + ', TEL_NO = ' + Case When TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEL_NO) + '''' End + ', OFF_TEL = ' + Case When OFF_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OFF_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''' End + ', AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AREA) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CONT_PERSON = ' + Case When CONT_PERSON Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONT_PERSON) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_3) + '''' End + ', ADDR_4 = ' + Case When ADDR_4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_4) + '''' End + ', TEL_NO = ' + Case When TEL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEL_NO) + '''' End + ', OFF_TEL = ' + Case When OFF_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OFF_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''' End + ', AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AREA) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID)  End
GO

ALTER TABLE [dbo].[AM_CONTACT] ENABLE TRIGGER [TG_AUD_AM_CONTACT_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_ITEM_OnDeleted]
On [dbo].[AM_ITEM]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_ITEM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', FM_CP = ' + Case When FM_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', FM_CP_LIST_PRICE = ' + Case When FM_CP_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_LIST_PRICE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_ITEM] ENABLE TRIGGER [TG_AUD_AM_ITEM_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_ITEM_OnInserted]
On [dbo].[AM_ITEM]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_ITEM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CP_CODE) + '''' End + ', FM_CP = ' + Case When FM_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CP) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', FM_CP_LIST_PRICE = ' + Case When FM_CP_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CP_LIST_PRICE) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_ITEM] ENABLE TRIGGER [TG_AUD_AM_ITEM_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_ITEM_OnUpdated]
On [dbo].[AM_ITEM]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_ITEM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_CODE Is Null And d.FM_CP_CODE Is Not Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Not Null And i.FM_CP_CODE <> d.FM_CP_CODE)) Then 'FM_CP_CODE = ' + Case When d.FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CP_CODE) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP Is Null And d.FM_CP Is Not Null) Or (i.FM_CP Is Not Null And d.FM_CP Is Null) Or (i.FM_CP Is Not Null And d.FM_CP Is Not Null And i.FM_CP <> d.FM_CP)) Then 'FM_CP = ' + Case When d.FM_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CP) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_LIST_PRICE Is Null And d.FM_CP_LIST_PRICE Is Not Null) Or (i.FM_CP_LIST_PRICE Is Not Null And d.FM_CP_LIST_PRICE Is Null) Or (i.FM_CP_LIST_PRICE Is Not Null And d.FM_CP_LIST_PRICE Is Not Null And i.FM_CP_LIST_PRICE <> d.FM_CP_LIST_PRICE)) Then 'FM_CP_LIST_PRICE = ' + Case When d.FM_CP_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CP_LIST_PRICE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_CODE Is Null And d.FM_CP_CODE Is Not Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Not Null And i.FM_CP_CODE <> d.FM_CP_CODE)) Then 'FM_CP_CODE = ' + Case When i.FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CP_CODE) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP Is Null And d.FM_CP Is Not Null) Or (i.FM_CP Is Not Null And d.FM_CP Is Null) Or (i.FM_CP Is Not Null And d.FM_CP Is Not Null And i.FM_CP <> d.FM_CP)) Then 'FM_CP = ' + Case When i.FM_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CP) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_LIST_PRICE Is Null And d.FM_CP_LIST_PRICE Is Not Null) Or (i.FM_CP_LIST_PRICE Is Not Null And d.FM_CP_LIST_PRICE Is Null) Or (i.FM_CP_LIST_PRICE Is Not Null And d.FM_CP_LIST_PRICE Is Not Null And i.FM_CP_LIST_PRICE <> d.FM_CP_LIST_PRICE)) Then 'FM_CP_LIST_PRICE = ' + Case When i.FM_CP_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CP_LIST_PRICE) + '''' End + ', ' Else '' End)  ChangedValue, Left('AM_NO = ''' + Convert(NVarChar(4000), i.AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), i.FM_CP_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_ITEM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', FM_CP = ' + Case When FM_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', FM_CP_LIST_PRICE = ' + Case When FM_CP_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_LIST_PRICE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_ITEM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', FM_CP = ' + Case When FM_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', FM_CP_LIST_PRICE = ' + Case When FM_CP_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_LIST_PRICE) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE)  End
GO

ALTER TABLE [dbo].[AM_ITEM] ENABLE TRIGGER [TG_AUD_AM_ITEM_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_NO_RANGE_OnDeleted]
On [dbo].[AM_NO_RANGE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_NO_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', RANGE_ID = ' + Case When RANGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_ID) + '''' End + ', START_NO = ' + Case When START_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), START_NO) + '''' End + ', END_NO = ' + Case When END_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), END_NO) + '''' End + ', CURRENT_NO = ' + Case When CURRENT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURRENT_NO) + '''' End + ', RANGE_TYPE = ' + Case When RANGE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_TYPE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RANGE_ID = ''' + Convert(NVarChar(4000), RANGE_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_NO_RANGE] ENABLE TRIGGER [TG_AUD_AM_NO_RANGE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_NO_RANGE_OnInserted]
On [dbo].[AM_NO_RANGE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_NO_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', RANGE_ID = ' + Case When RANGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RANGE_ID) + '''' End + ', START_NO = ' + Case When START_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),START_NO) + '''' End + ', END_NO = ' + Case When END_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),END_NO) + '''' End + ', CURRENT_NO = ' + Case When CURRENT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURRENT_NO) + '''' End + ', RANGE_TYPE = ' + Case When RANGE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RANGE_TYPE) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RANGE_ID = ''' + Convert(NVarChar(4000), RANGE_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_NO_RANGE] ENABLE TRIGGER [TG_AUD_AM_NO_RANGE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_NO_RANGE_OnUpdated]
On [dbo].[AM_NO_RANGE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_NO_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_ID Is Null And d.RANGE_ID Is Not Null) Or (i.RANGE_ID Is Not Null And d.RANGE_ID Is Null) Or (i.RANGE_ID Is Not Null And d.RANGE_ID Is Not Null And i.RANGE_ID <> d.RANGE_ID)) Then 'RANGE_ID = ' + Case When d.RANGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RANGE_ID) + '''' End + ', ' Else '' End +  Case When ((i.START_NO Is Null And d.START_NO Is Not Null) Or (i.START_NO Is Not Null And d.START_NO Is Null) Or (i.START_NO Is Not Null And d.START_NO Is Not Null And i.START_NO <> d.START_NO)) Then 'START_NO = ' + Case When d.START_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.START_NO) + '''' End + ', ' Else '' End +  Case When ((i.END_NO Is Null And d.END_NO Is Not Null) Or (i.END_NO Is Not Null And d.END_NO Is Null) Or (i.END_NO Is Not Null And d.END_NO Is Not Null And i.END_NO <> d.END_NO)) Then 'END_NO = ' + Case When d.END_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.END_NO) + '''' End + ', ' Else '' End +  Case When ((i.CURRENT_NO Is Null And d.CURRENT_NO Is Not Null) Or (i.CURRENT_NO Is Not Null And d.CURRENT_NO Is Null) Or (i.CURRENT_NO Is Not Null And d.CURRENT_NO Is Not Null And i.CURRENT_NO <> d.CURRENT_NO)) Then 'CURRENT_NO = ' + Case When d.CURRENT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURRENT_NO) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_TYPE Is Null And d.RANGE_TYPE Is Not Null) Or (i.RANGE_TYPE Is Not Null And d.RANGE_TYPE Is Null) Or (i.RANGE_TYPE Is Not Null And d.RANGE_TYPE Is Not Null And i.RANGE_TYPE <> d.RANGE_TYPE)) Then 'RANGE_TYPE = ' + Case When d.RANGE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RANGE_TYPE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_ID Is Null And d.RANGE_ID Is Not Null) Or (i.RANGE_ID Is Not Null And d.RANGE_ID Is Null) Or (i.RANGE_ID Is Not Null And d.RANGE_ID Is Not Null And i.RANGE_ID <> d.RANGE_ID)) Then 'RANGE_ID = ' + Case When i.RANGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RANGE_ID) + '''' End + ', ' Else '' End +  Case When ((i.START_NO Is Null And d.START_NO Is Not Null) Or (i.START_NO Is Not Null And d.START_NO Is Null) Or (i.START_NO Is Not Null And d.START_NO Is Not Null And i.START_NO <> d.START_NO)) Then 'START_NO = ' + Case When i.START_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.START_NO) + '''' End + ', ' Else '' End +  Case When ((i.END_NO Is Null And d.END_NO Is Not Null) Or (i.END_NO Is Not Null And d.END_NO Is Null) Or (i.END_NO Is Not Null And d.END_NO Is Not Null And i.END_NO <> d.END_NO)) Then 'END_NO = ' + Case When i.END_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.END_NO) + '''' End + ', ' Else '' End +  Case When ((i.CURRENT_NO Is Null And d.CURRENT_NO Is Not Null) Or (i.CURRENT_NO Is Not Null And d.CURRENT_NO Is Null) Or (i.CURRENT_NO Is Not Null And d.CURRENT_NO Is Not Null And i.CURRENT_NO <> d.CURRENT_NO)) Then 'CURRENT_NO = ' + Case When i.CURRENT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURRENT_NO) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_TYPE Is Null And d.RANGE_TYPE Is Not Null) Or (i.RANGE_TYPE Is Not Null And d.RANGE_TYPE Is Null) Or (i.RANGE_TYPE Is Not Null And d.RANGE_TYPE Is Not Null And i.RANGE_TYPE <> d.RANGE_TYPE)) Then 'RANGE_TYPE = ' + Case When i.RANGE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RANGE_TYPE) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', RANGE_ID = ''' + Convert(NVarChar(4000), i.RANGE_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.RANGE_ID = d.RANGE_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_NO_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', RANGE_ID = ' + Case When RANGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_ID) + '''' End + ', START_NO = ' + Case When START_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), START_NO) + '''' End + ', END_NO = ' + Case When END_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), END_NO) + '''' End + ', CURRENT_NO = ' + Case When CURRENT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURRENT_NO) + '''' End + ', RANGE_TYPE = ' + Case When RANGE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_TYPE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RANGE_ID = ''' + Convert(NVarChar(4000), RANGE_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.RANGE_ID = d.RANGE_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_NO_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', RANGE_ID = ' + Case When RANGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_ID) + '''' End + ', START_NO = ' + Case When START_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), START_NO) + '''' End + ', END_NO = ' + Case When END_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), END_NO) + '''' End + ', CURRENT_NO = ' + Case When CURRENT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURRENT_NO) + '''' End + ', RANGE_TYPE = ' + Case When RANGE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_TYPE) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RANGE_ID = ''' + Convert(NVarChar(4000), RANGE_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.RANGE_ID = d.RANGE_ID)  End
GO

ALTER TABLE [dbo].[AM_NO_RANGE] ENABLE TRIGGER [TG_AUD_AM_NO_RANGE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PACKAGES_OnDeleted]
On [dbo].[AM_PACKAGES]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_PACKAGES', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PACKAGE_ID) + '''' End + ', QTY = ' + Case When QTY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QTY) + '''' End + ', PRICE_ADJUST = ' + Case When PRICE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRICE_ADJUST) + '''' End + ', NO_OF_MONTHS = ' + Case When NO_OF_MONTHS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NO_OF_MONTHS) + '''' End + ', INTERNAL_COST = ' + Case When INTERNAL_COST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), INTERNAL_COST) + '''' End + ', ADD_TO_CONTRACT_PRICE = ' + Case When ADD_TO_CONTRACT_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_TO_CONTRACT_PRICE) + '''' End + ', ADD_PKG_B4_ADJUST = ' + Case When ADD_PKG_B4_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_PKG_B4_ADJUST) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_PACKAGES] ENABLE TRIGGER [TG_AUD_AM_PACKAGES_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PACKAGES_OnInserted]
On [dbo].[AM_PACKAGES]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_PACKAGES', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PACKAGE_ID) + '''' End + ', QTY = ' + Case When QTY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),QTY) + '''' End + ', PRICE_ADJUST = ' + Case When PRICE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PRICE_ADJUST) + '''' End + ', NO_OF_MONTHS = ' + Case When NO_OF_MONTHS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),NO_OF_MONTHS) + '''' End + ', INTERNAL_COST = ' + Case When INTERNAL_COST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),INTERNAL_COST) + '''' End + ', ADD_TO_CONTRACT_PRICE = ' + Case When ADD_TO_CONTRACT_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADD_TO_CONTRACT_PRICE) + '''' End + ', ADD_PKG_B4_ADJUST = ' + Case When ADD_PKG_B4_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADD_PKG_B4_ADJUST) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_PACKAGES] ENABLE TRIGGER [TG_AUD_AM_PACKAGES_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PACKAGES_OnUpdated]
On [dbo].[AM_PACKAGES]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PACKAGES', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When d.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.PACKAGE_ID Is Null And d.PACKAGE_ID Is Not Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Not Null And i.PACKAGE_ID <> d.PACKAGE_ID)) Then 'PACKAGE_ID = ' + Case When d.PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PACKAGE_ID) + '''' End + ', ' Else '' End +  Case When ((i.QTY Is Null And d.QTY Is Not Null) Or (i.QTY Is Not Null And d.QTY Is Null) Or (i.QTY Is Not Null And d.QTY Is Not Null And i.QTY <> d.QTY)) Then 'QTY = ' + Case When d.QTY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.QTY) + '''' End + ', ' Else '' End +  Case When ((i.PRICE_ADJUST Is Null And d.PRICE_ADJUST Is Not Null) Or (i.PRICE_ADJUST Is Not Null And d.PRICE_ADJUST Is Null) Or (i.PRICE_ADJUST Is Not Null And d.PRICE_ADJUST Is Not Null And i.PRICE_ADJUST <> d.PRICE_ADJUST)) Then 'PRICE_ADJUST = ' + Case When d.PRICE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PRICE_ADJUST) + '''' End + ', ' Else '' End +  Case When ((i.NO_OF_MONTHS Is Null And d.NO_OF_MONTHS Is Not Null) Or (i.NO_OF_MONTHS Is Not Null And d.NO_OF_MONTHS Is Null) Or (i.NO_OF_MONTHS Is Not Null And d.NO_OF_MONTHS Is Not Null And i.NO_OF_MONTHS <> d.NO_OF_MONTHS)) Then 'NO_OF_MONTHS = ' + Case When d.NO_OF_MONTHS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.NO_OF_MONTHS) + '''' End + ', ' Else '' End +  Case When ((i.INTERNAL_COST Is Null And d.INTERNAL_COST Is Not Null) Or (i.INTERNAL_COST Is Not Null And d.INTERNAL_COST Is Null) Or (i.INTERNAL_COST Is Not Null And d.INTERNAL_COST Is Not Null And i.INTERNAL_COST <> d.INTERNAL_COST)) Then 'INTERNAL_COST = ' + Case When d.INTERNAL_COST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.INTERNAL_COST) + '''' End + ', ' Else '' End +  Case When ((i.ADD_TO_CONTRACT_PRICE Is Null And d.ADD_TO_CONTRACT_PRICE Is Not Null) Or (i.ADD_TO_CONTRACT_PRICE Is Not Null And d.ADD_TO_CONTRACT_PRICE Is Null) Or (i.ADD_TO_CONTRACT_PRICE Is Not Null And d.ADD_TO_CONTRACT_PRICE Is Not Null And i.ADD_TO_CONTRACT_PRICE <> d.ADD_TO_CONTRACT_PRICE)) Then 'ADD_TO_CONTRACT_PRICE = ' + Case When d.ADD_TO_CONTRACT_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADD_TO_CONTRACT_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.ADD_PKG_B4_ADJUST Is Null And d.ADD_PKG_B4_ADJUST Is Not Null) Or (i.ADD_PKG_B4_ADJUST Is Not Null And d.ADD_PKG_B4_ADJUST Is Null) Or (i.ADD_PKG_B4_ADJUST Is Not Null And d.ADD_PKG_B4_ADJUST Is Not Null And i.ADD_PKG_B4_ADJUST <> d.ADD_PKG_B4_ADJUST)) Then 'ADD_PKG_B4_ADJUST = ' + Case When d.ADD_PKG_B4_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADD_PKG_B4_ADJUST) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When i.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.PACKAGE_ID Is Null And d.PACKAGE_ID Is Not Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Not Null And i.PACKAGE_ID <> d.PACKAGE_ID)) Then 'PACKAGE_ID = ' + Case When i.PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PACKAGE_ID) + '''' End + ', ' Else '' End +  Case When ((i.QTY Is Null And d.QTY Is Not Null) Or (i.QTY Is Not Null And d.QTY Is Null) Or (i.QTY Is Not Null And d.QTY Is Not Null And i.QTY <> d.QTY)) Then 'QTY = ' + Case When i.QTY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.QTY) + '''' End + ', ' Else '' End +  Case When ((i.PRICE_ADJUST Is Null And d.PRICE_ADJUST Is Not Null) Or (i.PRICE_ADJUST Is Not Null And d.PRICE_ADJUST Is Null) Or (i.PRICE_ADJUST Is Not Null And d.PRICE_ADJUST Is Not Null And i.PRICE_ADJUST <> d.PRICE_ADJUST)) Then 'PRICE_ADJUST = ' + Case When i.PRICE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PRICE_ADJUST) + '''' End + ', ' Else '' End +  Case When ((i.NO_OF_MONTHS Is Null And d.NO_OF_MONTHS Is Not Null) Or (i.NO_OF_MONTHS Is Not Null And d.NO_OF_MONTHS Is Null) Or (i.NO_OF_MONTHS Is Not Null And d.NO_OF_MONTHS Is Not Null And i.NO_OF_MONTHS <> d.NO_OF_MONTHS)) Then 'NO_OF_MONTHS = ' + Case When i.NO_OF_MONTHS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.NO_OF_MONTHS) + '''' End + ', ' Else '' End +  Case When ((i.INTERNAL_COST Is Null And d.INTERNAL_COST Is Not Null) Or (i.INTERNAL_COST Is Not Null And d.INTERNAL_COST Is Null) Or (i.INTERNAL_COST Is Not Null And d.INTERNAL_COST Is Not Null And i.INTERNAL_COST <> d.INTERNAL_COST)) Then 'INTERNAL_COST = ' + Case When i.INTERNAL_COST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.INTERNAL_COST) + '''' End + ', ' Else '' End +  Case When ((i.ADD_TO_CONTRACT_PRICE Is Null And d.ADD_TO_CONTRACT_PRICE Is Not Null) Or (i.ADD_TO_CONTRACT_PRICE Is Not Null And d.ADD_TO_CONTRACT_PRICE Is Null) Or (i.ADD_TO_CONTRACT_PRICE Is Not Null And d.ADD_TO_CONTRACT_PRICE Is Not Null And i.ADD_TO_CONTRACT_PRICE <> d.ADD_TO_CONTRACT_PRICE)) Then 'ADD_TO_CONTRACT_PRICE = ' + Case When i.ADD_TO_CONTRACT_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADD_TO_CONTRACT_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.ADD_PKG_B4_ADJUST Is Null And d.ADD_PKG_B4_ADJUST Is Not Null) Or (i.ADD_PKG_B4_ADJUST Is Not Null And d.ADD_PKG_B4_ADJUST Is Null) Or (i.ADD_PKG_B4_ADJUST Is Not Null And d.ADD_PKG_B4_ADJUST Is Not Null And i.ADD_PKG_B4_ADJUST <> d.ADD_PKG_B4_ADJUST)) Then 'ADD_PKG_B4_ADJUST = ' + Case When i.ADD_PKG_B4_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADD_PKG_B4_ADJUST) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('AM_NO = ''' + Convert(NVarChar(4000), i.AM_NO) + ''', FM_CODE = ''' + Convert(NVarChar(4000), i.FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), i.PACKAGE_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.AM_NO = d.AM_NO And i.FM_CODE = d.FM_CODE And i.PROJECT_ID = d.PROJECT_ID And i.PACKAGE_ID = d.PACKAGE_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_PACKAGES', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PACKAGE_ID) + '''' End + ', QTY = ' + Case When QTY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QTY) + '''' End + ', PRICE_ADJUST = ' + Case When PRICE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRICE_ADJUST) + '''' End + ', NO_OF_MONTHS = ' + Case When NO_OF_MONTHS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NO_OF_MONTHS) + '''' End + ', INTERNAL_COST = ' + Case When INTERNAL_COST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), INTERNAL_COST) + '''' End + ', ADD_TO_CONTRACT_PRICE = ' + Case When ADD_TO_CONTRACT_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_TO_CONTRACT_PRICE) + '''' End + ', ADD_PKG_B4_ADJUST = ' + Case When ADD_PKG_B4_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_PKG_B4_ADJUST) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.AM_NO = d.AM_NO And i.FM_CODE = d.FM_CODE And i.PROJECT_ID = d.PROJECT_ID And i.PACKAGE_ID = d.PACKAGE_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PACKAGES', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PACKAGE_ID) + '''' End + ', QTY = ' + Case When QTY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QTY) + '''' End + ', PRICE_ADJUST = ' + Case When PRICE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRICE_ADJUST) + '''' End + ', NO_OF_MONTHS = ' + Case When NO_OF_MONTHS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NO_OF_MONTHS) + '''' End + ', INTERNAL_COST = ' + Case When INTERNAL_COST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), INTERNAL_COST) + '''' End + ', ADD_TO_CONTRACT_PRICE = ' + Case When ADD_TO_CONTRACT_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_TO_CONTRACT_PRICE) + '''' End + ', ADD_PKG_B4_ADJUST = ' + Case When ADD_PKG_B4_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_PKG_B4_ADJUST) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.AM_NO = d.AM_NO And i.FM_CODE = d.FM_CODE And i.PROJECT_ID = d.PROJECT_ID And i.PACKAGE_ID = d.PACKAGE_ID)  End
GO

ALTER TABLE [dbo].[AM_PACKAGES] ENABLE TRIGGER [TG_AUD_AM_PACKAGES_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_FU_MORTGAGE_OnDeleted]
On [dbo].[AM_PAYMENT_FU_MORTGAGE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_PAYMENT_FU_MORTGAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', MORTGAGE_AMT = ' + Case When MORTGAGE_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MORTGAGE_AMT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BANK_CODE = ''' + Convert(NVarChar(4000), BANK_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_FU_MORTGAGE] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_FU_MORTGAGE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_FU_MORTGAGE_OnInserted]
On [dbo].[AM_PAYMENT_FU_MORTGAGE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_PAYMENT_FU_MORTGAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_RATE) + '''' End + ', MORTGAGE_AMT = ' + Case When MORTGAGE_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MORTGAGE_AMT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BANK_CODE = ''' + Convert(NVarChar(4000), BANK_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_FU_MORTGAGE] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_FU_MORTGAGE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_FU_MORTGAGE_OnUpdated]
On [dbo].[AM_PAYMENT_FU_MORTGAGE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PAYMENT_FU_MORTGAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BANK_CODE Is Null And d.BANK_CODE Is Not Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Not Null And i.BANK_CODE <> d.BANK_CODE)) Then 'BANK_CODE = ' + Case When d.BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BANK_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When d.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When d.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.MORTGAGE_AMT Is Null And d.MORTGAGE_AMT Is Not Null) Or (i.MORTGAGE_AMT Is Not Null And d.MORTGAGE_AMT Is Null) Or (i.MORTGAGE_AMT Is Not Null And d.MORTGAGE_AMT Is Not Null And i.MORTGAGE_AMT <> d.MORTGAGE_AMT)) Then 'MORTGAGE_AMT = ' + Case When d.MORTGAGE_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MORTGAGE_AMT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BANK_CODE Is Null And d.BANK_CODE Is Not Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Not Null And i.BANK_CODE <> d.BANK_CODE)) Then 'BANK_CODE = ' + Case When i.BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BANK_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When i.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When i.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.MORTGAGE_AMT Is Null And d.MORTGAGE_AMT Is Not Null) Or (i.MORTGAGE_AMT Is Not Null And d.MORTGAGE_AMT Is Null) Or (i.MORTGAGE_AMT Is Not Null And d.MORTGAGE_AMT Is Not Null And i.MORTGAGE_AMT <> d.MORTGAGE_AMT)) Then 'MORTGAGE_AMT = ' + Case When i.MORTGAGE_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MORTGAGE_AMT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('AM_NO = ''' + Convert(NVarChar(4000), i.AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', BANK_CODE = ''' + Convert(NVarChar(4000), i.BANK_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.BANK_CODE = d.BANK_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_PAYMENT_FU_MORTGAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', MORTGAGE_AMT = ' + Case When MORTGAGE_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MORTGAGE_AMT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BANK_CODE = ''' + Convert(NVarChar(4000), BANK_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.BANK_CODE = d.BANK_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PAYMENT_FU_MORTGAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', MORTGAGE_AMT = ' + Case When MORTGAGE_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MORTGAGE_AMT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BANK_CODE = ''' + Convert(NVarChar(4000), BANK_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.BANK_CODE = d.BANK_CODE)  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_FU_MORTGAGE] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_FU_MORTGAGE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_FU_OVERDUE_PENALTY_OnDeleted]
On [dbo].[AM_PAYMENT_FU_OVERDUE_PENALTY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_PAYMENT_FU_OVERDUE_PENALTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', DATE = ' + Case When DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DATE,121) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', DATE = ''' + Convert(NVarChar(4000), DATE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_FU_OVERDUE_PENALTY] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_FU_OVERDUE_PENALTY_OnDeleted]
GO



CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_FU_OVERDUE_PENALTY_OnInserted]
On [dbo].[AM_PAYMENT_FU_OVERDUE_PENALTY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_PAYMENT_FU_OVERDUE_PENALTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', DATE = ' + Case When DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DATE,121) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', DATE = ''' + Convert(NVarChar(4000), DATE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_FU_OVERDUE_PENALTY] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_FU_OVERDUE_PENALTY_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_FU_OVERDUE_PENALTY_OnUpdated]
On [dbo].[AM_PAYMENT_FU_OVERDUE_PENALTY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PAYMENT_FU_OVERDUE_PENALTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.DATE Is Null And d.DATE Is Not Null) Or (i.DATE Is Not Null And d.DATE Is Null) Or (i.DATE Is Not Null And d.DATE Is Not Null And i.DATE <> d.DATE)) Then 'DATE = ' + Case When d.DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When d.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When d.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.AMOUNT Is Null And d.AMOUNT Is Not Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Not Null And i.AMOUNT <> d.AMOUNT)) Then 'AMOUNT = ' + Case When d.AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AMOUNT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.DATE Is Null And d.DATE Is Not Null) Or (i.DATE Is Not Null And d.DATE Is Null) Or (i.DATE Is Not Null And d.DATE Is Not Null And i.DATE <> d.DATE)) Then 'DATE = ' + Case When i.DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When i.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When i.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.AMOUNT Is Null And d.AMOUNT Is Not Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Not Null And i.AMOUNT <> d.AMOUNT)) Then 'AMOUNT = ' + Case When i.AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AMOUNT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', AM_NO = ''' + Convert(NVarChar(4000), i.AM_NO) + ''', DATE = ''' + Convert(NVarChar(4000), i.DATE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.AM_NO = d.AM_NO And i.DATE = d.DATE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_PAYMENT_FU_OVERDUE_PENALTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', DATE = ' + Case When DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE, 121) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', DATE = ''' + Convert(NVarChar(4000), DATE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.AM_NO = d.AM_NO And i.DATE = d.DATE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PAYMENT_FU_OVERDUE_PENALTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', DATE = ' + Case When DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE, 121) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', DATE = ''' + Convert(NVarChar(4000), DATE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.AM_NO = d.AM_NO And i.DATE = d.DATE)  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_FU_OVERDUE_PENALTY] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_FU_OVERDUE_PENALTY_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_PLAN_OnDeleted]
On [dbo].[AM_PAYMENT_PLAN]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_PAYMENT_PLAN', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_CODE) + '''' End + ', PY_PLAN_SEQ = ' + Case When PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''' End + ', PY_DT_TYPE = ' + Case When PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_TYPE) + '''' End + ', PY_DT_CAL_TYPE = ' + Case When PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_CAL_TYPE) + '''' End + ', PY_DT_FACT = ' + Case When PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_FACT) + '''' End + ', PY_PAYMT_DUE = ' + Case When PY_PAYMT_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PAYMT_DUE) + '''' End + ', PY_DATE_DUE = ' + Case When PY_DATE_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DATE_DUE, 121) + '''' End + ', PY_DESC = ' + Case When PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DESC) + '''' End + ', BEFORE_DATE_DESC = ' + Case When BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BEFORE_DATE_DESC) + '''' End + ', AFTER_DATE_DESC = ' + Case When AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AFTER_DATE_DESC) + '''' End + ', PY_STATUS = ' + Case When PY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_STATUS) + '''' End + ', INITIAL_PAYMENT = ' + Case When INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), INITIAL_PAYMENT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + 'UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', PY_DATEDUE_DESC = ' + Case When PY_DATEDUE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DATEDUE_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_PLAN] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_PLAN_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_PLAN_OnInserted]
On [dbo].[AM_PAYMENT_PLAN]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_PAYMENT_PLAN', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),METHOD_CODE) + '''' End + ', PY_PLAN_SEQ = ' + Case When PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_PLAN_SEQ) + '''' End + ', PY_DT_TYPE = ' + Case When PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DT_TYPE) + '''' End + ', PY_DT_CAL_TYPE = ' + Case When PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DT_CAL_TYPE) + '''' End + ', PY_DT_FACT = ' + Case When PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DT_FACT) + '''' End + ', PY_PAYMT_DUE = ' + Case When PY_PAYMT_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_PAYMT_DUE) + '''' End + ', PY_DATE_DUE = ' + Case When PY_DATE_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DATE_DUE,121) + '''' End + ', PY_DESC = ' + Case When PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DESC) + '''' End + ', BEFORE_DATE_DESC = ' + Case When BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BEFORE_DATE_DESC) + '''' End + ', AFTER_DATE_DESC = ' + Case When AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AFTER_DATE_DESC) + '''' End + ', PY_STATUS = ' + Case When PY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_STATUS) + '''' End + ', INITIAL_PAYMENT = ' + Case When INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),INITIAL_PAYMENT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + 'UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', PY_DATEDUE_DESC = ' + Case When PY_DATEDUE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DATEDUE_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('AM_NO = ''' + Convert(NVarChar(4000), AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_PLAN] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_PLAN_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PAYMENT_PLAN_OnUpdated]
On [dbo].[AM_PAYMENT_PLAN]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

					Insert Into AUDIT_LOG (
						TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
						ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
					)
					Select Left('AM_PAYMENT_PLAN', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
						Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.METHOD_CODE Is Null And d.METHOD_CODE Is Not Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Not Null And i.METHOD_CODE <> d.METHOD_CODE)) Then 'METHOD_CODE = ' + Case When d.METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PY_PLAN_SEQ Is Null And d.PY_PLAN_SEQ Is Not Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Not Null And i.PY_PLAN_SEQ <> d.PY_PLAN_SEQ)) Then 'PY_PLAN_SEQ = ' + Case When d.PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_PLAN_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_TYPE Is Null And d.PY_DT_TYPE Is Not Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Not Null And i.PY_DT_TYPE <> d.PY_DT_TYPE)) Then 'PY_DT_TYPE = ' + Case When d.PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DT_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_CAL_TYPE Is Null And d.PY_DT_CAL_TYPE Is Not Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Not Null And i.PY_DT_CAL_TYPE <> d.PY_DT_CAL_TYPE)) Then 'PY_DT_CAL_TYPE = ' + Case When d.PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DT_CAL_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_FACT Is Null And d.PY_DT_FACT Is Not Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Not Null And i.PY_DT_FACT <> d.PY_DT_FACT)) Then 'PY_DT_FACT = ' + Case When d.PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DT_FACT) + '''' End + ', ' Else '' End +  Case When ((i.PY_PAYMT_DUE Is Null And d.PY_PAYMT_DUE Is Not Null) Or (i.PY_PAYMT_DUE Is Not Null And d.PY_PAYMT_DUE Is Null) Or (i.PY_PAYMT_DUE Is Not Null And d.PY_PAYMT_DUE Is Not Null And i.PY_PAYMT_DUE <> d.PY_PAYMT_DUE)) Then 'PY_PAYMT_DUE = ' + Case When d.PY_PAYMT_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_PAYMT_DUE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DATE_DUE Is Null And d.PY_DATE_DUE Is Not Null) Or (i.PY_DATE_DUE Is Not Null And d.PY_DATE_DUE Is Null) Or (i.PY_DATE_DUE Is Not Null And d.PY_DATE_DUE Is Not Null And i.PY_DATE_DUE <> d.PY_DATE_DUE)) Then 'PY_DATE_DUE = ' + Case When d.PY_DATE_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DATE_DUE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PY_DESC Is Null And d.PY_DESC Is Not Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Not Null And i.PY_DESC <> d.PY_DESC)) Then 'PY_DESC = ' + Case When d.PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DESC) + '''' End + ', ' Else '' End +  Case When ((i.BEFORE_DATE_DESC Is Null And d.BEFORE_DATE_DESC Is Not Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Not Null And i.BEFORE_DATE_DESC <> d.BEFORE_DATE_DESC)) Then 'BEFORE_DATE_DESC = ' + Case When d.BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BEFORE_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.AFTER_DATE_DESC Is Null And d.AFTER_DATE_DESC Is Not Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Not Null And i.AFTER_DATE_DESC <> d.AFTER_DATE_DESC)) Then 'AFTER_DATE_DESC = ' + Case When d.AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AFTER_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.PY_STATUS Is Null And d.PY_STATUS Is Not Null) Or (i.PY_STATUS Is Not Null And d.PY_STATUS Is Null) Or (i.PY_STATUS Is Not Null And d.PY_STATUS Is Not Null And i.PY_STATUS <> d.PY_STATUS)) Then 'PY_STATUS = ' + Case When d.PY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.INITIAL_PAYMENT Is Null And d.INITIAL_PAYMENT Is Not Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Not Null And i.INITIAL_PAYMENT <> d.INITIAL_PAYMENT)) Then 'INITIAL_PAYMENT = ' + Case When d.INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.INITIAL_PAYMENT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.PY_DATEDUE_DESC Is Null And d.PY_DATEDUE_DESC Is Not Null) Or (i.PY_DATEDUE_DESC Is Not Null And d.PY_DATEDUE_DESC Is Null) Or (i.PY_DATEDUE_DESC Is Not Null And d.PY_DATEDUE_DESC Is Not Null And i.PY_DATEDUE_DESC <> d.PY_DATEDUE_DESC)) Then 'PY_DATEDUE_DESC = ' + Case When d.PY_DATEDUE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DATEDUE_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.METHOD_CODE Is Null And d.METHOD_CODE Is Not Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Not Null And i.METHOD_CODE <> d.METHOD_CODE)) Then 'METHOD_CODE = ' + Case When i.METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PY_PLAN_SEQ Is Null And d.PY_PLAN_SEQ Is Not Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Not Null And i.PY_PLAN_SEQ <> d.PY_PLAN_SEQ)) Then 'PY_PLAN_SEQ = ' + Case When i.PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_PLAN_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_TYPE Is Null And d.PY_DT_TYPE Is Not Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Not Null And i.PY_DT_TYPE <> d.PY_DT_TYPE)) Then 'PY_DT_TYPE = ' + Case When i.PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DT_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_CAL_TYPE Is Null And d.PY_DT_CAL_TYPE Is Not Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Not Null And i.PY_DT_CAL_TYPE <> d.PY_DT_CAL_TYPE)) Then 'PY_DT_CAL_TYPE = ' + Case When i.PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DT_CAL_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_FACT Is Null And d.PY_DT_FACT Is Not Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Not Null And i.PY_DT_FACT <> d.PY_DT_FACT)) Then 'PY_DT_FACT = ' + Case When i.PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DT_FACT) + '''' End + ', ' Else '' End +  Case When ((i.PY_PAYMT_DUE Is Null And d.PY_PAYMT_DUE Is Not Null) Or (i.PY_PAYMT_DUE Is Not Null And d.PY_PAYMT_DUE Is Null) Or (i.PY_PAYMT_DUE Is Not Null And d.PY_PAYMT_DUE Is Not Null And i.PY_PAYMT_DUE <> d.PY_PAYMT_DUE)) Then 'PY_PAYMT_DUE = ' + Case When i.PY_PAYMT_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_PAYMT_DUE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DATE_DUE Is Null And d.PY_DATE_DUE Is Not Null) Or (i.PY_DATE_DUE Is Not Null And d.PY_DATE_DUE Is Null) Or (i.PY_DATE_DUE Is Not Null And d.PY_DATE_DUE Is Not Null And i.PY_DATE_DUE <> d.PY_DATE_DUE)) Then 'PY_DATE_DUE = ' + Case When i.PY_DATE_DUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DATE_DUE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PY_DESC Is Null And d.PY_DESC Is Not Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Not Null And i.PY_DESC <> d.PY_DESC)) Then 'PY_DESC = ' + Case When i.PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DESC) + '''' End + ', ' Else '' End +  Case When ((i.BEFORE_DATE_DESC Is Null And d.BEFORE_DATE_DESC Is Not Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Not Null And i.BEFORE_DATE_DESC <> d.BEFORE_DATE_DESC)) Then 'BEFORE_DATE_DESC = ' + Case When i.BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BEFORE_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.AFTER_DATE_DESC Is Null And d.AFTER_DATE_DESC Is Not Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Not Null And i.AFTER_DATE_DESC <> d.AFTER_DATE_DESC)) Then 'AFTER_DATE_DESC = ' + Case When i.AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AFTER_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.PY_STATUS Is Null And d.PY_STATUS Is Not Null) Or (i.PY_STATUS Is Not Null And d.PY_STATUS Is Null) Or (i.PY_STATUS Is Not Null And d.PY_STATUS Is Not Null And i.PY_STATUS <> d.PY_STATUS)) Then 'PY_STATUS = ' + Case When i.PY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.INITIAL_PAYMENT Is Null And d.INITIAL_PAYMENT Is Not Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Not Null And i.INITIAL_PAYMENT <> d.INITIAL_PAYMENT)) Then 'INITIAL_PAYMENT = ' + Case When i.INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.INITIAL_PAYMENT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.PY_DATEDUE_DESC Is Null And d.PY_DATEDUE_DESC Is Not Null) Or (i.PY_DATEDUE_DESC Is Not Null And d.PY_DATEDUE_DESC Is Null) Or (i.PY_DATEDUE_DESC Is Not Null And d.PY_DATEDUE_DESC Is Not Null And i.PY_DATEDUE_DESC <> d.PY_DATEDUE_DESC)) Then 'PY_DATEDUE_DESC = ' + Case When i.PY_DATEDUE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DATEDUE_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('AM_NO = ''' + Convert(NVarChar(4000), i.AM_NO) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), i.METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), i.PY_PLAN_SEQ) + '''', 4000) KeyValue
						From Inserted i, Deleted d
						Where i.AM_NO = d.AM_NO And i.PROJECT_ID = d.PROJECT_ID And i.METHOD_CODE = d.METHOD_CODE And i.PY_PLAN_SEQ = d.PY_PLAN_SEQ
					) Temp 
					Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''  End
GO

ALTER TABLE [dbo].[AM_PAYMENT_PLAN] ENABLE TRIGGER [TG_AUD_AM_PAYMENT_PLAN_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PRINT_LOG_OnDeleted]
On [dbo].[AM_PRINT_LOG]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AM_PRINT_LOG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('AM_PRINT_LOG_SEQ = ' + Case When AM_PRINT_LOG_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_PRINT_LOG_SEQ) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_PRINT_LOG_SEQ = ''' + Convert(NVarChar(4000), AM_PRINT_LOG_SEQ) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AM_PRINT_LOG] ENABLE TRIGGER [TG_AUD_AM_PRINT_LOG_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PRINT_LOG_OnInserted]
On [dbo].[AM_PRINT_LOG]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AM_PRINT_LOG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('AM_PRINT_LOG_SEQ = ' + Case When AM_PRINT_LOG_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_PRINT_LOG_SEQ) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('AM_PRINT_LOG_SEQ = ''' + Convert(NVarChar(4000), AM_PRINT_LOG_SEQ) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AM_PRINT_LOG] ENABLE TRIGGER [TG_AUD_AM_PRINT_LOG_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AM_PRINT_LOG_OnUpdated]
On [dbo].[AM_PRINT_LOG]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PRINT_LOG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.AM_PRINT_LOG_SEQ Is Null And d.AM_PRINT_LOG_SEQ Is Not Null) Or (i.AM_PRINT_LOG_SEQ Is Not Null And d.AM_PRINT_LOG_SEQ Is Null) Or (i.AM_PRINT_LOG_SEQ Is Not Null And d.AM_PRINT_LOG_SEQ Is Not Null And i.AM_PRINT_LOG_SEQ <> d.AM_PRINT_LOG_SEQ)) Then 'AM_PRINT_LOG_SEQ = ' + Case When d.AM_PRINT_LOG_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_PRINT_LOG_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When d.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.AM_PRINT_LOG_SEQ Is Null And d.AM_PRINT_LOG_SEQ Is Not Null) Or (i.AM_PRINT_LOG_SEQ Is Not Null And d.AM_PRINT_LOG_SEQ Is Null) Or (i.AM_PRINT_LOG_SEQ Is Not Null And d.AM_PRINT_LOG_SEQ Is Not Null And i.AM_PRINT_LOG_SEQ <> d.AM_PRINT_LOG_SEQ)) Then 'AM_PRINT_LOG_SEQ = ' + Case When i.AM_PRINT_LOG_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_PRINT_LOG_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.AM_NO Is Null And d.AM_NO Is Not Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Null) Or (i.AM_NO Is Not Null And d.AM_NO Is Not Null And i.AM_NO <> d.AM_NO)) Then 'AM_NO = ' + Case When i.AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AM_NO) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End)  ChangedValue, Left('AM_PRINT_LOG_SEQ = ''' + Convert(NVarChar(4000), i.AM_PRINT_LOG_SEQ) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.AM_PRINT_LOG_SEQ = d.AM_PRINT_LOG_SEQ
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AM_PRINT_LOG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('AM_PRINT_LOG_SEQ = ' + Case When AM_PRINT_LOG_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_PRINT_LOG_SEQ) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('AM_PRINT_LOG_SEQ = ''' + Convert(NVarChar(4000), AM_PRINT_LOG_SEQ) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.AM_PRINT_LOG_SEQ = d.AM_PRINT_LOG_SEQ
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AM_PRINT_LOG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('AM_PRINT_LOG_SEQ = ' + Case When AM_PRINT_LOG_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_PRINT_LOG_SEQ) + '''' End + ', AM_NO = ' + Case When AM_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AM_NO) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('AM_PRINT_LOG_SEQ = ''' + Convert(NVarChar(4000), AM_PRINT_LOG_SEQ) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.AM_PRINT_LOG_SEQ = d.AM_PRINT_LOG_SEQ)  End
GO

ALTER TABLE [dbo].[AM_PRINT_LOG] ENABLE TRIGGER [TG_AUD_AM_PRINT_LOG_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_CODE_OnDeleted]
On [dbo].[ANALYSIS_CODE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', ANA_DESC = ' + Case When ANA_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[ANALYSIS_CODE] ENABLE TRIGGER [TG_AUD_ANALYSIS_CODE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_CODE_OnInserted]
On [dbo].[ANALYSIS_CODE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_GROUP_ID) + '''' End + ', ANA_DESC = ' + Case When ANA_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[ANALYSIS_CODE] ENABLE TRIGGER [TG_AUD_ANALYSIS_CODE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_CODE_OnUpdated]
On [dbo].[ANALYSIS_CODE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.ANA_ID Is Null And d.ANA_ID Is Not Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Not Null And i.ANA_ID <> d.ANA_ID)) Then 'ANA_ID = ' + Case When d.ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_GROUP_ID Is Null And d.ANA_GROUP_ID Is Not Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Not Null And i.ANA_GROUP_ID <> d.ANA_GROUP_ID)) Then 'ANA_GROUP_ID = ' + Case When d.ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_GROUP_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_DESC Is Null And d.ANA_DESC Is Not Null) Or (i.ANA_DESC Is Not Null And d.ANA_DESC Is Null) Or (i.ANA_DESC Is Not Null And d.ANA_DESC Is Not Null And i.ANA_DESC <> d.ANA_DESC)) Then 'ANA_DESC = ' + Case When d.ANA_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.ANA_ID Is Null And d.ANA_ID Is Not Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Not Null And i.ANA_ID <> d.ANA_ID)) Then 'ANA_ID = ' + Case When i.ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_GROUP_ID Is Null And d.ANA_GROUP_ID Is Not Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Not Null And i.ANA_GROUP_ID <> d.ANA_GROUP_ID)) Then 'ANA_GROUP_ID = ' + Case When i.ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_GROUP_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_DESC Is Null And d.ANA_DESC Is Not Null) Or (i.ANA_DESC Is Not Null And d.ANA_DESC Is Null) Or (i.ANA_DESC Is Not Null And d.ANA_DESC Is Not Null And i.ANA_DESC <> d.ANA_DESC)) Then 'ANA_DESC = ' + Case When i.ANA_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('ANA_ID = ''' + Convert(NVarChar(4000), i.ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), i.ANA_GROUP_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.ANA_ID = d.ANA_ID And i.ANA_GROUP_ID = d.ANA_GROUP_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', ANA_DESC = ' + Case When ANA_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.ANA_ID = d.ANA_ID And i.ANA_GROUP_ID = d.ANA_GROUP_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', ANA_DESC = ' + Case When ANA_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.ANA_ID = d.ANA_ID And i.ANA_GROUP_ID = d.ANA_GROUP_ID)  End
GO

ALTER TABLE [dbo].[ANALYSIS_CODE] ENABLE TRIGGER [TG_AUD_ANALYSIS_CODE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_DISTRICT_OnDeleted]
On [dbo].[ANALYSIS_DISTRICT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('ANALYSIS_DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', ANA_DIST_ID = ' + Case When ANA_DIST_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DIST_ID) + '''' End + ', ANA_DIST_DESC = ' + Case When ANA_DIST_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DIST_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', ANA_DIST_ID = ''' + Convert(NVarChar(4000), ANA_DIST_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[ANALYSIS_DISTRICT] ENABLE TRIGGER [TG_AUD_ANALYSIS_DISTRICT_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_DISTRICT_OnInserted]
On [dbo].[ANALYSIS_DISTRICT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('ANALYSIS_DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', ANA_DIST_ID = ' + Case When ANA_DIST_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_DIST_ID) + '''' End + ', ANA_DIST_DESC = ' + Case When ANA_DIST_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_DIST_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', ANA_DIST_ID = ''' + Convert(NVarChar(4000), ANA_DIST_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[ANALYSIS_DISTRICT] ENABLE TRIGGER [TG_AUD_ANALYSIS_DISTRICT_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_DISTRICT_OnUpdated]
On [dbo].[ANALYSIS_DISTRICT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('ANALYSIS_DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_DIST_ID Is Null And d.ANA_DIST_ID Is Not Null) Or (i.ANA_DIST_ID Is Not Null And d.ANA_DIST_ID Is Null) Or (i.ANA_DIST_ID Is Not Null And d.ANA_DIST_ID Is Not Null And i.ANA_DIST_ID <> d.ANA_DIST_ID)) Then 'ANA_DIST_ID = ' + Case When d.ANA_DIST_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_DIST_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_DIST_DESC Is Null And d.ANA_DIST_DESC Is Not Null) Or (i.ANA_DIST_DESC Is Not Null And d.ANA_DIST_DESC Is Null) Or (i.ANA_DIST_DESC Is Not Null And d.ANA_DIST_DESC Is Not Null And i.ANA_DIST_DESC <> d.ANA_DIST_DESC)) Then 'ANA_DIST_DESC = ' + Case When d.ANA_DIST_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_DIST_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_DIST_ID Is Null And d.ANA_DIST_ID Is Not Null) Or (i.ANA_DIST_ID Is Not Null And d.ANA_DIST_ID Is Null) Or (i.ANA_DIST_ID Is Not Null And d.ANA_DIST_ID Is Not Null And i.ANA_DIST_ID <> d.ANA_DIST_ID)) Then 'ANA_DIST_ID = ' + Case When i.ANA_DIST_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_DIST_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_DIST_DESC Is Null And d.ANA_DIST_DESC Is Not Null) Or (i.ANA_DIST_DESC Is Not Null And d.ANA_DIST_DESC Is Null) Or (i.ANA_DIST_DESC Is Not Null And d.ANA_DIST_DESC Is Not Null And i.ANA_DIST_DESC <> d.ANA_DIST_DESC)) Then 'ANA_DIST_DESC = ' + Case When i.ANA_DIST_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_DIST_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', ANA_DIST_ID = ''' + Convert(NVarChar(4000), i.ANA_DIST_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.ANA_DIST_ID = d.ANA_DIST_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('ANALYSIS_DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', ANA_DIST_ID = ' + Case When ANA_DIST_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DIST_ID) + '''' End + ', ANA_DIST_DESC = ' + Case When ANA_DIST_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DIST_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', ANA_DIST_ID = ''' + Convert(NVarChar(4000), ANA_DIST_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.ANA_DIST_ID = d.ANA_DIST_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('ANALYSIS_DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', ANA_DIST_ID = ' + Case When ANA_DIST_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DIST_ID) + '''' End + ', ANA_DIST_DESC = ' + Case When ANA_DIST_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_DIST_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', ANA_DIST_ID = ''' + Convert(NVarChar(4000), ANA_DIST_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.ANA_DIST_ID = d.ANA_DIST_ID)  End
GO

ALTER TABLE [dbo].[ANALYSIS_DISTRICT] ENABLE TRIGGER [TG_AUD_ANALYSIS_DISTRICT_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_ANALYSIS_GROUP_OnDeleted]
On [dbo].[ANALYSIS_GROUP]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('ANALYSIS_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', ANA_GROUP_DESC = ' + Case When ANA_GROUP_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[ANALYSIS_GROUP] ENABLE TRIGGER [TG_AUD_ANALYSIS_GROUP_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_GROUP_OnInserted]
On [dbo].[ANALYSIS_GROUP]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('ANALYSIS_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_GROUP_ID) + '''' End + ', ANA_GROUP_DESC = ' + Case When ANA_GROUP_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_GROUP_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[ANALYSIS_GROUP] ENABLE TRIGGER [TG_AUD_ANALYSIS_GROUP_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_ANALYSIS_GROUP_OnUpdated]
On [dbo].[ANALYSIS_GROUP]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('ANALYSIS_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.ANA_GROUP_ID Is Null And d.ANA_GROUP_ID Is Not Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Not Null And i.ANA_GROUP_ID <> d.ANA_GROUP_ID)) Then 'ANA_GROUP_ID = ' + Case When d.ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_GROUP_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_GROUP_DESC Is Null And d.ANA_GROUP_DESC Is Not Null) Or (i.ANA_GROUP_DESC Is Not Null And d.ANA_GROUP_DESC Is Null) Or (i.ANA_GROUP_DESC Is Not Null And d.ANA_GROUP_DESC Is Not Null And i.ANA_GROUP_DESC <> d.ANA_GROUP_DESC)) Then 'ANA_GROUP_DESC = ' + Case When d.ANA_GROUP_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_GROUP_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.ANA_GROUP_ID Is Null And d.ANA_GROUP_ID Is Not Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Not Null And i.ANA_GROUP_ID <> d.ANA_GROUP_ID)) Then 'ANA_GROUP_ID = ' + Case When i.ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_GROUP_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_GROUP_DESC Is Null And d.ANA_GROUP_DESC Is Not Null) Or (i.ANA_GROUP_DESC Is Not Null And d.ANA_GROUP_DESC Is Null) Or (i.ANA_GROUP_DESC Is Not Null And d.ANA_GROUP_DESC Is Not Null And i.ANA_GROUP_DESC <> d.ANA_GROUP_DESC)) Then 'ANA_GROUP_DESC = ' + Case When i.ANA_GROUP_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_GROUP_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('ANA_GROUP_ID = ''' + Convert(NVarChar(4000), i.ANA_GROUP_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.ANA_GROUP_ID = d.ANA_GROUP_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('ANALYSIS_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', ANA_GROUP_DESC = ' + Case When ANA_GROUP_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.ANA_GROUP_ID = d.ANA_GROUP_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('ANALYSIS_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', ANA_GROUP_DESC = ' + Case When ANA_GROUP_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.ANA_GROUP_ID = d.ANA_GROUP_ID)  End
GO

ALTER TABLE [dbo].[ANALYSIS_GROUP] ENABLE TRIGGER [TG_AUD_ANALYSIS_GROUP_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_AUDIT_FUNCTION_OnDeleted]
On [dbo].[AUDIT_FUNCTION]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('AUDIT_FUNCTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[AUDIT_FUNCTION] ENABLE TRIGGER [TG_AUD_AUDIT_FUNCTION_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_AUDIT_FUNCTION_OnInserted]
On [dbo].[AUDIT_FUNCTION]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('AUDIT_FUNCTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FN_ID) + '''' End + '', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[AUDIT_FUNCTION] ENABLE TRIGGER [TG_AUD_AUDIT_FUNCTION_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_AUDIT_FUNCTION_OnUpdated]
On [dbo].[AUDIT_FUNCTION]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AUDIT_FUNCTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.FN_ID Is Null And d.FN_ID Is Not Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Not Null And i.FN_ID <> d.FN_ID)) Then 'FN_ID = ' + Case When d.FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FN_ID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.FN_ID Is Null And d.FN_ID Is Not Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Not Null And i.FN_ID <> d.FN_ID)) Then 'FN_ID = ' + Case When i.FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FN_ID) + '''' End + ', ' Else '' End)  ChangedValue, Left('FN_ID = ''' + Convert(NVarChar(4000), i.FN_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.FN_ID = d.FN_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('AUDIT_FUNCTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.FN_ID = d.FN_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('AUDIT_FUNCTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + '', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.FN_ID = d.FN_ID)  End
GO

ALTER TABLE [dbo].[AUDIT_FUNCTION] ENABLE TRIGGER [TG_AUD_AUDIT_FUNCTION_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_BATCH_OnDeleted]
On [dbo].[BALLOT_BATCH]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('BALLOT_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', BALLOT_BATCH_NAME = ' + Case When BALLOT_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_NAME) + '''' End + ', BALLOT_BATCH_STATUS = ' + Case When BALLOT_BATCH_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_STATUS) + '''' End + ', ATTN_STATUS = ' + Case When ATTN_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ATTN_STATUS) + '''' End + ', BALLOT_BATCH_COND = ' + Case When BALLOT_BATCH_COND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_COND) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_BATCH_ID = ''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[BALLOT_BATCH] ENABLE TRIGGER [TG_AUD_BALLOT_BATCH_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_BATCH_OnInserted]
On [dbo].[BALLOT_BATCH]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('BALLOT_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_BATCH_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_POOL_ID) + '''' End + ', BALLOT_BATCH_NAME = ' + Case When BALLOT_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_BATCH_NAME) + '''' End + ', BALLOT_BATCH_STATUS = ' + Case When BALLOT_BATCH_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_BATCH_STATUS) + '''' End + ', ATTN_STATUS = ' + Case When ATTN_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ATTN_STATUS) + '''' End + ', BALLOT_BATCH_COND = ' + Case When BALLOT_BATCH_COND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_BATCH_COND) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_BATCH_ID = ''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[BALLOT_BATCH] ENABLE TRIGGER [TG_AUD_BALLOT_BATCH_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_BATCH_OnUpdated]
On [dbo].[BALLOT_BATCH]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.BALLOT_BATCH_ID Is Null And d.BALLOT_BATCH_ID Is Not Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Not Null And i.BALLOT_BATCH_ID <> d.BALLOT_BATCH_ID)) Then 'BALLOT_BATCH_ID = ' + Case When d.BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_BATCH_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_ID Is Null And d.BALLOT_POOL_ID Is Not Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Not Null And i.BALLOT_POOL_ID <> d.BALLOT_POOL_ID)) Then 'BALLOT_POOL_ID = ' + Case When d.BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_NAME Is Null And d.BALLOT_BATCH_NAME Is Not Null) Or (i.BALLOT_BATCH_NAME Is Not Null And d.BALLOT_BATCH_NAME Is Null) Or (i.BALLOT_BATCH_NAME Is Not Null And d.BALLOT_BATCH_NAME Is Not Null And i.BALLOT_BATCH_NAME <> d.BALLOT_BATCH_NAME)) Then 'BALLOT_BATCH_NAME = ' + Case When d.BALLOT_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_BATCH_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_STATUS Is Null And d.BALLOT_BATCH_STATUS Is Not Null) Or (i.BALLOT_BATCH_STATUS Is Not Null And d.BALLOT_BATCH_STATUS Is Null) Or (i.BALLOT_BATCH_STATUS Is Not Null And d.BALLOT_BATCH_STATUS Is Not Null And i.BALLOT_BATCH_STATUS <> d.BALLOT_BATCH_STATUS)) Then 'BALLOT_BATCH_STATUS = ' + Case When d.BALLOT_BATCH_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_BATCH_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.ATTN_STATUS Is Null And d.ATTN_STATUS Is Not Null) Or (i.ATTN_STATUS Is Not Null And d.ATTN_STATUS Is Null) Or (i.ATTN_STATUS Is Not Null And d.ATTN_STATUS Is Not Null And i.ATTN_STATUS <> d.ATTN_STATUS)) Then 'ATTN_STATUS = ' + Case When d.ATTN_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ATTN_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_COND Is Null And d.BALLOT_BATCH_COND Is Not Null) Or (i.BALLOT_BATCH_COND Is Not Null And d.BALLOT_BATCH_COND Is Null) Or (i.BALLOT_BATCH_COND Is Not Null And d.BALLOT_BATCH_COND Is Not Null And i.BALLOT_BATCH_COND <> d.BALLOT_BATCH_COND)) Then 'BALLOT_BATCH_COND = ' + Case When d.BALLOT_BATCH_COND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_BATCH_COND) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.BALLOT_BATCH_ID Is Null And d.BALLOT_BATCH_ID Is Not Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Not Null And i.BALLOT_BATCH_ID <> d.BALLOT_BATCH_ID)) Then 'BALLOT_BATCH_ID = ' + Case When i.BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_BATCH_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_ID Is Null And d.BALLOT_POOL_ID Is Not Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Not Null And i.BALLOT_POOL_ID <> d.BALLOT_POOL_ID)) Then 'BALLOT_POOL_ID = ' + Case When i.BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_NAME Is Null And d.BALLOT_BATCH_NAME Is Not Null) Or (i.BALLOT_BATCH_NAME Is Not Null And d.BALLOT_BATCH_NAME Is Null) Or (i.BALLOT_BATCH_NAME Is Not Null And d.BALLOT_BATCH_NAME Is Not Null And i.BALLOT_BATCH_NAME <> d.BALLOT_BATCH_NAME)) Then 'BALLOT_BATCH_NAME = ' + Case When i.BALLOT_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_BATCH_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_STATUS Is Null And d.BALLOT_BATCH_STATUS Is Not Null) Or (i.BALLOT_BATCH_STATUS Is Not Null And d.BALLOT_BATCH_STATUS Is Null) Or (i.BALLOT_BATCH_STATUS Is Not Null And d.BALLOT_BATCH_STATUS Is Not Null And i.BALLOT_BATCH_STATUS <> d.BALLOT_BATCH_STATUS)) Then 'BALLOT_BATCH_STATUS = ' + Case When i.BALLOT_BATCH_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_BATCH_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.ATTN_STATUS Is Null And d.ATTN_STATUS Is Not Null) Or (i.ATTN_STATUS Is Not Null And d.ATTN_STATUS Is Null) Or (i.ATTN_STATUS Is Not Null And d.ATTN_STATUS Is Not Null And i.ATTN_STATUS <> d.ATTN_STATUS)) Then 'ATTN_STATUS = ' + Case When i.ATTN_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ATTN_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_COND Is Null And d.BALLOT_BATCH_COND Is Not Null) Or (i.BALLOT_BATCH_COND Is Not Null And d.BALLOT_BATCH_COND Is Null) Or (i.BALLOT_BATCH_COND Is Not Null And d.BALLOT_BATCH_COND Is Not Null And i.BALLOT_BATCH_COND <> d.BALLOT_BATCH_COND)) Then 'BALLOT_BATCH_COND = ' + Case When i.BALLOT_BATCH_COND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_BATCH_COND) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('BALLOT_BATCH_ID = ''' + Convert(NVarChar(4000), i.BALLOT_BATCH_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.BALLOT_BATCH_ID = d.BALLOT_BATCH_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('BALLOT_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', BALLOT_BATCH_NAME = ' + Case When BALLOT_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_NAME) + '''' End + ', BALLOT_BATCH_STATUS = ' + Case When BALLOT_BATCH_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_STATUS) + '''' End + ', ATTN_STATUS = ' + Case When ATTN_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ATTN_STATUS) + '''' End + ', BALLOT_BATCH_COND = ' + Case When BALLOT_BATCH_COND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_COND) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_BATCH_ID = ''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.BALLOT_BATCH_ID = d.BALLOT_BATCH_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', BALLOT_BATCH_NAME = ' + Case When BALLOT_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_NAME) + '''' End + ', BALLOT_BATCH_STATUS = ' + Case When BALLOT_BATCH_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_STATUS) + '''' End + ', ATTN_STATUS = ' + Case When ATTN_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ATTN_STATUS) + '''' End + ', BALLOT_BATCH_COND = ' + Case When BALLOT_BATCH_COND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_COND) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_BATCH_ID = ''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.BALLOT_BATCH_ID = d.BALLOT_BATCH_ID)  End
GO

ALTER TABLE [dbo].[BALLOT_BATCH] ENABLE TRIGGER [TG_AUD_BALLOT_BATCH_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_POOL_OnDeleted]
On [dbo].[BALLOT_POOL]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('BALLOT_POOL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_POOL_NO = ' + Case When BALLOT_POOL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_NO) + '''' End + ', BALLOT_POOL_STATUS = ' + Case When BALLOT_POOL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_STATUS) + '''' End + ', MAX_APP = ' + Case When MAX_APP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MAX_APP) + '''' End + ', DEPOSIT_CURR_ID = ' + Case When DEPOSIT_CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEPOSIT_CURR_ID) + '''' End + ', DEPOSIT_AMT = ' + Case When DEPOSIT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEPOSIT_AMT) + '''' End + ', START_TICKET_NO = ' + Case When START_TICKET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), START_TICKET_NO) + '''' End + ', CF_BALLOT_POOL_ID = ' + Case When CF_BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CF_BALLOT_POOL_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_POOL_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[BALLOT_POOL] ENABLE TRIGGER [TG_AUD_BALLOT_POOL_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_BALLOT_POOL_OnInserted]
On [dbo].[BALLOT_POOL]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('BALLOT_POOL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_POOL_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', BALLOT_POOL_NO = ' + Case When BALLOT_POOL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_POOL_NO) + '''' End + ', BALLOT_POOL_STATUS = ' + Case When BALLOT_POOL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_POOL_STATUS) + '''' End + ', MAX_APP = ' + Case When MAX_APP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MAX_APP) + '''' End + ', DEPOSIT_CURR_ID = ' + Case When DEPOSIT_CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DEPOSIT_CURR_ID) + '''' End + ', DEPOSIT_AMT = ' + Case When DEPOSIT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DEPOSIT_AMT) + '''' End + ', START_TICKET_NO = ' + Case When START_TICKET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),START_TICKET_NO) + '''' End + ', CF_BALLOT_POOL_ID = ' + Case When CF_BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CF_BALLOT_POOL_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_POOL_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[BALLOT_POOL] ENABLE TRIGGER [TG_AUD_BALLOT_POOL_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_POOL_OnUpdated]
On [dbo].[BALLOT_POOL]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_POOL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.BALLOT_POOL_ID Is Null And d.BALLOT_POOL_ID Is Not Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Not Null And i.BALLOT_POOL_ID <> d.BALLOT_POOL_ID)) Then 'BALLOT_POOL_ID = ' + Case When d.BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_NO Is Null And d.BALLOT_POOL_NO Is Not Null) Or (i.BALLOT_POOL_NO Is Not Null And d.BALLOT_POOL_NO Is Null) Or (i.BALLOT_POOL_NO Is Not Null And d.BALLOT_POOL_NO Is Not Null And i.BALLOT_POOL_NO <> d.BALLOT_POOL_NO)) Then 'BALLOT_POOL_NO = ' + Case When d.BALLOT_POOL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_POOL_NO) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_STATUS Is Null And d.BALLOT_POOL_STATUS Is Not Null) Or (i.BALLOT_POOL_STATUS Is Not Null And d.BALLOT_POOL_STATUS Is Null) Or (i.BALLOT_POOL_STATUS Is Not Null And d.BALLOT_POOL_STATUS Is Not Null And i.BALLOT_POOL_STATUS <> d.BALLOT_POOL_STATUS)) Then 'BALLOT_POOL_STATUS = ' + Case When d.BALLOT_POOL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_POOL_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.MAX_APP Is Null And d.MAX_APP Is Not Null) Or (i.MAX_APP Is Not Null And d.MAX_APP Is Null) Or (i.MAX_APP Is Not Null And d.MAX_APP Is Not Null And i.MAX_APP <> d.MAX_APP)) Then 'MAX_APP = ' + Case When d.MAX_APP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MAX_APP) + '''' End + ', ' Else '' End +  Case When ((i.DEPOSIT_CURR_ID Is Null And d.DEPOSIT_CURR_ID Is Not Null) Or (i.DEPOSIT_CURR_ID Is Not Null And d.DEPOSIT_CURR_ID Is Null) Or (i.DEPOSIT_CURR_ID Is Not Null And d.DEPOSIT_CURR_ID Is Not Null And i.DEPOSIT_CURR_ID <> d.DEPOSIT_CURR_ID)) Then 'DEPOSIT_CURR_ID = ' + Case When d.DEPOSIT_CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DEPOSIT_CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.DEPOSIT_AMT Is Null And d.DEPOSIT_AMT Is Not Null) Or (i.DEPOSIT_AMT Is Not Null And d.DEPOSIT_AMT Is Null) Or (i.DEPOSIT_AMT Is Not Null And d.DEPOSIT_AMT Is Not Null And i.DEPOSIT_AMT <> d.DEPOSIT_AMT)) Then 'DEPOSIT_AMT = ' + Case When d.DEPOSIT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DEPOSIT_AMT) + '''' End + ', ' Else '' End +  Case When ((i.START_TICKET_NO Is Null And d.START_TICKET_NO Is Not Null) Or (i.START_TICKET_NO Is Not Null And d.START_TICKET_NO Is Null) Or (i.START_TICKET_NO Is Not Null And d.START_TICKET_NO Is Not Null And i.START_TICKET_NO <> d.START_TICKET_NO)) Then 'START_TICKET_NO = ' + Case When d.START_TICKET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.START_TICKET_NO) + '''' End + ', ' Else '' End +  Case When ((i.CF_BALLOT_POOL_ID Is Null And d.CF_BALLOT_POOL_ID Is Not Null) Or (i.CF_BALLOT_POOL_ID Is Not Null And d.CF_BALLOT_POOL_ID Is Null) Or (i.CF_BALLOT_POOL_ID Is Not Null And d.CF_BALLOT_POOL_ID Is Not Null And i.CF_BALLOT_POOL_ID <> d.CF_BALLOT_POOL_ID)) Then 'CF_BALLOT_POOL_ID = ' + Case When d.CF_BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CF_BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.BALLOT_POOL_ID Is Null And d.BALLOT_POOL_ID Is Not Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Not Null And i.BALLOT_POOL_ID <> d.BALLOT_POOL_ID)) Then 'BALLOT_POOL_ID = ' + Case When i.BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_NO Is Null And d.BALLOT_POOL_NO Is Not Null) Or (i.BALLOT_POOL_NO Is Not Null And d.BALLOT_POOL_NO Is Null) Or (i.BALLOT_POOL_NO Is Not Null And d.BALLOT_POOL_NO Is Not Null And i.BALLOT_POOL_NO <> d.BALLOT_POOL_NO)) Then 'BALLOT_POOL_NO = ' + Case When i.BALLOT_POOL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_POOL_NO) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_STATUS Is Null And d.BALLOT_POOL_STATUS Is Not Null) Or (i.BALLOT_POOL_STATUS Is Not Null And d.BALLOT_POOL_STATUS Is Null) Or (i.BALLOT_POOL_STATUS Is Not Null And d.BALLOT_POOL_STATUS Is Not Null And i.BALLOT_POOL_STATUS <> d.BALLOT_POOL_STATUS)) Then 'BALLOT_POOL_STATUS = ' + Case When i.BALLOT_POOL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_POOL_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.MAX_APP Is Null And d.MAX_APP Is Not Null) Or (i.MAX_APP Is Not Null And d.MAX_APP Is Null) Or (i.MAX_APP Is Not Null And d.MAX_APP Is Not Null And i.MAX_APP <> d.MAX_APP)) Then 'MAX_APP = ' + Case When i.MAX_APP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MAX_APP) + '''' End + ', ' Else '' End +  Case When ((i.DEPOSIT_CURR_ID Is Null And d.DEPOSIT_CURR_ID Is Not Null) Or (i.DEPOSIT_CURR_ID Is Not Null And d.DEPOSIT_CURR_ID Is Null) Or (i.DEPOSIT_CURR_ID Is Not Null And d.DEPOSIT_CURR_ID Is Not Null And i.DEPOSIT_CURR_ID <> d.DEPOSIT_CURR_ID)) Then 'DEPOSIT_CURR_ID = ' + Case When i.DEPOSIT_CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DEPOSIT_CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.DEPOSIT_AMT Is Null And d.DEPOSIT_AMT Is Not Null) Or (i.DEPOSIT_AMT Is Not Null And d.DEPOSIT_AMT Is Null) Or (i.DEPOSIT_AMT Is Not Null And d.DEPOSIT_AMT Is Not Null And i.DEPOSIT_AMT <> d.DEPOSIT_AMT)) Then 'DEPOSIT_AMT = ' + Case When i.DEPOSIT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DEPOSIT_AMT) + '''' End + ', ' Else '' End +  Case When ((i.START_TICKET_NO Is Null And d.START_TICKET_NO Is Not Null) Or (i.START_TICKET_NO Is Not Null And d.START_TICKET_NO Is Null) Or (i.START_TICKET_NO Is Not Null And d.START_TICKET_NO Is Not Null And i.START_TICKET_NO <> d.START_TICKET_NO)) Then 'START_TICKET_NO = ' + Case When i.START_TICKET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.START_TICKET_NO) + '''' End + ', ' Else '' End +  Case When ((i.CF_BALLOT_POOL_ID Is Null And d.CF_BALLOT_POOL_ID Is Not Null) Or (i.CF_BALLOT_POOL_ID Is Not Null And d.CF_BALLOT_POOL_ID Is Null) Or (i.CF_BALLOT_POOL_ID Is Not Null And d.CF_BALLOT_POOL_ID Is Not Null And i.CF_BALLOT_POOL_ID <> d.CF_BALLOT_POOL_ID)) Then 'CF_BALLOT_POOL_ID = ' + Case When i.CF_BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CF_BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('BALLOT_POOL_ID = ''' + Convert(NVarChar(4000), i.BALLOT_POOL_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.BALLOT_POOL_ID = d.BALLOT_POOL_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('BALLOT_POOL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_POOL_NO = ' + Case When BALLOT_POOL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_NO) + '''' End + ', BALLOT_POOL_STATUS = ' + Case When BALLOT_POOL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_STATUS) + '''' End + ', MAX_APP = ' + Case When MAX_APP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MAX_APP) + '''' End + ', DEPOSIT_CURR_ID = ' + Case When DEPOSIT_CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEPOSIT_CURR_ID) + '''' End + ', DEPOSIT_AMT = ' + Case When DEPOSIT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEPOSIT_AMT) + '''' End + ', START_TICKET_NO = ' + Case When START_TICKET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), START_TICKET_NO) + '''' End + ', CF_BALLOT_POOL_ID = ' + Case When CF_BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CF_BALLOT_POOL_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_POOL_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.BALLOT_POOL_ID = d.BALLOT_POOL_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_POOL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_POOL_NO = ' + Case When BALLOT_POOL_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_NO) + '''' End + ', BALLOT_POOL_STATUS = ' + Case When BALLOT_POOL_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_STATUS) + '''' End + ', MAX_APP = ' + Case When MAX_APP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MAX_APP) + '''' End + ', DEPOSIT_CURR_ID = ' + Case When DEPOSIT_CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEPOSIT_CURR_ID) + '''' End + ', DEPOSIT_AMT = ' + Case When DEPOSIT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEPOSIT_AMT) + '''' End + ', START_TICKET_NO = ' + Case When START_TICKET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), START_TICKET_NO) + '''' End + ', CF_BALLOT_POOL_ID = ' + Case When CF_BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CF_BALLOT_POOL_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_POOL_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.BALLOT_POOL_ID = d.BALLOT_POOL_ID)  End
GO

ALTER TABLE [dbo].[BALLOT_POOL] ENABLE TRIGGER [TG_AUD_BALLOT_POOL_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_POOL_REG_OnDeleted]
On [dbo].[BALLOT_POOL_REG]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('BALLOT_POOL_REG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('BALLOT_POOL_REG_ID = ' + Case When BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''' End + ', CF_BALLOT_POOL_REG_ID = ' + Case When CF_BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CF_BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_REG_STATUS = ' + Case When BALLOT_REG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_STATUS) + '''' End + ', BALLOT_RESULT_SEQ = ' + Case When BALLOT_RESULT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_RESULT_SEQ) + '''' End + ', ATTN_DT = ' + Case When ATTN_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ATTN_DT, 121) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_POOL_REG_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_REG_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[BALLOT_POOL_REG] ENABLE TRIGGER [TG_AUD_BALLOT_POOL_REG_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_POOL_REG_OnInserted]
On [dbo].[BALLOT_POOL_REG]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('BALLOT_POOL_REG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('BALLOT_POOL_REG_ID = ' + Case When BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_POOL_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_REG_ID) + '''' End + ', BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_BATCH_ID) + '''' End + ', CF_BALLOT_POOL_REG_ID = ' + Case When CF_BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CF_BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_REG_STATUS = ' + Case When BALLOT_REG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_REG_STATUS) + '''' End + ', BALLOT_RESULT_SEQ = ' + Case When BALLOT_RESULT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_RESULT_SEQ) + '''' End + ', ATTN_DT = ' + Case When ATTN_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ATTN_DT,121) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_POOL_REG_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_REG_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[BALLOT_POOL_REG] ENABLE TRIGGER [TG_AUD_BALLOT_POOL_REG_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_BALLOT_POOL_REG_OnUpdated]
On [dbo].[BALLOT_POOL_REG]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_POOL_REG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.BALLOT_POOL_REG_ID Is Null And d.BALLOT_POOL_REG_ID Is Not Null) Or (i.BALLOT_POOL_REG_ID Is Not Null And d.BALLOT_POOL_REG_ID Is Null) Or (i.BALLOT_POOL_REG_ID Is Not Null And d.BALLOT_POOL_REG_ID Is Not Null And i.BALLOT_POOL_REG_ID <> d.BALLOT_POOL_REG_ID)) Then 'BALLOT_POOL_REG_ID = ' + Case When d.BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_POOL_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_ID Is Null And d.BALLOT_POOL_ID Is Not Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Not Null And i.BALLOT_POOL_ID <> d.BALLOT_POOL_ID)) Then 'BALLOT_POOL_ID = ' + Case When d.BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_ID Is Null And d.BALLOT_REG_ID Is Not Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Not Null And i.BALLOT_REG_ID <> d.BALLOT_REG_ID)) Then 'BALLOT_REG_ID = ' + Case When d.BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_ID Is Null And d.BALLOT_BATCH_ID Is Not Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Not Null And i.BALLOT_BATCH_ID <> d.BALLOT_BATCH_ID)) Then 'BALLOT_BATCH_ID = ' + Case When d.BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_BATCH_ID) + '''' End + ', ' Else '' End +  Case When ((i.CF_BALLOT_POOL_REG_ID Is Null And d.CF_BALLOT_POOL_REG_ID Is Not Null) Or (i.CF_BALLOT_POOL_REG_ID Is Not Null And d.CF_BALLOT_POOL_REG_ID Is Null) Or (i.CF_BALLOT_POOL_REG_ID Is Not Null And d.CF_BALLOT_POOL_REG_ID Is Not Null And i.CF_BALLOT_POOL_REG_ID <> d.CF_BALLOT_POOL_REG_ID)) Then 'CF_BALLOT_POOL_REG_ID = ' + Case When d.CF_BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CF_BALLOT_POOL_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_STATUS Is Null And d.BALLOT_REG_STATUS Is Not Null) Or (i.BALLOT_REG_STATUS Is Not Null And d.BALLOT_REG_STATUS Is Null) Or (i.BALLOT_REG_STATUS Is Not Null And d.BALLOT_REG_STATUS Is Not Null And i.BALLOT_REG_STATUS <> d.BALLOT_REG_STATUS)) Then 'BALLOT_REG_STATUS = ' + Case When d.BALLOT_REG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_REG_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_RESULT_SEQ Is Null And d.BALLOT_RESULT_SEQ Is Not Null) Or (i.BALLOT_RESULT_SEQ Is Not Null And d.BALLOT_RESULT_SEQ Is Null) Or (i.BALLOT_RESULT_SEQ Is Not Null And d.BALLOT_RESULT_SEQ Is Not Null And i.BALLOT_RESULT_SEQ <> d.BALLOT_RESULT_SEQ)) Then 'BALLOT_RESULT_SEQ = ' + Case When d.BALLOT_RESULT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_RESULT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.ATTN_DT Is Null And d.ATTN_DT Is Not Null) Or (i.ATTN_DT Is Not Null And d.ATTN_DT Is Null) Or (i.ATTN_DT Is Not Null And d.ATTN_DT Is Not Null And i.ATTN_DT <> d.ATTN_DT)) Then 'ATTN_DT = ' + Case When d.ATTN_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ATTN_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.BALLOT_POOL_REG_ID Is Null And d.BALLOT_POOL_REG_ID Is Not Null) Or (i.BALLOT_POOL_REG_ID Is Not Null And d.BALLOT_POOL_REG_ID Is Null) Or (i.BALLOT_POOL_REG_ID Is Not Null And d.BALLOT_POOL_REG_ID Is Not Null And i.BALLOT_POOL_REG_ID <> d.BALLOT_POOL_REG_ID)) Then 'BALLOT_POOL_REG_ID = ' + Case When i.BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_POOL_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_POOL_ID Is Null And d.BALLOT_POOL_ID Is Not Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Null) Or (i.BALLOT_POOL_ID Is Not Null And d.BALLOT_POOL_ID Is Not Null And i.BALLOT_POOL_ID <> d.BALLOT_POOL_ID)) Then 'BALLOT_POOL_ID = ' + Case When i.BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_POOL_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_ID Is Null And d.BALLOT_REG_ID Is Not Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Not Null And i.BALLOT_REG_ID <> d.BALLOT_REG_ID)) Then 'BALLOT_REG_ID = ' + Case When i.BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_BATCH_ID Is Null And d.BALLOT_BATCH_ID Is Not Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Null) Or (i.BALLOT_BATCH_ID Is Not Null And d.BALLOT_BATCH_ID Is Not Null And i.BALLOT_BATCH_ID <> d.BALLOT_BATCH_ID)) Then 'BALLOT_BATCH_ID = ' + Case When i.BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_BATCH_ID) + '''' End + ', ' Else '' End +  Case When ((i.CF_BALLOT_POOL_REG_ID Is Null And d.CF_BALLOT_POOL_REG_ID Is Not Null) Or (i.CF_BALLOT_POOL_REG_ID Is Not Null And d.CF_BALLOT_POOL_REG_ID Is Null) Or (i.CF_BALLOT_POOL_REG_ID Is Not Null And d.CF_BALLOT_POOL_REG_ID Is Not Null And i.CF_BALLOT_POOL_REG_ID <> d.CF_BALLOT_POOL_REG_ID)) Then 'CF_BALLOT_POOL_REG_ID = ' + Case When i.CF_BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CF_BALLOT_POOL_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_STATUS Is Null And d.BALLOT_REG_STATUS Is Not Null) Or (i.BALLOT_REG_STATUS Is Not Null And d.BALLOT_REG_STATUS Is Null) Or (i.BALLOT_REG_STATUS Is Not Null And d.BALLOT_REG_STATUS Is Not Null And i.BALLOT_REG_STATUS <> d.BALLOT_REG_STATUS)) Then 'BALLOT_REG_STATUS = ' + Case When i.BALLOT_REG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_REG_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_RESULT_SEQ Is Null And d.BALLOT_RESULT_SEQ Is Not Null) Or (i.BALLOT_RESULT_SEQ Is Not Null And d.BALLOT_RESULT_SEQ Is Null) Or (i.BALLOT_RESULT_SEQ Is Not Null And d.BALLOT_RESULT_SEQ Is Not Null And i.BALLOT_RESULT_SEQ <> d.BALLOT_RESULT_SEQ)) Then 'BALLOT_RESULT_SEQ = ' + Case When i.BALLOT_RESULT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_RESULT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.ATTN_DT Is Null And d.ATTN_DT Is Not Null) Or (i.ATTN_DT Is Not Null And d.ATTN_DT Is Null) Or (i.ATTN_DT Is Not Null And d.ATTN_DT Is Not Null And i.ATTN_DT <> d.ATTN_DT)) Then 'ATTN_DT = ' + Case When i.ATTN_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ATTN_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('BALLOT_POOL_REG_ID = ''' + Convert(NVarChar(4000), i.BALLOT_POOL_REG_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.BALLOT_POOL_REG_ID = d.BALLOT_POOL_REG_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('BALLOT_POOL_REG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('BALLOT_POOL_REG_ID = ' + Case When BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''' End + ', CF_BALLOT_POOL_REG_ID = ' + Case When CF_BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CF_BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_REG_STATUS = ' + Case When BALLOT_REG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_STATUS) + '''' End + ', BALLOT_RESULT_SEQ = ' + Case When BALLOT_RESULT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_RESULT_SEQ) + '''' End + ', ATTN_DT = ' + Case When ATTN_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ATTN_DT, 121) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_POOL_REG_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_REG_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.BALLOT_POOL_REG_ID = d.BALLOT_POOL_REG_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_POOL_REG', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('BALLOT_POOL_REG_ID = ' + Case When BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_POOL_ID = ' + Case When BALLOT_POOL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_POOL_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', BALLOT_BATCH_ID = ' + Case When BALLOT_BATCH_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_BATCH_ID) + '''' End + ', CF_BALLOT_POOL_REG_ID = ' + Case When CF_BALLOT_POOL_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CF_BALLOT_POOL_REG_ID) + '''' End + ', BALLOT_REG_STATUS = ' + Case When BALLOT_REG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_STATUS) + '''' End + ', BALLOT_RESULT_SEQ = ' + Case When BALLOT_RESULT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_RESULT_SEQ) + '''' End + ', ATTN_DT = ' + Case When ATTN_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ATTN_DT, 121) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_POOL_REG_ID = ''' + Convert(NVarChar(4000), BALLOT_POOL_REG_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.BALLOT_POOL_REG_ID = d.BALLOT_POOL_REG_ID)  End
GO

ALTER TABLE [dbo].[BALLOT_POOL_REG] ENABLE TRIGGER [TG_AUD_BALLOT_POOL_REG_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_REG_BUYER_OnDeleted]
On [dbo].[BALLOT_REG_BUYER]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('BALLOT_REG_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('BALLOT_REG_BUYER_ID = ' + Case When BALLOT_REG_BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_BUYER_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_TYPE) + '''' End + ', BUYER_CHI_NAME = ' + Case When BUYER_CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_CHI_NAME) + '''' End + ', BUYER_ENG_NAME = ' + Case When BUYER_ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_IS_IDEN) + '''' End + ', BUYER_NAT_CODE = ' + Case When BUYER_NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_NAT_CODE) + '''' End + ', CO_NAME = ' + Case When CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CO_NAME) + '''' End + ', CO_BRN = ' + Case When CO_BRN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CO_BRN) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_REG_BUYER_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_BUYER_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[BALLOT_REG_BUYER] ENABLE TRIGGER [TG_AUD_BALLOT_REG_BUYER_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_REG_BUYER_OnInserted]
On [dbo].[BALLOT_REG_BUYER]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('BALLOT_REG_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('BALLOT_REG_BUYER_ID = ' + Case When BALLOT_REG_BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_REG_BUYER_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_REG_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_TYPE) + '''' End + ', BUYER_CHI_NAME = ' + Case When BUYER_CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_CHI_NAME) + '''' End + ', BUYER_ENG_NAME = ' + Case When BUYER_ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_ID) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_ID_IS_IDEN) + '''' End + ', BUYER_NAT_CODE = ' + Case When BUYER_NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_NAT_CODE) + '''' End + ', CO_NAME = ' + Case When CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CO_NAME) + '''' End + ', CO_BRN = ' + Case When CO_BRN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CO_BRN) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_REG_BUYER_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_BUYER_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[BALLOT_REG_BUYER] ENABLE TRIGGER [TG_AUD_BALLOT_REG_BUYER_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_REG_BUYER_OnUpdated]
On [dbo].[BALLOT_REG_BUYER]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_REG_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.BALLOT_REG_BUYER_ID Is Null And d.BALLOT_REG_BUYER_ID Is Not Null) Or (i.BALLOT_REG_BUYER_ID Is Not Null And d.BALLOT_REG_BUYER_ID Is Null) Or (i.BALLOT_REG_BUYER_ID Is Not Null And d.BALLOT_REG_BUYER_ID Is Not Null And i.BALLOT_REG_BUYER_ID <> d.BALLOT_REG_BUYER_ID)) Then 'BALLOT_REG_BUYER_ID = ' + Case When d.BALLOT_REG_BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_REG_BUYER_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_ID Is Null And d.BALLOT_REG_ID Is Not Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Not Null And i.BALLOT_REG_ID <> d.BALLOT_REG_ID)) Then 'BALLOT_REG_ID = ' + Case When d.BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SEQ Is Null And d.BUYER_SEQ Is Not Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Not Null And i.BUYER_SEQ <> d.BUYER_SEQ)) Then 'BUYER_SEQ = ' + Case When d.BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_TYPE Is Null And d.BUYER_TYPE Is Not Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Not Null And i.BUYER_TYPE <> d.BUYER_TYPE)) Then 'BUYER_TYPE = ' + Case When d.BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_CHI_NAME Is Null And d.BUYER_CHI_NAME Is Not Null) Or (i.BUYER_CHI_NAME Is Not Null And d.BUYER_CHI_NAME Is Null) Or (i.BUYER_CHI_NAME Is Not Null And d.BUYER_CHI_NAME Is Not Null And i.BUYER_CHI_NAME <> d.BUYER_CHI_NAME)) Then 'BUYER_CHI_NAME = ' + Case When d.BUYER_CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_CHI_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ENG_NAME Is Null And d.BUYER_ENG_NAME Is Not Null) Or (i.BUYER_ENG_NAME Is Not Null And d.BUYER_ENG_NAME Is Null) Or (i.BUYER_ENG_NAME Is Not Null And d.BUYER_ENG_NAME Is Not Null And i.BUYER_ENG_NAME <> d.BUYER_ENG_NAME)) Then 'BUYER_ENG_NAME = ' + Case When d.BUYER_ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_ENG_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID Is Null And d.BUYER_ID Is Not Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Not Null And i.BUYER_ID <> d.BUYER_ID)) Then 'BUYER_ID = ' + Case When d.BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID_IS_IDEN Is Null And d.BUYER_ID_IS_IDEN Is Not Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Not Null And i.BUYER_ID_IS_IDEN <> d.BUYER_ID_IS_IDEN)) Then 'BUYER_ID_IS_IDEN = ' + Case When d.BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_ID_IS_IDEN) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_NAT_CODE Is Null And d.BUYER_NAT_CODE Is Not Null) Or (i.BUYER_NAT_CODE Is Not Null And d.BUYER_NAT_CODE Is Null) Or (i.BUYER_NAT_CODE Is Not Null And d.BUYER_NAT_CODE Is Not Null And i.BUYER_NAT_CODE <> d.BUYER_NAT_CODE)) Then 'BUYER_NAT_CODE = ' + Case When d.BUYER_NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_NAT_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CO_NAME Is Null And d.CO_NAME Is Not Null) Or (i.CO_NAME Is Not Null And d.CO_NAME Is Null) Or (i.CO_NAME Is Not Null And d.CO_NAME Is Not Null And i.CO_NAME <> d.CO_NAME)) Then 'CO_NAME = ' + Case When d.CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CO_NAME) + '''' End + ', ' Else '' End +  Case When ((i.CO_BRN Is Null And d.CO_BRN Is Not Null) Or (i.CO_BRN Is Not Null And d.CO_BRN Is Null) Or (i.CO_BRN Is Not Null And d.CO_BRN Is Not Null And i.CO_BRN <> d.CO_BRN)) Then 'CO_BRN = ' + Case When d.CO_BRN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CO_BRN) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.BALLOT_REG_BUYER_ID Is Null And d.BALLOT_REG_BUYER_ID Is Not Null) Or (i.BALLOT_REG_BUYER_ID Is Not Null And d.BALLOT_REG_BUYER_ID Is Null) Or (i.BALLOT_REG_BUYER_ID Is Not Null And d.BALLOT_REG_BUYER_ID Is Not Null And i.BALLOT_REG_BUYER_ID <> d.BALLOT_REG_BUYER_ID)) Then 'BALLOT_REG_BUYER_ID = ' + Case When i.BALLOT_REG_BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_REG_BUYER_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_ID Is Null And d.BALLOT_REG_ID Is Not Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Not Null And i.BALLOT_REG_ID <> d.BALLOT_REG_ID)) Then 'BALLOT_REG_ID = ' + Case When i.BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SEQ Is Null And d.BUYER_SEQ Is Not Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Null) Or (i.BUYER_SEQ Is Not Null And d.BUYER_SEQ Is Not Null And i.BUYER_SEQ <> d.BUYER_SEQ)) Then 'BUYER_SEQ = ' + Case When i.BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_TYPE Is Null And d.BUYER_TYPE Is Not Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Null) Or (i.BUYER_TYPE Is Not Null And d.BUYER_TYPE Is Not Null And i.BUYER_TYPE <> d.BUYER_TYPE)) Then 'BUYER_TYPE = ' + Case When i.BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_CHI_NAME Is Null And d.BUYER_CHI_NAME Is Not Null) Or (i.BUYER_CHI_NAME Is Not Null And d.BUYER_CHI_NAME Is Null) Or (i.BUYER_CHI_NAME Is Not Null And d.BUYER_CHI_NAME Is Not Null And i.BUYER_CHI_NAME <> d.BUYER_CHI_NAME)) Then 'BUYER_CHI_NAME = ' + Case When i.BUYER_CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_CHI_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ENG_NAME Is Null And d.BUYER_ENG_NAME Is Not Null) Or (i.BUYER_ENG_NAME Is Not Null And d.BUYER_ENG_NAME Is Null) Or (i.BUYER_ENG_NAME Is Not Null And d.BUYER_ENG_NAME Is Not Null And i.BUYER_ENG_NAME <> d.BUYER_ENG_NAME)) Then 'BUYER_ENG_NAME = ' + Case When i.BUYER_ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_ENG_NAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID Is Null And d.BUYER_ID Is Not Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Null) Or (i.BUYER_ID Is Not Null And d.BUYER_ID Is Not Null And i.BUYER_ID <> d.BUYER_ID)) Then 'BUYER_ID = ' + Case When i.BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_ID) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_ID_IS_IDEN Is Null And d.BUYER_ID_IS_IDEN Is Not Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Null) Or (i.BUYER_ID_IS_IDEN Is Not Null And d.BUYER_ID_IS_IDEN Is Not Null And i.BUYER_ID_IS_IDEN <> d.BUYER_ID_IS_IDEN)) Then 'BUYER_ID_IS_IDEN = ' + Case When i.BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_ID_IS_IDEN) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_NAT_CODE Is Null And d.BUYER_NAT_CODE Is Not Null) Or (i.BUYER_NAT_CODE Is Not Null And d.BUYER_NAT_CODE Is Null) Or (i.BUYER_NAT_CODE Is Not Null And d.BUYER_NAT_CODE Is Not Null And i.BUYER_NAT_CODE <> d.BUYER_NAT_CODE)) Then 'BUYER_NAT_CODE = ' + Case When i.BUYER_NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_NAT_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CO_NAME Is Null And d.CO_NAME Is Not Null) Or (i.CO_NAME Is Not Null And d.CO_NAME Is Null) Or (i.CO_NAME Is Not Null And d.CO_NAME Is Not Null And i.CO_NAME <> d.CO_NAME)) Then 'CO_NAME = ' + Case When i.CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CO_NAME) + '''' End + ', ' Else '' End +  Case When ((i.CO_BRN Is Null And d.CO_BRN Is Not Null) Or (i.CO_BRN Is Not Null And d.CO_BRN Is Null) Or (i.CO_BRN Is Not Null And d.CO_BRN Is Not Null And i.CO_BRN <> d.CO_BRN)) Then 'CO_BRN = ' + Case When i.CO_BRN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CO_BRN) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('BALLOT_REG_BUYER_ID = ''' + Convert(NVarChar(4000), i.BALLOT_REG_BUYER_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.BALLOT_REG_BUYER_ID = d.BALLOT_REG_BUYER_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('BALLOT_REG_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('BALLOT_REG_BUYER_ID = ' + Case When BALLOT_REG_BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_BUYER_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_TYPE) + '''' End + ', BUYER_CHI_NAME = ' + Case When BUYER_CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_CHI_NAME) + '''' End + ', BUYER_ENG_NAME = ' + Case When BUYER_ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_IS_IDEN) + '''' End + ', BUYER_NAT_CODE = ' + Case When BUYER_NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_NAT_CODE) + '''' End + ', CO_NAME = ' + Case When CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CO_NAME) + '''' End + ', CO_BRN = ' + Case When CO_BRN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CO_BRN) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_REG_BUYER_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_BUYER_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.BALLOT_REG_BUYER_ID = d.BALLOT_REG_BUYER_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_REG_BUYER', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('BALLOT_REG_BUYER_ID = ' + Case When BALLOT_REG_BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_BUYER_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', BUYER_SEQ = ' + Case When BUYER_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SEQ) + '''' End + ', BUYER_TYPE = ' + Case When BUYER_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_TYPE) + '''' End + ', BUYER_CHI_NAME = ' + Case When BUYER_CHI_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_CHI_NAME) + '''' End + ', BUYER_ENG_NAME = ' + Case When BUYER_ENG_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ENG_NAME) + '''' End + ', BUYER_ID = ' + Case When BUYER_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID) + '''' End + ', BUYER_ID_IS_IDEN = ' + Case When BUYER_ID_IS_IDEN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_ID_IS_IDEN) + '''' End + ', BUYER_NAT_CODE = ' + Case When BUYER_NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_NAT_CODE) + '''' End + ', CO_NAME = ' + Case When CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CO_NAME) + '''' End + ', CO_BRN = ' + Case When CO_BRN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CO_BRN) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_REG_BUYER_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_BUYER_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.BALLOT_REG_BUYER_ID = d.BALLOT_REG_BUYER_ID)  End
GO

ALTER TABLE [dbo].[BALLOT_REG_BUYER] ENABLE TRIGGER [TG_AUD_BALLOT_REG_BUYER_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_REG_PAY_OnDeleted]
On [dbo].[BALLOT_REG_PAY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('BALLOT_REG_PAY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('BALLOT_REG_PAY_ID = ' + Case When BALLOT_REG_PAY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_PAY_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', PAYMENT_SEQ = ' + Case When PAYMENT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_SEQ) + '''' End + ', CHEQUE_NO = ' + Case When CHEQUE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHEQUE_NO) + '''' End + ', CHEQUE_TYPE = ' + Case When CHEQUE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHEQUE_TYPE) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_REG_PAY_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_PAY_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[BALLOT_REG_PAY] ENABLE TRIGGER [TG_AUD_BALLOT_REG_PAY_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_REG_PAY_OnInserted]
On [dbo].[BALLOT_REG_PAY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('BALLOT_REG_PAY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('BALLOT_REG_PAY_ID = ' + Case When BALLOT_REG_PAY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_REG_PAY_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_REG_ID) + '''' End + ', PAYMENT_SEQ = ' + Case When PAYMENT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PAYMENT_SEQ) + '''' End + ', CHEQUE_NO = ' + Case When CHEQUE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CHEQUE_NO) + '''' End + ', CHEQUE_TYPE = ' + Case When CHEQUE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CHEQUE_TYPE) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_REG_PAY_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_PAY_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[BALLOT_REG_PAY] ENABLE TRIGGER [TG_AUD_BALLOT_REG_PAY_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_BALLOT_REG_PAY_OnUpdated]
On [dbo].[BALLOT_REG_PAY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_REG_PAY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.BALLOT_REG_PAY_ID Is Null And d.BALLOT_REG_PAY_ID Is Not Null) Or (i.BALLOT_REG_PAY_ID Is Not Null And d.BALLOT_REG_PAY_ID Is Null) Or (i.BALLOT_REG_PAY_ID Is Not Null And d.BALLOT_REG_PAY_ID Is Not Null And i.BALLOT_REG_PAY_ID <> d.BALLOT_REG_PAY_ID)) Then 'BALLOT_REG_PAY_ID = ' + Case When d.BALLOT_REG_PAY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_REG_PAY_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_ID Is Null And d.BALLOT_REG_ID Is Not Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Not Null And i.BALLOT_REG_ID <> d.BALLOT_REG_ID)) Then 'BALLOT_REG_ID = ' + Case When d.BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_SEQ Is Null And d.PAYMENT_SEQ Is Not Null) Or (i.PAYMENT_SEQ Is Not Null And d.PAYMENT_SEQ Is Null) Or (i.PAYMENT_SEQ Is Not Null And d.PAYMENT_SEQ Is Not Null And i.PAYMENT_SEQ <> d.PAYMENT_SEQ)) Then 'PAYMENT_SEQ = ' + Case When d.PAYMENT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PAYMENT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.CHEQUE_NO Is Null And d.CHEQUE_NO Is Not Null) Or (i.CHEQUE_NO Is Not Null And d.CHEQUE_NO Is Null) Or (i.CHEQUE_NO Is Not Null And d.CHEQUE_NO Is Not Null And i.CHEQUE_NO <> d.CHEQUE_NO)) Then 'CHEQUE_NO = ' + Case When d.CHEQUE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CHEQUE_NO) + '''' End + ', ' Else '' End +  Case When ((i.CHEQUE_TYPE Is Null And d.CHEQUE_TYPE Is Not Null) Or (i.CHEQUE_TYPE Is Not Null And d.CHEQUE_TYPE Is Null) Or (i.CHEQUE_TYPE Is Not Null And d.CHEQUE_TYPE Is Not Null And i.CHEQUE_TYPE <> d.CHEQUE_TYPE)) Then 'CHEQUE_TYPE = ' + Case When d.CHEQUE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CHEQUE_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.BANK_CODE Is Null And d.BANK_CODE Is Not Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Not Null And i.BANK_CODE <> d.BANK_CODE)) Then 'BANK_CODE = ' + Case When d.BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BANK_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When d.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When d.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.AMOUNT Is Null And d.AMOUNT Is Not Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Not Null And i.AMOUNT <> d.AMOUNT)) Then 'AMOUNT = ' + Case When d.AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AMOUNT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.BALLOT_REG_PAY_ID Is Null And d.BALLOT_REG_PAY_ID Is Not Null) Or (i.BALLOT_REG_PAY_ID Is Not Null And d.BALLOT_REG_PAY_ID Is Null) Or (i.BALLOT_REG_PAY_ID Is Not Null And d.BALLOT_REG_PAY_ID Is Not Null And i.BALLOT_REG_PAY_ID <> d.BALLOT_REG_PAY_ID)) Then 'BALLOT_REG_PAY_ID = ' + Case When i.BALLOT_REG_PAY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_REG_PAY_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_REG_ID Is Null And d.BALLOT_REG_ID Is Not Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Null) Or (i.BALLOT_REG_ID Is Not Null And d.BALLOT_REG_ID Is Not Null And i.BALLOT_REG_ID <> d.BALLOT_REG_ID)) Then 'BALLOT_REG_ID = ' + Case When i.BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_REG_ID) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_SEQ Is Null And d.PAYMENT_SEQ Is Not Null) Or (i.PAYMENT_SEQ Is Not Null And d.PAYMENT_SEQ Is Null) Or (i.PAYMENT_SEQ Is Not Null And d.PAYMENT_SEQ Is Not Null And i.PAYMENT_SEQ <> d.PAYMENT_SEQ)) Then 'PAYMENT_SEQ = ' + Case When i.PAYMENT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PAYMENT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.CHEQUE_NO Is Null And d.CHEQUE_NO Is Not Null) Or (i.CHEQUE_NO Is Not Null And d.CHEQUE_NO Is Null) Or (i.CHEQUE_NO Is Not Null And d.CHEQUE_NO Is Not Null And i.CHEQUE_NO <> d.CHEQUE_NO)) Then 'CHEQUE_NO = ' + Case When i.CHEQUE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CHEQUE_NO) + '''' End + ', ' Else '' End +  Case When ((i.CHEQUE_TYPE Is Null And d.CHEQUE_TYPE Is Not Null) Or (i.CHEQUE_TYPE Is Not Null And d.CHEQUE_TYPE Is Null) Or (i.CHEQUE_TYPE Is Not Null And d.CHEQUE_TYPE Is Not Null And i.CHEQUE_TYPE <> d.CHEQUE_TYPE)) Then 'CHEQUE_TYPE = ' + Case When i.CHEQUE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CHEQUE_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.BANK_CODE Is Null And d.BANK_CODE Is Not Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Null) Or (i.BANK_CODE Is Not Null And d.BANK_CODE Is Not Null And i.BANK_CODE <> d.BANK_CODE)) Then 'BANK_CODE = ' + Case When i.BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BANK_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When i.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When i.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.AMOUNT Is Null And d.AMOUNT Is Not Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Null) Or (i.AMOUNT Is Not Null And d.AMOUNT Is Not Null And i.AMOUNT <> d.AMOUNT)) Then 'AMOUNT = ' + Case When i.AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AMOUNT) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('BALLOT_REG_PAY_ID = ''' + Convert(NVarChar(4000), i.BALLOT_REG_PAY_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.BALLOT_REG_PAY_ID = d.BALLOT_REG_PAY_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('BALLOT_REG_PAY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('BALLOT_REG_PAY_ID = ' + Case When BALLOT_REG_PAY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_PAY_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', PAYMENT_SEQ = ' + Case When PAYMENT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_SEQ) + '''' End + ', CHEQUE_NO = ' + Case When CHEQUE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHEQUE_NO) + '''' End + ', CHEQUE_TYPE = ' + Case When CHEQUE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHEQUE_TYPE) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BALLOT_REG_PAY_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_PAY_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.BALLOT_REG_PAY_ID = d.BALLOT_REG_PAY_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BALLOT_REG_PAY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('BALLOT_REG_PAY_ID = ' + Case When BALLOT_REG_PAY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_PAY_ID) + '''' End + ', BALLOT_REG_ID = ' + Case When BALLOT_REG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_REG_ID) + '''' End + ', PAYMENT_SEQ = ' + Case When PAYMENT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_SEQ) + '''' End + ', CHEQUE_NO = ' + Case When CHEQUE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHEQUE_NO) + '''' End + ', CHEQUE_TYPE = ' + Case When CHEQUE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CHEQUE_TYPE) + '''' End + ', BANK_CODE = ' + Case When BANK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BANK_CODE) + '''' End + ', CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', AMOUNT = ' + Case When AMOUNT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AMOUNT) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('BALLOT_REG_PAY_ID = ''' + Convert(NVarChar(4000), BALLOT_REG_PAY_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.BALLOT_REG_PAY_ID = d.BALLOT_REG_PAY_ID)  End
GO

ALTER TABLE [dbo].[BALLOT_REG_PAY] ENABLE TRIGGER [TG_AUD_BALLOT_REG_PAY_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_BANK_OnDeleted]
On [dbo].[BANK]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('BANK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('BK_CODE = ' + Case When BK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BK_CODE) + '''' End + ', BK_NAME = ' + Case When BK_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BK_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BK_CODE = ''' + Convert(NVarChar(4000), BK_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[BANK] ENABLE TRIGGER [TG_AUD_BANK_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_BANK_OnInserted]
On [dbo].[BANK]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('BANK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('BK_CODE = ' + Case When BK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BK_CODE) + '''' End + ', BK_NAME = ' + Case When BK_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BK_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('BK_CODE = ''' + Convert(NVarChar(4000), BK_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[BANK] ENABLE TRIGGER [TG_AUD_BANK_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_BANK_OnUpdated]
On [dbo].[BANK]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BANK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.BK_CODE Is Null And d.BK_CODE Is Not Null) Or (i.BK_CODE Is Not Null And d.BK_CODE Is Null) Or (i.BK_CODE Is Not Null And d.BK_CODE Is Not Null And i.BK_CODE <> d.BK_CODE)) Then 'BK_CODE = ' + Case When d.BK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BK_CODE) + '''' End + ', ' Else '' End +  Case When ((i.BK_NAME Is Null And d.BK_NAME Is Not Null) Or (i.BK_NAME Is Not Null And d.BK_NAME Is Null) Or (i.BK_NAME Is Not Null And d.BK_NAME Is Not Null And i.BK_NAME <> d.BK_NAME)) Then 'BK_NAME = ' + Case When d.BK_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BK_NAME) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.BK_CODE Is Null And d.BK_CODE Is Not Null) Or (i.BK_CODE Is Not Null And d.BK_CODE Is Null) Or (i.BK_CODE Is Not Null And d.BK_CODE Is Not Null And i.BK_CODE <> d.BK_CODE)) Then 'BK_CODE = ' + Case When i.BK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BK_CODE) + '''' End + ', ' Else '' End +  Case When ((i.BK_NAME Is Null And d.BK_NAME Is Not Null) Or (i.BK_NAME Is Not Null And d.BK_NAME Is Null) Or (i.BK_NAME Is Not Null And d.BK_NAME Is Not Null And i.BK_NAME <> d.BK_NAME)) Then 'BK_NAME = ' + Case When i.BK_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BK_NAME) + '''' End + ', ' Else '' End)  ChangedValue, Left('BK_CODE = ''' + Convert(NVarChar(4000), i.BK_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.BK_CODE = d.BK_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('BANK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('BK_CODE = ' + Case When BK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BK_CODE) + '''' End + ', BK_NAME = ' + Case When BK_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BK_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('BK_CODE = ''' + Convert(NVarChar(4000), BK_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.BK_CODE = d.BK_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BANK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('BK_CODE = ' + Case When BK_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BK_CODE) + '''' End + ', BK_NAME = ' + Case When BK_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BK_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('BK_CODE = ''' + Convert(NVarChar(4000), BK_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.BK_CODE = d.BK_CODE)  End
GO

ALTER TABLE [dbo].[BANK] ENABLE TRIGGER [TG_AUD_BANK_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_BLOCK_OnDeleted]
On [dbo].[BLOCK]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('BLOCK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BLOCK_ID = ' + Case When BLOCK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BLOCK_ID) + '''' End + ', BLOCK_DESC = ' + Case When BLOCK_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BLOCK_DESC) + '''' End + ', SECTION = ' + Case When SECTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SECTION) + '''' End + ', SECTION_BLOCK = ' + Case When SECTION_BLOCK Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SECTION_BLOCK) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REG_NO) + '''' End + ', SETTLE_PERIOD = ' + Case When SETTLE_PERIOD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SETTLE_PERIOD) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BLOCK_ID = ''' + Convert(NVarChar(4000), BLOCK_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[BLOCK] ENABLE TRIGGER [TG_AUD_BLOCK_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_BLOCK_OnInserted]
On [dbo].[BLOCK]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('BLOCK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', BLOCK_ID = ' + Case When BLOCK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BLOCK_ID) + '''' End + ', BLOCK_DESC = ' + Case When BLOCK_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BLOCK_DESC) + '''' End + ', SECTION = ' + Case When SECTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SECTION) + '''' End + ', SECTION_BLOCK = ' + Case When SECTION_BLOCK Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SECTION_BLOCK) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REG_NO) + '''' End + ', SETTLE_PERIOD = ' + Case When SETTLE_PERIOD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SETTLE_PERIOD) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BLOCK_ID = ''' + Convert(NVarChar(4000), BLOCK_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[BLOCK] ENABLE TRIGGER [TG_AUD_BLOCK_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_BLOCK_OnUpdated]
On [dbo].[BLOCK]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BLOCK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BLOCK_ID Is Null And d.BLOCK_ID Is Not Null) Or (i.BLOCK_ID Is Not Null And d.BLOCK_ID Is Null) Or (i.BLOCK_ID Is Not Null And d.BLOCK_ID Is Not Null And i.BLOCK_ID <> d.BLOCK_ID)) Then 'BLOCK_ID = ' + Case When d.BLOCK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BLOCK_ID) + '''' End + ', ' Else '' End +  Case When ((i.BLOCK_DESC Is Null And d.BLOCK_DESC Is Not Null) Or (i.BLOCK_DESC Is Not Null And d.BLOCK_DESC Is Null) Or (i.BLOCK_DESC Is Not Null And d.BLOCK_DESC Is Not Null And i.BLOCK_DESC <> d.BLOCK_DESC)) Then 'BLOCK_DESC = ' + Case When d.BLOCK_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BLOCK_DESC) + '''' End + ', ' Else '' End +  Case When ((i.SECTION Is Null And d.SECTION Is Not Null) Or (i.SECTION Is Not Null And d.SECTION Is Null) Or (i.SECTION Is Not Null And d.SECTION Is Not Null And i.SECTION <> d.SECTION)) Then 'SECTION = ' + Case When d.SECTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SECTION) + '''' End + ', ' Else '' End +  Case When ((i.SECTION_BLOCK Is Null And d.SECTION_BLOCK Is Not Null) Or (i.SECTION_BLOCK Is Not Null And d.SECTION_BLOCK Is Null) Or (i.SECTION_BLOCK Is Not Null And d.SECTION_BLOCK Is Not Null And i.SECTION_BLOCK <> d.SECTION_BLOCK)) Then 'SECTION_BLOCK = ' + Case When d.SECTION_BLOCK Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SECTION_BLOCK) + '''' End + ', ' Else '' End +  Case When ((i.REG_NO Is Null And d.REG_NO Is Not Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Not Null And i.REG_NO <> d.REG_NO)) Then 'REG_NO = ' + Case When d.REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REG_NO) + '''' End + ', ' Else '' End +  Case When ((i.SETTLE_PERIOD Is Null And d.SETTLE_PERIOD Is Not Null) Or (i.SETTLE_PERIOD Is Not Null And d.SETTLE_PERIOD Is Null) Or (i.SETTLE_PERIOD Is Not Null And d.SETTLE_PERIOD Is Not Null And i.SETTLE_PERIOD <> d.SETTLE_PERIOD)) Then 'SETTLE_PERIOD = ' + Case When d.SETTLE_PERIOD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SETTLE_PERIOD) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BLOCK_ID Is Null And d.BLOCK_ID Is Not Null) Or (i.BLOCK_ID Is Not Null And d.BLOCK_ID Is Null) Or (i.BLOCK_ID Is Not Null And d.BLOCK_ID Is Not Null And i.BLOCK_ID <> d.BLOCK_ID)) Then 'BLOCK_ID = ' + Case When i.BLOCK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BLOCK_ID) + '''' End + ', ' Else '' End +  Case When ((i.BLOCK_DESC Is Null And d.BLOCK_DESC Is Not Null) Or (i.BLOCK_DESC Is Not Null And d.BLOCK_DESC Is Null) Or (i.BLOCK_DESC Is Not Null And d.BLOCK_DESC Is Not Null And i.BLOCK_DESC <> d.BLOCK_DESC)) Then 'BLOCK_DESC = ' + Case When i.BLOCK_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BLOCK_DESC) + '''' End + ', ' Else '' End +  Case When ((i.SECTION Is Null And d.SECTION Is Not Null) Or (i.SECTION Is Not Null And d.SECTION Is Null) Or (i.SECTION Is Not Null And d.SECTION Is Not Null And i.SECTION <> d.SECTION)) Then 'SECTION = ' + Case When i.SECTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SECTION) + '''' End + ', ' Else '' End +  Case When ((i.SECTION_BLOCK Is Null And d.SECTION_BLOCK Is Not Null) Or (i.SECTION_BLOCK Is Not Null And d.SECTION_BLOCK Is Null) Or (i.SECTION_BLOCK Is Not Null And d.SECTION_BLOCK Is Not Null And i.SECTION_BLOCK <> d.SECTION_BLOCK)) Then 'SECTION_BLOCK = ' + Case When i.SECTION_BLOCK Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SECTION_BLOCK) + '''' End + ', ' Else '' End +  Case When ((i.REG_NO Is Null And d.REG_NO Is Not Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Not Null And i.REG_NO <> d.REG_NO)) Then 'REG_NO = ' + Case When i.REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REG_NO) + '''' End + ', ' Else '' End +  Case When ((i.SETTLE_PERIOD Is Null And d.SETTLE_PERIOD Is Not Null) Or (i.SETTLE_PERIOD Is Not Null And d.SETTLE_PERIOD Is Null) Or (i.SETTLE_PERIOD Is Not Null And d.SETTLE_PERIOD Is Not Null And i.SETTLE_PERIOD <> d.SETTLE_PERIOD)) Then 'SETTLE_PERIOD = ' + Case When i.SETTLE_PERIOD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SETTLE_PERIOD) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', BLOCK_ID = ''' + Convert(NVarChar(4000), i.BLOCK_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.BLOCK_ID = d.BLOCK_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('BLOCK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BLOCK_ID = ' + Case When BLOCK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BLOCK_ID) + '''' End + ', BLOCK_DESC = ' + Case When BLOCK_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BLOCK_DESC) + '''' End + ', SECTION = ' + Case When SECTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SECTION) + '''' End + ', SECTION_BLOCK = ' + Case When SECTION_BLOCK Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SECTION_BLOCK) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REG_NO) + '''' End + ', SETTLE_PERIOD = ' + Case When SETTLE_PERIOD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SETTLE_PERIOD) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BLOCK_ID = ''' + Convert(NVarChar(4000), BLOCK_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.BLOCK_ID = d.BLOCK_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('BLOCK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BLOCK_ID = ' + Case When BLOCK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BLOCK_ID) + '''' End + ', BLOCK_DESC = ' + Case When BLOCK_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BLOCK_DESC) + '''' End + ', SECTION = ' + Case When SECTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SECTION) + '''' End + ', SECTION_BLOCK = ' + Case When SECTION_BLOCK Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SECTION_BLOCK) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REG_NO) + '''' End + ', SETTLE_PERIOD = ' + Case When SETTLE_PERIOD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SETTLE_PERIOD) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', BLOCK_ID = ''' + Convert(NVarChar(4000), BLOCK_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.BLOCK_ID = d.BLOCK_ID)  End
GO

ALTER TABLE [dbo].[BLOCK] ENABLE TRIGGER [TG_AUD_BLOCK_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_CAR_PARK_OnDeleted]
On [dbo].[CAR_PARK]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('CAR_PARK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_NO) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_CODE) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', CAR_PARK_NO = ' + Case When CAR_PARK_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_NO) + '''' End + ', HOUSE_NO = ' + Case When HOUSE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), HOUSE_NO) + '''' End + ', STREET_NO = ' + Case When STREET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STREET_NO) + '''' End + ', PARK_LEVEL = ' + Case When PARK_LEVEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARK_LEVEL) + '''' End + ', DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_CODE) + '''' End + ', PARK_LIST_PRICE = ' + Case When PARK_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARK_LIST_PRICE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''' End + ', CAR_PARK_PHASE = ' + Case When CAR_PARK_PHASE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_PHASE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', CAR_PARK_DELETED = ' + Case When CAR_PARK_DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_DELETED) + '''' End + ', UPLOAD_DATE = ' + Case When UPLOAD_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPLOAD_DATE, 121) + '''' End + 'LAST_RESERVE_DATE = ' + Case When LAST_RESERVE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LAST_RESERVE_DATE, 121) + '''' End + ', LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_CODE) + '''' End + ', ADD_CAR_PARK_PRICE_BEFORE_ADJUST = ' + Case When ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_CAR_PARK_PRICE_BEFORE_ADJUST) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', BATCH_NO = ' + Case When BATCH_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BATCH_NO) + '''' End + ', EFFECT_DATE = ' + Case When EFFECT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EFFECT_DATE, 121) + '''' End + ', PRICE_LIST_NO = ' + Case When PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRICE_LIST_NO) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[CAR_PARK] ENABLE TRIGGER [TG_AUD_CAR_PARK_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_CAR_PARK_OnInserted]
On [dbo].[CAR_PARK]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('CAR_PARK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CAR_PARK_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MOA_NO) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STR_CODE) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CODE) + '''' End + ', CAR_PARK_NO = ' + Case When CAR_PARK_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CAR_PARK_NO) + '''' End + ', HOUSE_NO = ' + Case When HOUSE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),HOUSE_NO) + '''' End + ', STREET_NO = ' + Case When STREET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STREET_NO) + '''' End + ', PARK_LEVEL = ' + Case When PARK_LEVEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARK_LEVEL) + '''' End + ', DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DEV_CODE) + '''' End + ', PARK_LIST_PRICE = ' + Case When PARK_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARK_LIST_PRICE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STATUS) + '''' End + ', LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_CODE) + '''' End + ', SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_TYPE_CODE) + '''' End + ', CAR_PARK_PHASE = ' + Case When CAR_PARK_PHASE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CAR_PARK_PHASE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DIST_CODE) + '''' End + ', CAR_PARK_DELETED = ' + Case When CAR_PARK_DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CAR_PARK_DELETED) + '''' End + ', UPLOAD_DATE = ' + Case When UPLOAD_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UPLOAD_DATE,121) + '''' End + ', LAST_RESERVE_DATE = ' + Case When LAST_RESERVE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LAST_RESERVE_DATE,121) + '''' End + 'LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LFC_CODE) + '''' End + ', ADD_CAR_PARK_PRICE_BEFORE_ADJUST = ' + Case When ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADD_CAR_PARK_PRICE_BEFORE_ADJUST) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REGION_CODE) + '''' End + ', BATCH_NO = ' + Case When BATCH_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BATCH_NO) + '''' End + ', EFFECT_DATE = ' + Case When EFFECT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),EFFECT_DATE,121) + '''' End + ', PRICE_LIST_NO = ' + Case When PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PRICE_LIST_NO) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[CAR_PARK] ENABLE TRIGGER [TG_AUD_CAR_PARK_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_CAR_PARK_OnUpdated]
On [dbo].[CAR_PARK]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CAR_PARK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.CAR_PARK_ID Is Null And d.CAR_PARK_ID Is Not Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Not Null And i.CAR_PARK_ID <> d.CAR_PARK_ID)) Then 'CAR_PARK_ID = ' + Case When d.CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CAR_PARK_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.MOA_NO Is Null And d.MOA_NO Is Not Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Not Null And i.MOA_NO <> d.MOA_NO)) Then 'MOA_NO = ' + Case When d.MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MOA_NO) + '''' End + ', ' Else '' End +  Case When ((i.STR_CODE Is Null And d.STR_CODE Is Not Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Not Null And i.STR_CODE <> d.STR_CODE)) Then 'STR_CODE = ' + Case When d.STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STR_CODE) + '''' End + ', ' Else '' End +  Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When d.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_NO Is Null And d.CAR_PARK_NO Is Not Null) Or (i.CAR_PARK_NO Is Not Null And d.CAR_PARK_NO Is Null) Or (i.CAR_PARK_NO Is Not Null And d.CAR_PARK_NO Is Not Null And i.CAR_PARK_NO <> d.CAR_PARK_NO)) Then 'CAR_PARK_NO = ' + Case When d.CAR_PARK_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CAR_PARK_NO) + '''' End + ', ' Else '' End +  Case When ((i.HOUSE_NO Is Null And d.HOUSE_NO Is Not Null) Or (i.HOUSE_NO Is Not Null And d.HOUSE_NO Is Null) Or (i.HOUSE_NO Is Not Null And d.HOUSE_NO Is Not Null And i.HOUSE_NO <> d.HOUSE_NO)) Then 'HOUSE_NO = ' + Case When d.HOUSE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.HOUSE_NO) + '''' End + ', ' Else '' End +  Case When ((i.STREET_NO Is Null And d.STREET_NO Is Not Null) Or (i.STREET_NO Is Not Null And d.STREET_NO Is Null) Or (i.STREET_NO Is Not Null And d.STREET_NO Is Not Null And i.STREET_NO <> d.STREET_NO)) Then 'STREET_NO = ' + Case When d.STREET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STREET_NO) + '''' End + ', ' Else '' End +  Case When ((i.PARK_LEVEL Is Null And d.PARK_LEVEL Is Not Null) Or (i.PARK_LEVEL Is Not Null And d.PARK_LEVEL Is Null) Or (i.PARK_LEVEL Is Not Null And d.PARK_LEVEL Is Not Null And i.PARK_LEVEL <> d.PARK_LEVEL)) Then 'PARK_LEVEL = ' + Case When d.PARK_LEVEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PARK_LEVEL) + '''' End + ', ' Else '' End +  Case When ((i.DEV_CODE Is Null And d.DEV_CODE Is Not Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Not Null And i.DEV_CODE <> d.DEV_CODE)) Then 'DEV_CODE = ' + Case When d.DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DEV_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PARK_LIST_PRICE Is Null And d.PARK_LIST_PRICE Is Not Null) Or (i.PARK_LIST_PRICE Is Not Null And d.PARK_LIST_PRICE Is Null) Or (i.PARK_LIST_PRICE Is Not Null And d.PARK_LIST_PRICE Is Not Null And i.PARK_LIST_PRICE <> d.PARK_LIST_PRICE)) Then 'PARK_LIST_PRICE = ' + Case When d.PARK_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PARK_LIST_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When d.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.LF_CODE Is Null And d.LF_CODE Is Not Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Not Null And i.LF_CODE <> d.LF_CODE)) Then 'LF_CODE = ' + Case When d.LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_TYPE_CODE Is Null And d.SALES_TYPE_CODE Is Not Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Not Null And i.SALES_TYPE_CODE <> d.SALES_TYPE_CODE)) Then 'SALES_TYPE_CODE = ' + Case When d.SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_TYPE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_PHASE Is Null And d.CAR_PARK_PHASE Is Not Null) Or (i.CAR_PARK_PHASE Is Not Null And d.CAR_PARK_PHASE Is Null) Or (i.CAR_PARK_PHASE Is Not Null And d.CAR_PARK_PHASE Is Not Null And i.CAR_PARK_PHASE <> d.CAR_PARK_PHASE)) Then 'CAR_PARK_PHASE = ' + Case When d.CAR_PARK_PHASE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CAR_PARK_PHASE) + '''' End + ', ' Else '' End +  Case When ((i.DIST_CODE Is Null And d.DIST_CODE Is Not Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Not Null And i.DIST_CODE <> d.DIST_CODE)) Then 'DIST_CODE = ' + Case When d.DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DIST_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_DELETED Is Null And d.CAR_PARK_DELETED Is Not Null) Or (i.CAR_PARK_DELETED Is Not Null And d.CAR_PARK_DELETED Is Null) Or (i.CAR_PARK_DELETED Is Not Null And d.CAR_PARK_DELETED Is Not Null And i.CAR_PARK_DELETED <> d.CAR_PARK_DELETED)) Then 'CAR_PARK_DELETED = ' + Case When d.CAR_PARK_DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CAR_PARK_DELETED) + '''' End + ', ' Else '' End +  Case When ((i.UPLOAD_DATE Is Null And d.UPLOAD_DATE Is Not Null) Or (i.UPLOAD_DATE Is Not Null And d.UPLOAD_DATE Is Null) Or (i.UPLOAD_DATE Is Not Null And d.UPLOAD_DATE Is Not Null And i.UPLOAD_DATE <> d.UPLOAD_DATE)) Then 'UPLOAD_DATE = ' + Case When d.UPLOAD_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UPLOAD_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.LAST_RESERVE_DATE Is Null And d.LAST_RESERVE_DATE Is Not Null) Or (i.LAST_RESERVE_DATE Is Not Null And d.LAST_RESERVE_DATE Is Null) Or (i.LAST_RESERVE_DATE Is Not Null And d.LAST_RESERVE_DATE Is Not Null And i.LAST_RESERVE_DATE <> d.LAST_RESERVE_DATE)) Then 'LAST_RESERVE_DATE = ' + Case When d.LAST_RESERVE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LAST_RESERVE_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.LFC_CODE Is Null And d.LFC_CODE Is Not Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Not Null And i.LFC_CODE <> d.LFC_CODE)) Then 'LFC_CODE = ' + Case When d.LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LFC_CODE) + '''' End + ', ' Else '' End +  Case When ((i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null And d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null) Or (i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null And d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null) Or (i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null And d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null And i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST <> d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST)) Then 'ADD_CAR_PARK_PRICE_BEFORE_ADJUST = ' + Case When d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST) + '''' End + ', ' Else '' End +  Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When d.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.BATCH_NO Is Null And d.BATCH_NO Is Not Null) Or (i.BATCH_NO Is Not Null And d.BATCH_NO Is Null) Or (i.BATCH_NO Is Not Null And d.BATCH_NO Is Not Null And i.BATCH_NO <> d.BATCH_NO)) Then 'BATCH_NO = ' + Case When d.BATCH_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BATCH_NO) + '''' End + ', ' Else '' End +  Case When ((i.EFFECT_DATE Is Null And d.EFFECT_DATE Is Not Null) Or (i.EFFECT_DATE Is Not Null And d.EFFECT_DATE Is Null) Or (i.EFFECT_DATE Is Not Null And d.EFFECT_DATE Is Not Null And i.EFFECT_DATE <> d.EFFECT_DATE)) Then 'EFFECT_DATE = ' + Case When d.EFFECT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.EFFECT_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PRICE_LIST_NO Is Null And d.PRICE_LIST_NO Is Not Null) Or (i.PRICE_LIST_NO Is Not Null And d.PRICE_LIST_NO Is Null) Or (i.PRICE_LIST_NO Is Not Null And d.PRICE_LIST_NO Is Not Null And i.PRICE_LIST_NO <> d.PRICE_LIST_NO)) Then 'PRICE_LIST_NO = ' + Case When d.PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PRICE_LIST_NO) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.CAR_PARK_ID Is Null And d.CAR_PARK_ID Is Not Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Not Null And i.CAR_PARK_ID <> d.CAR_PARK_ID)) Then 'CAR_PARK_ID = ' + Case When i.CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CAR_PARK_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.MOA_NO Is Null And d.MOA_NO Is Not Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Not Null And i.MOA_NO <> d.MOA_NO)) Then 'MOA_NO = ' + Case When i.MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MOA_NO) + '''' End + ', ' Else '' End +  Case When ((i.STR_CODE Is Null And d.STR_CODE Is Not Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Not Null And i.STR_CODE <> d.STR_CODE)) Then 'STR_CODE = ' + Case When i.STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STR_CODE) + '''' End + ', ' Else '' End +  Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When i.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_NO Is Null And d.CAR_PARK_NO Is Not Null) Or (i.CAR_PARK_NO Is Not Null And d.CAR_PARK_NO Is Null) Or (i.CAR_PARK_NO Is Not Null And d.CAR_PARK_NO Is Not Null And i.CAR_PARK_NO <> d.CAR_PARK_NO)) Then 'CAR_PARK_NO = ' + Case When i.CAR_PARK_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CAR_PARK_NO) + '''' End + ', ' Else '' End +  Case When ((i.HOUSE_NO Is Null And d.HOUSE_NO Is Not Null) Or (i.HOUSE_NO Is Not Null And d.HOUSE_NO Is Null) Or (i.HOUSE_NO Is Not Null And d.HOUSE_NO Is Not Null And i.HOUSE_NO <> d.HOUSE_NO)) Then 'HOUSE_NO = ' + Case When i.HOUSE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.HOUSE_NO) + '''' End + ', ' Else '' End +  Case When ((i.STREET_NO Is Null And d.STREET_NO Is Not Null) Or (i.STREET_NO Is Not Null And d.STREET_NO Is Null) Or (i.STREET_NO Is Not Null And d.STREET_NO Is Not Null And i.STREET_NO <> d.STREET_NO)) Then 'STREET_NO = ' + Case When i.STREET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STREET_NO) + '''' End + ', ' Else '' End +  Case When ((i.PARK_LEVEL Is Null And d.PARK_LEVEL Is Not Null) Or (i.PARK_LEVEL Is Not Null And d.PARK_LEVEL Is Null) Or (i.PARK_LEVEL Is Not Null And d.PARK_LEVEL Is Not Null And i.PARK_LEVEL <> d.PARK_LEVEL)) Then 'PARK_LEVEL = ' + Case When i.PARK_LEVEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PARK_LEVEL) + '''' End + ', ' Else '' End +  Case When ((i.DEV_CODE Is Null And d.DEV_CODE Is Not Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Not Null And i.DEV_CODE <> d.DEV_CODE)) Then 'DEV_CODE = ' + Case When i.DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DEV_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PARK_LIST_PRICE Is Null And d.PARK_LIST_PRICE Is Not Null) Or (i.PARK_LIST_PRICE Is Not Null And d.PARK_LIST_PRICE Is Null) Or (i.PARK_LIST_PRICE Is Not Null And d.PARK_LIST_PRICE Is Not Null And i.PARK_LIST_PRICE <> d.PARK_LIST_PRICE)) Then 'PARK_LIST_PRICE = ' + Case When i.PARK_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PARK_LIST_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When i.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.LF_CODE Is Null And d.LF_CODE Is Not Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Not Null And i.LF_CODE <> d.LF_CODE)) Then 'LF_CODE = ' + Case When i.LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_TYPE_CODE Is Null And d.SALES_TYPE_CODE Is Not Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Not Null And i.SALES_TYPE_CODE <> d.SALES_TYPE_CODE)) Then 'SALES_TYPE_CODE = ' + Case When i.SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_TYPE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_PHASE Is Null And d.CAR_PARK_PHASE Is Not Null) Or (i.CAR_PARK_PHASE Is Not Null And d.CAR_PARK_PHASE Is Null) Or (i.CAR_PARK_PHASE Is Not Null And d.CAR_PARK_PHASE Is Not Null And i.CAR_PARK_PHASE <> d.CAR_PARK_PHASE)) Then 'CAR_PARK_PHASE = ' + Case When i.CAR_PARK_PHASE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CAR_PARK_PHASE) + '''' End + ', ' Else '' End +  Case When ((i.DIST_CODE Is Null And d.DIST_CODE Is Not Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Not Null And i.DIST_CODE <> d.DIST_CODE)) Then 'DIST_CODE = ' + Case When i.DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DIST_CODE) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_DELETED Is Null And d.CAR_PARK_DELETED Is Not Null) Or (i.CAR_PARK_DELETED Is Not Null And d.CAR_PARK_DELETED Is Null) Or (i.CAR_PARK_DELETED Is Not Null And d.CAR_PARK_DELETED Is Not Null And i.CAR_PARK_DELETED <> d.CAR_PARK_DELETED)) Then 'CAR_PARK_DELETED = ' + Case When i.CAR_PARK_DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CAR_PARK_DELETED) + '''' End + ', ' Else '' End +  Case When ((i.UPLOAD_DATE Is Null And d.UPLOAD_DATE Is Not Null) Or (i.UPLOAD_DATE Is Not Null And d.UPLOAD_DATE Is Null) Or (i.UPLOAD_DATE Is Not Null And d.UPLOAD_DATE Is Not Null And i.UPLOAD_DATE <> d.UPLOAD_DATE)) Then 'UPLOAD_DATE = ' + Case When i.UPLOAD_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UPLOAD_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.LAST_RESERVE_DATE Is Null And d.LAST_RESERVE_DATE Is Not Null) Or (i.LAST_RESERVE_DATE Is Not Null And d.LAST_RESERVE_DATE Is Null) Or (i.LAST_RESERVE_DATE Is Not Null And d.LAST_RESERVE_DATE Is Not Null And i.LAST_RESERVE_DATE <> d.LAST_RESERVE_DATE)) Then 'LAST_RESERVE_DATE = ' + Case When i.LAST_RESERVE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LAST_RESERVE_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.LFC_CODE Is Null And d.LFC_CODE Is Not Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Not Null And i.LFC_CODE <> d.LFC_CODE)) Then 'LFC_CODE = ' + Case When i.LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LFC_CODE) + '''' End + ', ' Else '' End +  Case When ((i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null And d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null) Or (i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null And d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null) Or (i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null And d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Not Null And i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST <> d.ADD_CAR_PARK_PRICE_BEFORE_ADJUST)) Then 'ADD_CAR_PARK_PRICE_BEFORE_ADJUST = ' + Case When i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADD_CAR_PARK_PRICE_BEFORE_ADJUST) + '''' End + ', ' Else '' End +  Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When i.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.BATCH_NO Is Null And d.BATCH_NO Is Not Null) Or (i.BATCH_NO Is Not Null And d.BATCH_NO Is Null) Or (i.BATCH_NO Is Not Null And d.BATCH_NO Is Not Null And i.BATCH_NO <> d.BATCH_NO)) Then 'BATCH_NO = ' + Case When i.BATCH_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BATCH_NO) + '''' End + ', ' Else '' End +  Case When ((i.EFFECT_DATE Is Null And d.EFFECT_DATE Is Not Null) Or (i.EFFECT_DATE Is Not Null And d.EFFECT_DATE Is Null) Or (i.EFFECT_DATE Is Not Null And d.EFFECT_DATE Is Not Null And i.EFFECT_DATE <> d.EFFECT_DATE)) Then 'EFFECT_DATE = ' + Case When i.EFFECT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.EFFECT_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PRICE_LIST_NO Is Null And d.PRICE_LIST_NO Is Not Null) Or (i.PRICE_LIST_NO Is Not Null And d.PRICE_LIST_NO Is Null) Or (i.PRICE_LIST_NO Is Not Null And d.PRICE_LIST_NO Is Not Null And i.PRICE_LIST_NO <> d.PRICE_LIST_NO)) Then 'PRICE_LIST_NO = ' + Case When i.PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PRICE_LIST_NO) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), i.CAR_PARK_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.CAR_PARK_ID = d.CAR_PARK_ID And i.PROJECT_ID = d.PROJECT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('CAR_PARK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_NO) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_CODE) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', CAR_PARK_NO = ' + Case When CAR_PARK_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_NO) + '''' End + ', HOUSE_NO = ' + Case When HOUSE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), HOUSE_NO) + '''' End + ', STREET_NO = ' + Case When STREET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STREET_NO) + '''' End + ', PARK_LEVEL = ' + Case When PARK_LEVEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARK_LEVEL) + '''' End + ', DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_CODE) + '''' End + ', PARK_LIST_PRICE = ' + Case When PARK_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARK_LIST_PRICE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''' End + ', CAR_PARK_PHASE = ' + Case When CAR_PARK_PHASE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_PHASE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', CAR_PARK_DELETED = ' + Case When CAR_PARK_DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_DELETED) + '''' End + ', UPLOAD_DATE = ' + Case When UPLOAD_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPLOAD_DATE, 121) + '''' End + ', LAST_RESERVE_DATE = ' + Case When LAST_RESERVE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LAST_RESERVE_DATE, 121) + '''' End + ', LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_CODE) + '''' End + ', ADD_CAR_PARK_PRICE_BEFORE_ADJUST = ' + Case When ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_CAR_PARK_PRICE_BEFORE_ADJUST) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', BATCH_NO = ' + Case When BATCH_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BATCH_NO) + '''' End + ', EFFECT_DATE = ' + Case When EFFECT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EFFECT_DATE, 121) + '''' End + ', PRICE_LIST_NO = ' + Case When PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRICE_LIST_NO) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.CAR_PARK_ID = d.CAR_PARK_ID And i.PROJECT_ID = d.PROJECT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CAR_PARK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_NO) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_CODE) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', CAR_PARK_NO = ' + Case When CAR_PARK_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_NO) + '''' End + ', HOUSE_NO = ' + Case When HOUSE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), HOUSE_NO) + '''' End + ', STREET_NO = ' + Case When STREET_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STREET_NO) + '''' End + ', PARK_LEVEL = ' + Case When PARK_LEVEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARK_LEVEL) + '''' End + ', DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_CODE) + '''' End + ', PARK_LIST_PRICE = ' + Case When PARK_LIST_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARK_LIST_PRICE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''' End + ', CAR_PARK_PHASE = ' + Case When CAR_PARK_PHASE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_PHASE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', CAR_PARK_DELETED = ' + Case When CAR_PARK_DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_DELETED) + '''' End + ', UPLOAD_DATE = ' + Case When UPLOAD_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPLOAD_DATE, 121) + '''' End + ', LAST_RESERVE_DATE = ' + Case When LAST_RESERVE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LAST_RESERVE_DATE, 121) + '''' End + ', LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_CODE) + '''' End + ', ADD_CAR_PARK_PRICE_BEFORE_ADJUST = ' + Case When ADD_CAR_PARK_PRICE_BEFORE_ADJUST Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADD_CAR_PARK_PRICE_BEFORE_ADJUST) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', BATCH_NO = ' + Case When BATCH_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BATCH_NO) + '''' End + ', EFFECT_DATE = ' + Case When EFFECT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EFFECT_DATE, 121) + '''' End + ', PRICE_LIST_NO = ' + Case When PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRICE_LIST_NO) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.CAR_PARK_ID = d.CAR_PARK_ID And i.PROJECT_ID = d.PROJECT_ID)  End
GO

ALTER TABLE [dbo].[CAR_PARK] ENABLE TRIGGER [TG_AUD_CAR_PARK_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_CAR_PARK_LEVEL_OnDeleted]
On [dbo].[CAR_PARK_LEVEL]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('CAR_PARK_LEVEL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_ID) + '''' End + ', LEVEL_DESC = ' + Case When LEVEL_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', LEVEL_ID = ''' + Convert(NVarChar(4000), LEVEL_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[CAR_PARK_LEVEL] ENABLE TRIGGER [TG_AUD_CAR_PARK_LEVEL_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_CAR_PARK_LEVEL_OnInserted]
On [dbo].[CAR_PARK_LEVEL]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('CAR_PARK_LEVEL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LEVEL_ID) + '''' End + ', LEVEL_DESC = ' + Case When LEVEL_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LEVEL_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', LEVEL_ID = ''' + Convert(NVarChar(4000), LEVEL_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[CAR_PARK_LEVEL] ENABLE TRIGGER [TG_AUD_CAR_PARK_LEVEL_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_CAR_PARK_LEVEL_OnUpdated]
On [dbo].[CAR_PARK_LEVEL]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CAR_PARK_LEVEL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.LEVEL_ID Is Null And d.LEVEL_ID Is Not Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Not Null And i.LEVEL_ID <> d.LEVEL_ID)) Then 'LEVEL_ID = ' + Case When d.LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LEVEL_ID) + '''' End + ', ' Else '' End +  Case When ((i.LEVEL_DESC Is Null And d.LEVEL_DESC Is Not Null) Or (i.LEVEL_DESC Is Not Null And d.LEVEL_DESC Is Null) Or (i.LEVEL_DESC Is Not Null And d.LEVEL_DESC Is Not Null And i.LEVEL_DESC <> d.LEVEL_DESC)) Then 'LEVEL_DESC = ' + Case When d.LEVEL_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LEVEL_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.LEVEL_ID Is Null And d.LEVEL_ID Is Not Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Not Null And i.LEVEL_ID <> d.LEVEL_ID)) Then 'LEVEL_ID = ' + Case When i.LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LEVEL_ID) + '''' End + ', ' Else '' End +  Case When ((i.LEVEL_DESC Is Null And d.LEVEL_DESC Is Not Null) Or (i.LEVEL_DESC Is Not Null And d.LEVEL_DESC Is Null) Or (i.LEVEL_DESC Is Not Null And d.LEVEL_DESC Is Not Null And i.LEVEL_DESC <> d.LEVEL_DESC)) Then 'LEVEL_DESC = ' + Case When i.LEVEL_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LEVEL_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', LEVEL_ID = ''' + Convert(NVarChar(4000), i.LEVEL_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.LEVEL_ID = d.LEVEL_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('CAR_PARK_LEVEL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_ID) + '''' End + ', LEVEL_DESC = ' + Case When LEVEL_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', LEVEL_ID = ''' + Convert(NVarChar(4000), LEVEL_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.LEVEL_ID = d.LEVEL_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CAR_PARK_LEVEL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_ID) + '''' End + ', LEVEL_DESC = ' + Case When LEVEL_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', LEVEL_ID = ''' + Convert(NVarChar(4000), LEVEL_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.LEVEL_ID = d.LEVEL_ID)  End
GO

ALTER TABLE [dbo].[CAR_PARK_LEVEL] ENABLE TRIGGER [TG_AUD_CAR_PARK_LEVEL_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_CAR_PARK_SELECTION_OnDeleted]
On [dbo].[CAR_PARK_SELECTION]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('CAR_PARK_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_ID) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPDATE_DATE, 121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_STATUS) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[CAR_PARK_SELECTION] ENABLE TRIGGER [TG_AUD_CAR_PARK_SELECTION_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_CAR_PARK_SELECTION_OnInserted]
On [dbo].[CAR_PARK_SELECTION]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('CAR_PARK_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CAR_PARK_ID) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UPDATE_DATE,121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ORG_STATUS) + '''' End + '', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[CAR_PARK_SELECTION] ENABLE TRIGGER [TG_AUD_CAR_PARK_SELECTION_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_CAR_PARK_SELECTION_OnUpdated]
On [dbo].[CAR_PARK_SELECTION]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CAR_PARK_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.CAR_PARK_ID Is Null And d.CAR_PARK_ID Is Not Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Not Null And i.CAR_PARK_ID <> d.CAR_PARK_ID)) Then 'CAR_PARK_ID = ' + Case When d.CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CAR_PARK_ID) + '''' End + ', ' Else '' End +  Case When ((i.UPDATE_DATE Is Null And d.UPDATE_DATE Is Not Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Not Null And i.UPDATE_DATE <> d.UPDATE_DATE)) Then 'UPDATE_DATE = ' + Case When d.UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UPDATE_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_SEQ Is Null And d.BALLOT_SEQ Is Not Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Not Null And i.BALLOT_SEQ <> d.BALLOT_SEQ)) Then 'BALLOT_SEQ = ' + Case When d.BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.SELECTION_ORDER Is Null And d.SELECTION_ORDER Is Not Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Not Null And i.SELECTION_ORDER <> d.SELECTION_ORDER)) Then 'SELECTION_ORDER = ' + Case When d.SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SELECTION_ORDER) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When d.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.APPROVE_UID Is Null And d.APPROVE_UID Is Not Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Not Null And i.APPROVE_UID <> d.APPROVE_UID)) Then 'APPROVE_UID = ' + Case When d.APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.APPROVE_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.ORG_STATUS Is Null And d.ORG_STATUS Is Not Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Not Null And i.ORG_STATUS <> d.ORG_STATUS)) Then 'ORG_STATUS = ' + Case When d.ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ORG_STATUS) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.CAR_PARK_ID Is Null And d.CAR_PARK_ID Is Not Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Null) Or (i.CAR_PARK_ID Is Not Null And d.CAR_PARK_ID Is Not Null And i.CAR_PARK_ID <> d.CAR_PARK_ID)) Then 'CAR_PARK_ID = ' + Case When i.CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CAR_PARK_ID) + '''' End + ', ' Else '' End +  Case When ((i.UPDATE_DATE Is Null And d.UPDATE_DATE Is Not Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Not Null And i.UPDATE_DATE <> d.UPDATE_DATE)) Then 'UPDATE_DATE = ' + Case When i.UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UPDATE_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_SEQ Is Null And d.BALLOT_SEQ Is Not Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Not Null And i.BALLOT_SEQ <> d.BALLOT_SEQ)) Then 'BALLOT_SEQ = ' + Case When i.BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.SELECTION_ORDER Is Null And d.SELECTION_ORDER Is Not Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Not Null And i.SELECTION_ORDER <> d.SELECTION_ORDER)) Then 'SELECTION_ORDER = ' + Case When i.SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SELECTION_ORDER) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When i.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.APPROVE_UID Is Null And d.APPROVE_UID Is Not Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Not Null And i.APPROVE_UID <> d.APPROVE_UID)) Then 'APPROVE_UID = ' + Case When i.APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.APPROVE_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.ORG_STATUS Is Null And d.ORG_STATUS Is Not Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Not Null And i.ORG_STATUS <> d.ORG_STATUS)) Then 'ORG_STATUS = ' + Case When i.ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ORG_STATUS) + '''' End + ', ' Else '' End)  ChangedValue, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), i.CAR_PARK_ID) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), i.UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.CAR_PARK_ID = d.CAR_PARK_ID And i.UPDATE_DATE = d.UPDATE_DATE And i.PROJECT_ID = d.PROJECT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('CAR_PARK_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_ID) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPDATE_DATE, 121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_STATUS) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.CAR_PARK_ID = d.CAR_PARK_ID And i.UPDATE_DATE = d.UPDATE_DATE And i.PROJECT_ID = d.PROJECT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CAR_PARK_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('CAR_PARK_ID = ' + Case When CAR_PARK_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_ID) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPDATE_DATE, 121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_STATUS) + '''' End + '', 4000), @PROJECT_ID, Left('CAR_PARK_ID = ''' + Convert(NVarChar(4000), CAR_PARK_ID) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.CAR_PARK_ID = d.CAR_PARK_ID And i.UPDATE_DATE = d.UPDATE_DATE And i.PROJECT_ID = d.PROJECT_ID)  End
GO

ALTER TABLE [dbo].[CAR_PARK_SELECTION] ENABLE TRIGGER [TG_AUD_CAR_PARK_SELECTION_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_CHECK_RULE_OnDeleted]
On [dbo].[CHECK_RULE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('CHECK_RULE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FLAT_LIST_PRICE_MIN = ' + Case When FLAT_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_LIST_PRICE_MIN) + '''' End + ', FLAT_LIST_PRICE_MAX = ' + Case When FLAT_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_LIST_PRICE_MAX) + '''' End + ', CAR_PARK_LIST_PRICE_MIN = ' + Case When CAR_PARK_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_LIST_PRICE_MIN) + '''' End + ', CAR_PARK_LIST_PRICE_MAX = ' + Case When CAR_PARK_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_LIST_PRICE_MAX) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', GROSS_AREA_MIN_SM = ' + Case When GROSS_AREA_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MIN_SM) + '''' End + ', GROSS_AREA_MIN_SF = ' + Case When GROSS_AREA_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MIN_SF) + '''' End + ', GROSS_AREA_MAX_SM = ' + Case When GROSS_AREA_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MAX_SM) + '''' End + ', GROSS_AREA_MAX_SF = ' + Case When GROSS_AREA_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MAX_SF) + '''' End + ', USABLE_MIN_SM = ' + Case When USABLE_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MIN_SM) + '''' End + ', USABLE_MIN_SF = ' + Case When USABLE_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MIN_SF) + '''' End + ', USABLE_MAX_SM = ' + Case When USABLE_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MAX_SM) + '''' End + ', USABLE_MAX_SF = ' + Case When USABLE_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MAX_SF) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[CHECK_RULE] ENABLE TRIGGER [TG_AUD_CHECK_RULE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_CHECK_RULE_OnInserted]
On [dbo].[CHECK_RULE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('CHECK_RULE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', FLAT_LIST_PRICE_MIN = ' + Case When FLAT_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FLAT_LIST_PRICE_MIN) + '''' End + ', FLAT_LIST_PRICE_MAX = ' + Case When FLAT_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FLAT_LIST_PRICE_MAX) + '''' End + ', CAR_PARK_LIST_PRICE_MIN = ' + Case When CAR_PARK_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CAR_PARK_LIST_PRICE_MIN) + '''' End + ', CAR_PARK_LIST_PRICE_MAX = ' + Case When CAR_PARK_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CAR_PARK_LIST_PRICE_MAX) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', GROSS_AREA_MIN_SM = ' + Case When GROSS_AREA_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),GROSS_AREA_MIN_SM) + '''' End + ', GROSS_AREA_MIN_SF = ' + Case When GROSS_AREA_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),GROSS_AREA_MIN_SF) + '''' End + ', GROSS_AREA_MAX_SM = ' + Case When GROSS_AREA_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),GROSS_AREA_MAX_SM) + '''' End + ', GROSS_AREA_MAX_SF = ' + Case When GROSS_AREA_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),GROSS_AREA_MAX_SF) + '''' End + ', USABLE_MIN_SM = ' + Case When USABLE_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),USABLE_MIN_SM) + '''' End + ', USABLE_MIN_SF = ' + Case When USABLE_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),USABLE_MIN_SF) + '''' End + ', USABLE_MAX_SM = ' + Case When USABLE_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),USABLE_MAX_SM) + '''' End + ', USABLE_MAX_SF = ' + Case When USABLE_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),USABLE_MAX_SF) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[CHECK_RULE] ENABLE TRIGGER [TG_AUD_CHECK_RULE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_CHECK_RULE_OnUpdated]
On [dbo].[CHECK_RULE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CHECK_RULE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FLAT_LIST_PRICE_MIN Is Null And d.FLAT_LIST_PRICE_MIN Is Not Null) Or (i.FLAT_LIST_PRICE_MIN Is Not Null And d.FLAT_LIST_PRICE_MIN Is Null) Or (i.FLAT_LIST_PRICE_MIN Is Not Null And d.FLAT_LIST_PRICE_MIN Is Not Null And i.FLAT_LIST_PRICE_MIN <> d.FLAT_LIST_PRICE_MIN)) Then 'FLAT_LIST_PRICE_MIN = ' + Case When d.FLAT_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FLAT_LIST_PRICE_MIN) + '''' End + ', ' Else '' End +  Case When ((i.FLAT_LIST_PRICE_MAX Is Null And d.FLAT_LIST_PRICE_MAX Is Not Null) Or (i.FLAT_LIST_PRICE_MAX Is Not Null And d.FLAT_LIST_PRICE_MAX Is Null) Or (i.FLAT_LIST_PRICE_MAX Is Not Null And d.FLAT_LIST_PRICE_MAX Is Not Null And i.FLAT_LIST_PRICE_MAX <> d.FLAT_LIST_PRICE_MAX)) Then 'FLAT_LIST_PRICE_MAX = ' + Case When d.FLAT_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FLAT_LIST_PRICE_MAX) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_LIST_PRICE_MIN Is Null And d.CAR_PARK_LIST_PRICE_MIN Is Not Null) Or (i.CAR_PARK_LIST_PRICE_MIN Is Not Null And d.CAR_PARK_LIST_PRICE_MIN Is Null) Or (i.CAR_PARK_LIST_PRICE_MIN Is Not Null And d.CAR_PARK_LIST_PRICE_MIN Is Not Null And i.CAR_PARK_LIST_PRICE_MIN <> d.CAR_PARK_LIST_PRICE_MIN)) Then 'CAR_PARK_LIST_PRICE_MIN = ' + Case When d.CAR_PARK_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CAR_PARK_LIST_PRICE_MIN) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_LIST_PRICE_MAX Is Null And d.CAR_PARK_LIST_PRICE_MAX Is Not Null) Or (i.CAR_PARK_LIST_PRICE_MAX Is Not Null And d.CAR_PARK_LIST_PRICE_MAX Is Null) Or (i.CAR_PARK_LIST_PRICE_MAX Is Not Null And d.CAR_PARK_LIST_PRICE_MAX Is Not Null And i.CAR_PARK_LIST_PRICE_MAX <> d.CAR_PARK_LIST_PRICE_MAX)) Then 'CAR_PARK_LIST_PRICE_MAX = ' + Case When d.CAR_PARK_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CAR_PARK_LIST_PRICE_MAX) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MIN_SM Is Null And d.GROSS_AREA_MIN_SM Is Not Null) Or (i.GROSS_AREA_MIN_SM Is Not Null And d.GROSS_AREA_MIN_SM Is Null) Or (i.GROSS_AREA_MIN_SM Is Not Null And d.GROSS_AREA_MIN_SM Is Not Null And i.GROSS_AREA_MIN_SM <> d.GROSS_AREA_MIN_SM)) Then 'GROSS_AREA_MIN_SM = ' + Case When d.GROSS_AREA_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.GROSS_AREA_MIN_SM) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MIN_SF Is Null And d.GROSS_AREA_MIN_SF Is Not Null) Or (i.GROSS_AREA_MIN_SF Is Not Null And d.GROSS_AREA_MIN_SF Is Null) Or (i.GROSS_AREA_MIN_SF Is Not Null And d.GROSS_AREA_MIN_SF Is Not Null And i.GROSS_AREA_MIN_SF <> d.GROSS_AREA_MIN_SF)) Then 'GROSS_AREA_MIN_SF = ' + Case When d.GROSS_AREA_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.GROSS_AREA_MIN_SF) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MAX_SM Is Null And d.GROSS_AREA_MAX_SM Is Not Null) Or (i.GROSS_AREA_MAX_SM Is Not Null And d.GROSS_AREA_MAX_SM Is Null) Or (i.GROSS_AREA_MAX_SM Is Not Null And d.GROSS_AREA_MAX_SM Is Not Null And i.GROSS_AREA_MAX_SM <> d.GROSS_AREA_MAX_SM)) Then 'GROSS_AREA_MAX_SM = ' + Case When d.GROSS_AREA_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.GROSS_AREA_MAX_SM) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MAX_SF Is Null And d.GROSS_AREA_MAX_SF Is Not Null) Or (i.GROSS_AREA_MAX_SF Is Not Null And d.GROSS_AREA_MAX_SF Is Null) Or (i.GROSS_AREA_MAX_SF Is Not Null And d.GROSS_AREA_MAX_SF Is Not Null And i.GROSS_AREA_MAX_SF <> d.GROSS_AREA_MAX_SF)) Then 'GROSS_AREA_MAX_SF = ' + Case When d.GROSS_AREA_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.GROSS_AREA_MAX_SF) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MIN_SM Is Null And d.USABLE_MIN_SM Is Not Null) Or (i.USABLE_MIN_SM Is Not Null And d.USABLE_MIN_SM Is Null) Or (i.USABLE_MIN_SM Is Not Null And d.USABLE_MIN_SM Is Not Null And i.USABLE_MIN_SM <> d.USABLE_MIN_SM)) Then 'USABLE_MIN_SM = ' + Case When d.USABLE_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.USABLE_MIN_SM) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MIN_SF Is Null And d.USABLE_MIN_SF Is Not Null) Or (i.USABLE_MIN_SF Is Not Null And d.USABLE_MIN_SF Is Null) Or (i.USABLE_MIN_SF Is Not Null And d.USABLE_MIN_SF Is Not Null And i.USABLE_MIN_SF <> d.USABLE_MIN_SF)) Then 'USABLE_MIN_SF = ' + Case When d.USABLE_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.USABLE_MIN_SF) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MAX_SM Is Null And d.USABLE_MAX_SM Is Not Null) Or (i.USABLE_MAX_SM Is Not Null And d.USABLE_MAX_SM Is Null) Or (i.USABLE_MAX_SM Is Not Null And d.USABLE_MAX_SM Is Not Null And i.USABLE_MAX_SM <> d.USABLE_MAX_SM)) Then 'USABLE_MAX_SM = ' + Case When d.USABLE_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.USABLE_MAX_SM) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MAX_SF Is Null And d.USABLE_MAX_SF Is Not Null) Or (i.USABLE_MAX_SF Is Not Null And d.USABLE_MAX_SF Is Null) Or (i.USABLE_MAX_SF Is Not Null And d.USABLE_MAX_SF Is Not Null And i.USABLE_MAX_SF <> d.USABLE_MAX_SF)) Then 'USABLE_MAX_SF = ' + Case When d.USABLE_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.USABLE_MAX_SF) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FLAT_LIST_PRICE_MIN Is Null And d.FLAT_LIST_PRICE_MIN Is Not Null) Or (i.FLAT_LIST_PRICE_MIN Is Not Null And d.FLAT_LIST_PRICE_MIN Is Null) Or (i.FLAT_LIST_PRICE_MIN Is Not Null And d.FLAT_LIST_PRICE_MIN Is Not Null And i.FLAT_LIST_PRICE_MIN <> d.FLAT_LIST_PRICE_MIN)) Then 'FLAT_LIST_PRICE_MIN = ' + Case When i.FLAT_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FLAT_LIST_PRICE_MIN) + '''' End + ', ' Else '' End +  Case When ((i.FLAT_LIST_PRICE_MAX Is Null And d.FLAT_LIST_PRICE_MAX Is Not Null) Or (i.FLAT_LIST_PRICE_MAX Is Not Null And d.FLAT_LIST_PRICE_MAX Is Null) Or (i.FLAT_LIST_PRICE_MAX Is Not Null And d.FLAT_LIST_PRICE_MAX Is Not Null And i.FLAT_LIST_PRICE_MAX <> d.FLAT_LIST_PRICE_MAX)) Then 'FLAT_LIST_PRICE_MAX = ' + Case When i.FLAT_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FLAT_LIST_PRICE_MAX) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_LIST_PRICE_MIN Is Null And d.CAR_PARK_LIST_PRICE_MIN Is Not Null) Or (i.CAR_PARK_LIST_PRICE_MIN Is Not Null And d.CAR_PARK_LIST_PRICE_MIN Is Null) Or (i.CAR_PARK_LIST_PRICE_MIN Is Not Null And d.CAR_PARK_LIST_PRICE_MIN Is Not Null And i.CAR_PARK_LIST_PRICE_MIN <> d.CAR_PARK_LIST_PRICE_MIN)) Then 'CAR_PARK_LIST_PRICE_MIN = ' + Case When i.CAR_PARK_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CAR_PARK_LIST_PRICE_MIN) + '''' End + ', ' Else '' End +  Case When ((i.CAR_PARK_LIST_PRICE_MAX Is Null And d.CAR_PARK_LIST_PRICE_MAX Is Not Null) Or (i.CAR_PARK_LIST_PRICE_MAX Is Not Null And d.CAR_PARK_LIST_PRICE_MAX Is Null) Or (i.CAR_PARK_LIST_PRICE_MAX Is Not Null And d.CAR_PARK_LIST_PRICE_MAX Is Not Null And i.CAR_PARK_LIST_PRICE_MAX <> d.CAR_PARK_LIST_PRICE_MAX)) Then 'CAR_PARK_LIST_PRICE_MAX = ' + Case When i.CAR_PARK_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CAR_PARK_LIST_PRICE_MAX) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MIN_SM Is Null And d.GROSS_AREA_MIN_SM Is Not Null) Or (i.GROSS_AREA_MIN_SM Is Not Null And d.GROSS_AREA_MIN_SM Is Null) Or (i.GROSS_AREA_MIN_SM Is Not Null And d.GROSS_AREA_MIN_SM Is Not Null And i.GROSS_AREA_MIN_SM <> d.GROSS_AREA_MIN_SM)) Then 'GROSS_AREA_MIN_SM = ' + Case When i.GROSS_AREA_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.GROSS_AREA_MIN_SM) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MIN_SF Is Null And d.GROSS_AREA_MIN_SF Is Not Null) Or (i.GROSS_AREA_MIN_SF Is Not Null And d.GROSS_AREA_MIN_SF Is Null) Or (i.GROSS_AREA_MIN_SF Is Not Null And d.GROSS_AREA_MIN_SF Is Not Null And i.GROSS_AREA_MIN_SF <> d.GROSS_AREA_MIN_SF)) Then 'GROSS_AREA_MIN_SF = ' + Case When i.GROSS_AREA_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.GROSS_AREA_MIN_SF) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MAX_SM Is Null And d.GROSS_AREA_MAX_SM Is Not Null) Or (i.GROSS_AREA_MAX_SM Is Not Null And d.GROSS_AREA_MAX_SM Is Null) Or (i.GROSS_AREA_MAX_SM Is Not Null And d.GROSS_AREA_MAX_SM Is Not Null And i.GROSS_AREA_MAX_SM <> d.GROSS_AREA_MAX_SM)) Then 'GROSS_AREA_MAX_SM = ' + Case When i.GROSS_AREA_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.GROSS_AREA_MAX_SM) + '''' End + ', ' Else '' End +  Case When ((i.GROSS_AREA_MAX_SF Is Null And d.GROSS_AREA_MAX_SF Is Not Null) Or (i.GROSS_AREA_MAX_SF Is Not Null And d.GROSS_AREA_MAX_SF Is Null) Or (i.GROSS_AREA_MAX_SF Is Not Null And d.GROSS_AREA_MAX_SF Is Not Null And i.GROSS_AREA_MAX_SF <> d.GROSS_AREA_MAX_SF)) Then 'GROSS_AREA_MAX_SF = ' + Case When i.GROSS_AREA_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.GROSS_AREA_MAX_SF) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MIN_SM Is Null And d.USABLE_MIN_SM Is Not Null) Or (i.USABLE_MIN_SM Is Not Null And d.USABLE_MIN_SM Is Null) Or (i.USABLE_MIN_SM Is Not Null And d.USABLE_MIN_SM Is Not Null And i.USABLE_MIN_SM <> d.USABLE_MIN_SM)) Then 'USABLE_MIN_SM = ' + Case When i.USABLE_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.USABLE_MIN_SM) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MIN_SF Is Null And d.USABLE_MIN_SF Is Not Null) Or (i.USABLE_MIN_SF Is Not Null And d.USABLE_MIN_SF Is Null) Or (i.USABLE_MIN_SF Is Not Null And d.USABLE_MIN_SF Is Not Null And i.USABLE_MIN_SF <> d.USABLE_MIN_SF)) Then 'USABLE_MIN_SF = ' + Case When i.USABLE_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.USABLE_MIN_SF) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MAX_SM Is Null And d.USABLE_MAX_SM Is Not Null) Or (i.USABLE_MAX_SM Is Not Null And d.USABLE_MAX_SM Is Null) Or (i.USABLE_MAX_SM Is Not Null And d.USABLE_MAX_SM Is Not Null And i.USABLE_MAX_SM <> d.USABLE_MAX_SM)) Then 'USABLE_MAX_SM = ' + Case When i.USABLE_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.USABLE_MAX_SM) + '''' End + ', ' Else '' End +  Case When ((i.USABLE_MAX_SF Is Null And d.USABLE_MAX_SF Is Not Null) Or (i.USABLE_MAX_SF Is Not Null And d.USABLE_MAX_SF Is Null) Or (i.USABLE_MAX_SF Is Not Null And d.USABLE_MAX_SF Is Not Null And i.USABLE_MAX_SF <> d.USABLE_MAX_SF)) Then 'USABLE_MAX_SF = ' + Case When i.USABLE_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.USABLE_MAX_SF) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('CHECK_RULE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FLAT_LIST_PRICE_MIN = ' + Case When FLAT_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_LIST_PRICE_MIN) + '''' End + ', FLAT_LIST_PRICE_MAX = ' + Case When FLAT_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_LIST_PRICE_MAX) + '''' End + ', CAR_PARK_LIST_PRICE_MIN = ' + Case When CAR_PARK_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_LIST_PRICE_MIN) + '''' End + ', CAR_PARK_LIST_PRICE_MAX = ' + Case When CAR_PARK_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_LIST_PRICE_MAX) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', GROSS_AREA_MIN_SM = ' + Case When GROSS_AREA_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MIN_SM) + '''' End + ', GROSS_AREA_MIN_SF = ' + Case When GROSS_AREA_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MIN_SF) + '''' End + ', GROSS_AREA_MAX_SM = ' + Case When GROSS_AREA_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MAX_SM) + '''' End + ', GROSS_AREA_MAX_SF = ' + Case When GROSS_AREA_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MAX_SF) + '''' End + ', USABLE_MIN_SM = ' + Case When USABLE_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MIN_SM) + '''' End + ', USABLE_MIN_SF = ' + Case When USABLE_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MIN_SF) + '''' End + ', USABLE_MAX_SM = ' + Case When USABLE_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MAX_SM) + '''' End + ', USABLE_MAX_SF = ' + Case When USABLE_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MAX_SF) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CHECK_RULE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FLAT_LIST_PRICE_MIN = ' + Case When FLAT_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_LIST_PRICE_MIN) + '''' End + ', FLAT_LIST_PRICE_MAX = ' + Case When FLAT_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_LIST_PRICE_MAX) + '''' End + ', CAR_PARK_LIST_PRICE_MIN = ' + Case When CAR_PARK_LIST_PRICE_MIN Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_LIST_PRICE_MIN) + '''' End + ', CAR_PARK_LIST_PRICE_MAX = ' + Case When CAR_PARK_LIST_PRICE_MAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CAR_PARK_LIST_PRICE_MAX) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', GROSS_AREA_MIN_SM = ' + Case When GROSS_AREA_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MIN_SM) + '''' End + ', GROSS_AREA_MIN_SF = ' + Case When GROSS_AREA_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MIN_SF) + '''' End + ', GROSS_AREA_MAX_SM = ' + Case When GROSS_AREA_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MAX_SM) + '''' End + ', GROSS_AREA_MAX_SF = ' + Case When GROSS_AREA_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GROSS_AREA_MAX_SF) + '''' End + ', USABLE_MIN_SM = ' + Case When USABLE_MIN_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MIN_SM) + '''' End + ', USABLE_MIN_SF = ' + Case When USABLE_MIN_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MIN_SF) + '''' End + ', USABLE_MAX_SM = ' + Case When USABLE_MAX_SM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MAX_SM) + '''' End + ', USABLE_MAX_SF = ' + Case When USABLE_MAX_SF Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), USABLE_MAX_SF) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID)  End
GO

ALTER TABLE [dbo].[CHECK_RULE] ENABLE TRIGGER [TG_AUD_CHECK_RULE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_COLOR_MAP_OnDeleted]
On [dbo].[COLOR_MAP]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('COLOR_MAP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('COLOR_CODE = ' + Case When COLOR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLOR_CODE) + '''' End + ', COLOR_NAME = ' + Case When COLOR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLOR_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('COLOR_CODE = ''' + Convert(NVarChar(4000), COLOR_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[COLOR_MAP] ENABLE TRIGGER [TG_AUD_COLOR_MAP_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_COLOR_MAP_OnInserted]
On [dbo].[COLOR_MAP]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('COLOR_MAP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('COLOR_CODE = ' + Case When COLOR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COLOR_CODE) + '''' End + ', COLOR_NAME = ' + Case When COLOR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COLOR_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('COLOR_CODE = ''' + Convert(NVarChar(4000), COLOR_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[COLOR_MAP] ENABLE TRIGGER [TG_AUD_COLOR_MAP_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_COLOR_MAP_OnUpdated]
On [dbo].[COLOR_MAP]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('COLOR_MAP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.COLOR_CODE Is Null And d.COLOR_CODE Is Not Null) Or (i.COLOR_CODE Is Not Null And d.COLOR_CODE Is Null) Or (i.COLOR_CODE Is Not Null And d.COLOR_CODE Is Not Null And i.COLOR_CODE <> d.COLOR_CODE)) Then 'COLOR_CODE = ' + Case When d.COLOR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COLOR_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COLOR_NAME Is Null And d.COLOR_NAME Is Not Null) Or (i.COLOR_NAME Is Not Null And d.COLOR_NAME Is Null) Or (i.COLOR_NAME Is Not Null And d.COLOR_NAME Is Not Null And i.COLOR_NAME <> d.COLOR_NAME)) Then 'COLOR_NAME = ' + Case When d.COLOR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COLOR_NAME) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.COLOR_CODE Is Null And d.COLOR_CODE Is Not Null) Or (i.COLOR_CODE Is Not Null And d.COLOR_CODE Is Null) Or (i.COLOR_CODE Is Not Null And d.COLOR_CODE Is Not Null And i.COLOR_CODE <> d.COLOR_CODE)) Then 'COLOR_CODE = ' + Case When i.COLOR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COLOR_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COLOR_NAME Is Null And d.COLOR_NAME Is Not Null) Or (i.COLOR_NAME Is Not Null And d.COLOR_NAME Is Null) Or (i.COLOR_NAME Is Not Null And d.COLOR_NAME Is Not Null And i.COLOR_NAME <> d.COLOR_NAME)) Then 'COLOR_NAME = ' + Case When i.COLOR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COLOR_NAME) + '''' End + ', ' Else '' End)  ChangedValue, Left('COLOR_CODE = ''' + Convert(NVarChar(4000), i.COLOR_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.COLOR_CODE = d.COLOR_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('COLOR_MAP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('COLOR_CODE = ' + Case When COLOR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLOR_CODE) + '''' End + ', COLOR_NAME = ' + Case When COLOR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLOR_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('COLOR_CODE = ''' + Convert(NVarChar(4000), COLOR_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.COLOR_CODE = d.COLOR_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('COLOR_MAP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('COLOR_CODE = ' + Case When COLOR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLOR_CODE) + '''' End + ', COLOR_NAME = ' + Case When COLOR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLOR_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('COLOR_CODE = ''' + Convert(NVarChar(4000), COLOR_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.COLOR_CODE = d.COLOR_CODE)  End
GO

ALTER TABLE [dbo].[COLOR_MAP] ENABLE TRIGGER [TG_AUD_COLOR_MAP_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_COLOR_SETUP_OnDeleted]
On [dbo].[COLOR_SETUP]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('COLOR_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SOLD_COLOR = ' + Case When SOLD_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SOLD_COLOR) + '''' End + ', AVAIL_COLOR = ' + Case When AVAIL_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AVAIL_COLOR) + '''' End + ', RES_COLOR = ' + Case When RES_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RES_COLOR) + '''' End + ', COL_HDR_COLOR = ' + Case When COL_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COL_HDR_COLOR) + '''' End + ', ROW_HDR_COLOR = ' + Case When ROW_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ROW_HDR_COLOR) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[COLOR_SETUP] ENABLE TRIGGER [TG_AUD_COLOR_SETUP_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_COLOR_SETUP_OnInserted]
On [dbo].[COLOR_SETUP]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('COLOR_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SOLD_COLOR = ' + Case When SOLD_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SOLD_COLOR) + '''' End + ', AVAIL_COLOR = ' + Case When AVAIL_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AVAIL_COLOR) + '''' End + ', RES_COLOR = ' + Case When RES_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RES_COLOR) + '''' End + ', COL_HDR_COLOR = ' + Case When COL_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COL_HDR_COLOR) + '''' End + ', ROW_HDR_COLOR = ' + Case When ROW_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ROW_HDR_COLOR) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[COLOR_SETUP] ENABLE TRIGGER [TG_AUD_COLOR_SETUP_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_COLOR_SETUP_OnUpdated]
On [dbo].[COLOR_SETUP]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('COLOR_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SOLD_COLOR = ' + Case When SOLD_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SOLD_COLOR) + '''' End + ', AVAIL_COLOR = ' + Case When AVAIL_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AVAIL_COLOR) + '''' End + ', RES_COLOR = ' + Case When RES_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RES_COLOR) + '''' End + ', COL_HDR_COLOR = ' + Case When COL_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COL_HDR_COLOR) + '''' End + ', ROW_HDR_COLOR = ' + Case When ROW_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ROW_HDR_COLOR) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
			From Deleted
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('COLOR_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SOLD_COLOR = ' + Case When SOLD_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SOLD_COLOR) + '''' End + ', AVAIL_COLOR = ' + Case When AVAIL_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AVAIL_COLOR) + '''' End + ', RES_COLOR = ' + Case When RES_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RES_COLOR) + '''' End + ', COL_HDR_COLOR = ' + Case When COL_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COL_HDR_COLOR) + '''' End + ', ROW_HDR_COLOR = ' + Case When ROW_HDR_COLOR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ROW_HDR_COLOR) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000)
				From Inserted  End
GO

ALTER TABLE [dbo].[COLOR_SETUP] ENABLE TRIGGER [TG_AUD_COLOR_SETUP_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_COUNTRY_OnDeleted]
On [dbo].[COUNTRY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('COUNTRY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''' End + ', COUNTRY_DESC = ' + Case When COUNTRY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('COUNTRY_CODE = ''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[COUNTRY] ENABLE TRIGGER [TG_AUD_COUNTRY_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_COUNTRY_OnInserted]
On [dbo].[COUNTRY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('COUNTRY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COUNTRY_CODE) + '''' End + ', COUNTRY_DESC = ' + Case When COUNTRY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COUNTRY_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('COUNTRY_CODE = ''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[COUNTRY] ENABLE TRIGGER [TG_AUD_COUNTRY_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_COUNTRY_OnUpdated]
On [dbo].[COUNTRY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('COUNTRY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.COUNTRY_CODE Is Null And d.COUNTRY_CODE Is Not Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Not Null And i.COUNTRY_CODE <> d.COUNTRY_CODE)) Then 'COUNTRY_CODE = ' + Case When d.COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COUNTRY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COUNTRY_DESC Is Null And d.COUNTRY_DESC Is Not Null) Or (i.COUNTRY_DESC Is Not Null And d.COUNTRY_DESC Is Null) Or (i.COUNTRY_DESC Is Not Null And d.COUNTRY_DESC Is Not Null And i.COUNTRY_DESC <> d.COUNTRY_DESC)) Then 'COUNTRY_DESC = ' + Case When d.COUNTRY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COUNTRY_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.COUNTRY_CODE Is Null And d.COUNTRY_CODE Is Not Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Null) Or (i.COUNTRY_CODE Is Not Null And d.COUNTRY_CODE Is Not Null And i.COUNTRY_CODE <> d.COUNTRY_CODE)) Then 'COUNTRY_CODE = ' + Case When i.COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COUNTRY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COUNTRY_DESC Is Null And d.COUNTRY_DESC Is Not Null) Or (i.COUNTRY_DESC Is Not Null And d.COUNTRY_DESC Is Null) Or (i.COUNTRY_DESC Is Not Null And d.COUNTRY_DESC Is Not Null And i.COUNTRY_DESC <> d.COUNTRY_DESC)) Then 'COUNTRY_DESC = ' + Case When i.COUNTRY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COUNTRY_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('COUNTRY_CODE = ''' + Convert(NVarChar(4000), i.COUNTRY_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.COUNTRY_CODE = d.COUNTRY_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('COUNTRY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''' End + ', COUNTRY_DESC = ' + Case When COUNTRY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('COUNTRY_CODE = ''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.COUNTRY_CODE = d.COUNTRY_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('COUNTRY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('COUNTRY_CODE = ' + Case When COUNTRY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''' End + ', COUNTRY_DESC = ' + Case When COUNTRY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('COUNTRY_CODE = ''' + Convert(NVarChar(4000), COUNTRY_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.COUNTRY_CODE = d.COUNTRY_CODE)  End
GO

ALTER TABLE [dbo].[COUNTRY] ENABLE TRIGGER [TG_AUD_COUNTRY_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_CREDIT_CARD_TYPE_OnDeleted]
On [dbo].[CREDIT_CARD_TYPE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('CREDIT_CARD_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('Credit_Card_Type = ' + Case When Credit_Card_Type Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Credit_Card_Type) + '''' End + ', Credit_Card_Type_Name = ' + Case When Credit_Card_Type_Name Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Credit_Card_Type_Name) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('Credit_Card_Type = ''' + Convert(NVarChar(4000), Credit_Card_Type) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[CREDIT_CARD_TYPE] ENABLE TRIGGER [TG_AUD_CREDIT_CARD_TYPE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_CREDIT_CARD_TYPE_OnInserted]
On [dbo].[CREDIT_CARD_TYPE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('CREDIT_CARD_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('Credit_Card_Type = ' + Case When Credit_Card_Type Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Credit_Card_Type) + '''' End + ', Credit_Card_Type_Name = ' + Case When Credit_Card_Type_Name Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Credit_Card_Type_Name) + '''' End + '', 4000), @PROJECT_ID, Left('Credit_Card_Type = ''' + Convert(NVarChar(4000), Credit_Card_Type) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[CREDIT_CARD_TYPE] ENABLE TRIGGER [TG_AUD_CREDIT_CARD_TYPE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_CREDIT_CARD_TYPE_OnUpdated]
On [dbo].[CREDIT_CARD_TYPE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CREDIT_CARD_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.Credit_Card_Type Is Null And d.Credit_Card_Type Is Not Null) Or (i.Credit_Card_Type Is Not Null And d.Credit_Card_Type Is Null) Or (i.Credit_Card_Type Is Not Null And d.Credit_Card_Type Is Not Null And i.Credit_Card_Type <> d.Credit_Card_Type)) Then 'Credit_Card_Type = ' + Case When d.Credit_Card_Type Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Credit_Card_Type) + '''' End + ', ' Else '' End +  Case When ((i.Credit_Card_Type_Name Is Null And d.Credit_Card_Type_Name Is Not Null) Or (i.Credit_Card_Type_Name Is Not Null And d.Credit_Card_Type_Name Is Null) Or (i.Credit_Card_Type_Name Is Not Null And d.Credit_Card_Type_Name Is Not Null And i.Credit_Card_Type_Name <> d.Credit_Card_Type_Name)) Then 'Credit_Card_Type_Name = ' + Case When d.Credit_Card_Type_Name Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Credit_Card_Type_Name) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.Credit_Card_Type Is Null And d.Credit_Card_Type Is Not Null) Or (i.Credit_Card_Type Is Not Null And d.Credit_Card_Type Is Null) Or (i.Credit_Card_Type Is Not Null And d.Credit_Card_Type Is Not Null And i.Credit_Card_Type <> d.Credit_Card_Type)) Then 'Credit_Card_Type = ' + Case When i.Credit_Card_Type Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Credit_Card_Type) + '''' End + ', ' Else '' End +  Case When ((i.Credit_Card_Type_Name Is Null And d.Credit_Card_Type_Name Is Not Null) Or (i.Credit_Card_Type_Name Is Not Null And d.Credit_Card_Type_Name Is Null) Or (i.Credit_Card_Type_Name Is Not Null And d.Credit_Card_Type_Name Is Not Null And i.Credit_Card_Type_Name <> d.Credit_Card_Type_Name)) Then 'Credit_Card_Type_Name = ' + Case When i.Credit_Card_Type_Name Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Credit_Card_Type_Name) + '''' End + ', ' Else '' End)  ChangedValue, Left('Credit_Card_Type = ''' + Convert(NVarChar(4000), i.Credit_Card_Type) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.Credit_Card_Type = d.Credit_Card_Type
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('CREDIT_CARD_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('Credit_Card_Type = ' + Case When Credit_Card_Type Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Credit_Card_Type) + '''' End + ', Credit_Card_Type_Name = ' + Case When Credit_Card_Type_Name Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Credit_Card_Type_Name) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('Credit_Card_Type = ''' + Convert(NVarChar(4000), Credit_Card_Type) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.Credit_Card_Type = d.Credit_Card_Type
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CREDIT_CARD_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('Credit_Card_Type = ' + Case When Credit_Card_Type Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Credit_Card_Type) + '''' End + ', Credit_Card_Type_Name = ' + Case When Credit_Card_Type_Name Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Credit_Card_Type_Name) + '''' End + '', 4000), @PROJECT_ID, Left('Credit_Card_Type = ''' + Convert(NVarChar(4000), Credit_Card_Type) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.Credit_Card_Type = d.Credit_Card_Type)  End
GO

ALTER TABLE [dbo].[CREDIT_CARD_TYPE] ENABLE TRIGGER [TG_AUD_CREDIT_CARD_TYPE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_CURRENCY_OnDeleted]
On [dbo].[CURRENCY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('CURRENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CURR_DESC = ' + Case When CURR_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_DESC) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', SETUP_DATE = ' + Case When SETUP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SETUP_DATE, 121) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('CURR_ID = ''' + Convert(NVarChar(4000), CURR_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[CURRENCY] ENABLE TRIGGER [TG_AUD_CURRENCY_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_CURRENCY_OnInserted]
On [dbo].[CURRENCY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('CURRENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', CURR_DESC = ' + Case When CURR_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_DESC) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CURR_RATE) + '''' End + ', SETUP_DATE = ' + Case When SETUP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SETUP_DATE,121) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('CURR_ID = ''' + Convert(NVarChar(4000), CURR_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[CURRENCY] ENABLE TRIGGER [TG_AUD_CURRENCY_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_CURRENCY_OnUpdated]
On [dbo].[CURRENCY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CURRENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When d.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_DESC Is Null And d.CURR_DESC Is Not Null) Or (i.CURR_DESC Is Not Null And d.CURR_DESC Is Null) Or (i.CURR_DESC Is Not Null And d.CURR_DESC Is Not Null And i.CURR_DESC <> d.CURR_DESC)) Then 'CURR_DESC = ' + Case When d.CURR_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_DESC) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When d.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.SETUP_DATE Is Null And d.SETUP_DATE Is Not Null) Or (i.SETUP_DATE Is Not Null And d.SETUP_DATE Is Null) Or (i.SETUP_DATE Is Not Null And d.SETUP_DATE Is Not Null And i.SETUP_DATE <> d.SETUP_DATE)) Then 'SETUP_DATE = ' + Case When d.SETUP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SETUP_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.CURR_ID Is Null And d.CURR_ID Is Not Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Null) Or (i.CURR_ID Is Not Null And d.CURR_ID Is Not Null And i.CURR_ID <> d.CURR_ID)) Then 'CURR_ID = ' + Case When i.CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CURR_DESC Is Null And d.CURR_DESC Is Not Null) Or (i.CURR_DESC Is Not Null And d.CURR_DESC Is Null) Or (i.CURR_DESC Is Not Null And d.CURR_DESC Is Not Null And i.CURR_DESC <> d.CURR_DESC)) Then 'CURR_DESC = ' + Case When i.CURR_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_DESC) + '''' End + ', ' Else '' End +  Case When ((i.CURR_RATE Is Null And d.CURR_RATE Is Not Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Null) Or (i.CURR_RATE Is Not Null And d.CURR_RATE Is Not Null And i.CURR_RATE <> d.CURR_RATE)) Then 'CURR_RATE = ' + Case When i.CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CURR_RATE) + '''' End + ', ' Else '' End +  Case When ((i.SETUP_DATE Is Null And d.SETUP_DATE Is Not Null) Or (i.SETUP_DATE Is Not Null And d.SETUP_DATE Is Null) Or (i.SETUP_DATE Is Not Null And d.SETUP_DATE Is Not Null And i.SETUP_DATE <> d.SETUP_DATE)) Then 'SETUP_DATE = ' + Case When i.SETUP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SETUP_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End)  ChangedValue, Left('CURR_ID = ''' + Convert(NVarChar(4000), i.CURR_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.CURR_ID = d.CURR_ID And i.PROJECT_ID = d.PROJECT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('CURRENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CURR_DESC = ' + Case When CURR_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_DESC) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', SETUP_DATE = ' + Case When SETUP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SETUP_DATE, 121) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('CURR_ID = ''' + Convert(NVarChar(4000), CURR_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.CURR_ID = d.CURR_ID And i.PROJECT_ID = d.PROJECT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('CURRENCY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('CURR_ID = ' + Case When CURR_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CURR_DESC = ' + Case When CURR_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_DESC) + '''' End + ', CURR_RATE = ' + Case When CURR_RATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CURR_RATE) + '''' End + ', SETUP_DATE = ' + Case When SETUP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SETUP_DATE, 121) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('CURR_ID = ''' + Convert(NVarChar(4000), CURR_ID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.CURR_ID = d.CURR_ID And i.PROJECT_ID = d.PROJECT_ID)  End
GO

ALTER TABLE [dbo].[CURRENCY] ENABLE TRIGGER [TG_AUD_CURRENCY_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_DEVELOPMENT_OnDeleted]
On [dbo].[DEVELOPMENT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('DEVELOPMENT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_CODE) + '''' End + ', DEV_NAME = ' + Case When DEV_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('DEV_CODE = ''' + Convert(NVarChar(4000), DEV_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[DEVELOPMENT] ENABLE TRIGGER [TG_AUD_DEVELOPMENT_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_DEVELOPMENT_OnInserted]
On [dbo].[DEVELOPMENT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('DEVELOPMENT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DEV_CODE) + '''' End + ', DEV_NAME = ' + Case When DEV_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DEV_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('DEV_CODE = ''' + Convert(NVarChar(4000), DEV_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[DEVELOPMENT] ENABLE TRIGGER [TG_AUD_DEVELOPMENT_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_DEVELOPMENT_OnUpdated]
On [dbo].[DEVELOPMENT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('DEVELOPMENT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.DEV_CODE Is Null And d.DEV_CODE Is Not Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Not Null And i.DEV_CODE <> d.DEV_CODE)) Then 'DEV_CODE = ' + Case When d.DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DEV_CODE) + '''' End + ', ' Else '' End +  Case When ((i.DEV_NAME Is Null And d.DEV_NAME Is Not Null) Or (i.DEV_NAME Is Not Null And d.DEV_NAME Is Null) Or (i.DEV_NAME Is Not Null And d.DEV_NAME Is Not Null And i.DEV_NAME <> d.DEV_NAME)) Then 'DEV_NAME = ' + Case When d.DEV_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DEV_NAME) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.DEV_CODE Is Null And d.DEV_CODE Is Not Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Null) Or (i.DEV_CODE Is Not Null And d.DEV_CODE Is Not Null And i.DEV_CODE <> d.DEV_CODE)) Then 'DEV_CODE = ' + Case When i.DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DEV_CODE) + '''' End + ', ' Else '' End +  Case When ((i.DEV_NAME Is Null And d.DEV_NAME Is Not Null) Or (i.DEV_NAME Is Not Null And d.DEV_NAME Is Null) Or (i.DEV_NAME Is Not Null And d.DEV_NAME Is Not Null And i.DEV_NAME <> d.DEV_NAME)) Then 'DEV_NAME = ' + Case When i.DEV_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DEV_NAME) + '''' End + ', ' Else '' End)  ChangedValue, Left('DEV_CODE = ''' + Convert(NVarChar(4000), i.DEV_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.DEV_CODE = d.DEV_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('DEVELOPMENT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_CODE) + '''' End + ', DEV_NAME = ' + Case When DEV_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('DEV_CODE = ''' + Convert(NVarChar(4000), DEV_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.DEV_CODE = d.DEV_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('DEVELOPMENT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('DEV_CODE = ' + Case When DEV_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_CODE) + '''' End + ', DEV_NAME = ' + Case When DEV_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DEV_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('DEV_CODE = ''' + Convert(NVarChar(4000), DEV_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.DEV_CODE = d.DEV_CODE)  End
GO

ALTER TABLE [dbo].[DEVELOPMENT] ENABLE TRIGGER [TG_AUD_DEVELOPMENT_OnUpdated]
GO



CREATE Trigger [dbo].[TG_AUD_DISTRICT_OnDeleted]
On [dbo].[DISTRICT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', DIST_NAME = ' + Case When DIST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_NAME) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + ''', DIST_CODE = ''' + Convert(NVarChar(4000), DIST_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[DISTRICT] ENABLE TRIGGER [TG_AUD_DISTRICT_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_DISTRICT_OnInserted]
On [dbo].[DISTRICT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REGION_CODE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DIST_CODE) + '''' End + ', DIST_NAME = ' + Case When DIST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DIST_NAME) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + ''', DIST_CODE = ''' + Convert(NVarChar(4000), DIST_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[DISTRICT] ENABLE TRIGGER [TG_AUD_DISTRICT_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_DISTRICT_OnUpdated]
On [dbo].[DISTRICT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When d.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.DIST_CODE Is Null And d.DIST_CODE Is Not Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Not Null And i.DIST_CODE <> d.DIST_CODE)) Then 'DIST_CODE = ' + Case When d.DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DIST_CODE) + '''' End + ', ' Else '' End +  Case When ((i.DIST_NAME Is Null And d.DIST_NAME Is Not Null) Or (i.DIST_NAME Is Not Null And d.DIST_NAME Is Null) Or (i.DIST_NAME Is Not Null And d.DIST_NAME Is Not Null And i.DIST_NAME <> d.DIST_NAME)) Then 'DIST_NAME = ' + Case When d.DIST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DIST_NAME) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When i.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.DIST_CODE Is Null And d.DIST_CODE Is Not Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Null) Or (i.DIST_CODE Is Not Null And d.DIST_CODE Is Not Null And i.DIST_CODE <> d.DIST_CODE)) Then 'DIST_CODE = ' + Case When i.DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DIST_CODE) + '''' End + ', ' Else '' End +  Case When ((i.DIST_NAME Is Null And d.DIST_NAME Is Not Null) Or (i.DIST_NAME Is Not Null And d.DIST_NAME Is Null) Or (i.DIST_NAME Is Not Null And d.DIST_NAME Is Not Null And i.DIST_NAME <> d.DIST_NAME)) Then 'DIST_NAME = ' + Case When i.DIST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DIST_NAME) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('REGION_CODE = ''' + Convert(NVarChar(4000), i.REGION_CODE) + ''', DIST_CODE = ''' + Convert(NVarChar(4000), i.DIST_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.REGION_CODE = d.REGION_CODE And i.DIST_CODE = d.DIST_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', DIST_NAME = ' + Case When DIST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_NAME) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + ''', DIST_CODE = ''' + Convert(NVarChar(4000), DIST_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.REGION_CODE = d.REGION_CODE And i.DIST_CODE = d.DIST_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('DISTRICT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', DIST_CODE = ' + Case When DIST_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_CODE) + '''' End + ', DIST_NAME = ' + Case When DIST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DIST_NAME) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + ''', DIST_CODE = ''' + Convert(NVarChar(4000), DIST_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.REGION_CODE = d.REGION_CODE And i.DIST_CODE = d.DIST_CODE)  End
GO

ALTER TABLE [dbo].[DISTRICT] ENABLE TRIGGER [TG_AUD_DISTRICT_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_EXPORT_COLUMNS_OnDeleted]
On [dbo].[EXPORT_COLUMNS]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('EXPORT_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_CODE) + '''' End + ', COLUMN_NAME = ' + Case When COLUMN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_NAME) + '''' End + ', COLUMN_NAME_MSG_CDE = ' + Case When COLUMN_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_NAME_MSG_CDE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('TEMPLATE_TYPE = ''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[EXPORT_COLUMNS] ENABLE TRIGGER [TG_AUD_EXPORT_COLUMNS_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_EXPORT_COLUMNS_OnInserted]
On [dbo].[EXPORT_COLUMNS]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('EXPORT_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEMPLATE_TYPE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COLUMN_CODE) + '''' End + ', COLUMN_NAME = ' + Case When COLUMN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COLUMN_NAME) + '''' End + ', COLUMN_NAME_MSG_CDE = ' + Case When COLUMN_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COLUMN_NAME_MSG_CDE) + '''' End + '', 4000), @PROJECT_ID, Left('TEMPLATE_TYPE = ''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[EXPORT_COLUMNS] ENABLE TRIGGER [TG_AUD_EXPORT_COLUMNS_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_EXPORT_COLUMNS_OnUpdated]
On [dbo].[EXPORT_COLUMNS]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('EXPORT_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.TEMPLATE_TYPE Is Null And d.TEMPLATE_TYPE Is Not Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Not Null And i.TEMPLATE_TYPE <> d.TEMPLATE_TYPE)) Then 'TEMPLATE_TYPE = ' + Case When d.TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEMPLATE_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_CODE Is Null And d.COLUMN_CODE Is Not Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Not Null And i.COLUMN_CODE <> d.COLUMN_CODE)) Then 'COLUMN_CODE = ' + Case When d.COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COLUMN_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_NAME Is Null And d.COLUMN_NAME Is Not Null) Or (i.COLUMN_NAME Is Not Null And d.COLUMN_NAME Is Null) Or (i.COLUMN_NAME Is Not Null And d.COLUMN_NAME Is Not Null And i.COLUMN_NAME <> d.COLUMN_NAME)) Then 'COLUMN_NAME = ' + Case When d.COLUMN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COLUMN_NAME) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_NAME_MSG_CDE Is Null And d.COLUMN_NAME_MSG_CDE Is Not Null) Or (i.COLUMN_NAME_MSG_CDE Is Not Null And d.COLUMN_NAME_MSG_CDE Is Null) Or (i.COLUMN_NAME_MSG_CDE Is Not Null And d.COLUMN_NAME_MSG_CDE Is Not Null And i.COLUMN_NAME_MSG_CDE <> d.COLUMN_NAME_MSG_CDE)) Then 'COLUMN_NAME_MSG_CDE = ' + Case When d.COLUMN_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COLUMN_NAME_MSG_CDE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.TEMPLATE_TYPE Is Null And d.TEMPLATE_TYPE Is Not Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Not Null And i.TEMPLATE_TYPE <> d.TEMPLATE_TYPE)) Then 'TEMPLATE_TYPE = ' + Case When i.TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEMPLATE_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_CODE Is Null And d.COLUMN_CODE Is Not Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Not Null And i.COLUMN_CODE <> d.COLUMN_CODE)) Then 'COLUMN_CODE = ' + Case When i.COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COLUMN_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_NAME Is Null And d.COLUMN_NAME Is Not Null) Or (i.COLUMN_NAME Is Not Null And d.COLUMN_NAME Is Null) Or (i.COLUMN_NAME Is Not Null And d.COLUMN_NAME Is Not Null And i.COLUMN_NAME <> d.COLUMN_NAME)) Then 'COLUMN_NAME = ' + Case When i.COLUMN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COLUMN_NAME) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_NAME_MSG_CDE Is Null And d.COLUMN_NAME_MSG_CDE Is Not Null) Or (i.COLUMN_NAME_MSG_CDE Is Not Null And d.COLUMN_NAME_MSG_CDE Is Null) Or (i.COLUMN_NAME_MSG_CDE Is Not Null And d.COLUMN_NAME_MSG_CDE Is Not Null And i.COLUMN_NAME_MSG_CDE <> d.COLUMN_NAME_MSG_CDE)) Then 'COLUMN_NAME_MSG_CDE = ' + Case When i.COLUMN_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COLUMN_NAME_MSG_CDE) + '''' End + ', ' Else '' End)  ChangedValue, Left('TEMPLATE_TYPE = ''' + Convert(NVarChar(4000), i.TEMPLATE_TYPE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), i.COLUMN_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.TEMPLATE_TYPE = d.TEMPLATE_TYPE And i.COLUMN_CODE = d.COLUMN_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('EXPORT_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_CODE) + '''' End + ', COLUMN_NAME = ' + Case When COLUMN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_NAME) + '''' End + ', COLUMN_NAME_MSG_CDE = ' + Case When COLUMN_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_NAME_MSG_CDE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('TEMPLATE_TYPE = ''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.TEMPLATE_TYPE = d.TEMPLATE_TYPE And i.COLUMN_CODE = d.COLUMN_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('EXPORT_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_CODE) + '''' End + ', COLUMN_NAME = ' + Case When COLUMN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_NAME) + '''' End + ', COLUMN_NAME_MSG_CDE = ' + Case When COLUMN_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_NAME_MSG_CDE) + '''' End + '', 4000), @PROJECT_ID, Left('TEMPLATE_TYPE = ''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.TEMPLATE_TYPE = d.TEMPLATE_TYPE And i.COLUMN_CODE = d.COLUMN_CODE)  End
GO

ALTER TABLE [dbo].[EXPORT_COLUMNS] ENABLE TRIGGER [TG_AUD_EXPORT_COLUMNS_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_EXPORT_TEMPLATE_OnDeleted]
On [dbo].[EXPORT_TEMPLATE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('EXPORT_TEMPLATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + ', TEMPLATE_NAME = ' + Case When TEMPLATE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_NAME) + '''' End + ', TEMPLATE_NAME_MSG_CDE = ' + Case When TEMPLATE_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_NAME_MSG_CDE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[EXPORT_TEMPLATE] ENABLE TRIGGER [TG_AUD_EXPORT_TEMPLATE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_EXPORT_TEMPLATE_OnInserted]
On [dbo].[EXPORT_TEMPLATE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('EXPORT_TEMPLATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEMPLATE_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEMPLATE_TYPE) + '''' End + ', TEMPLATE_NAME = ' + Case When TEMPLATE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEMPLATE_NAME) + '''' End + ', TEMPLATE_NAME_MSG_CDE = ' + Case When TEMPLATE_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEMPLATE_NAME_MSG_CDE) + '''' End + '', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[EXPORT_TEMPLATE] ENABLE TRIGGER [TG_AUD_EXPORT_TEMPLATE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_EXPORT_TEMPLATE_OnUpdated]
On [dbo].[EXPORT_TEMPLATE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('EXPORT_TEMPLATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.TEMPLATE_CODE Is Null And d.TEMPLATE_CODE Is Not Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Not Null And i.TEMPLATE_CODE <> d.TEMPLATE_CODE)) Then 'TEMPLATE_CODE = ' + Case When d.TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEMPLATE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_TYPE Is Null And d.TEMPLATE_TYPE Is Not Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Not Null And i.TEMPLATE_TYPE <> d.TEMPLATE_TYPE)) Then 'TEMPLATE_TYPE = ' + Case When d.TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEMPLATE_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_NAME Is Null And d.TEMPLATE_NAME Is Not Null) Or (i.TEMPLATE_NAME Is Not Null And d.TEMPLATE_NAME Is Null) Or (i.TEMPLATE_NAME Is Not Null And d.TEMPLATE_NAME Is Not Null And i.TEMPLATE_NAME <> d.TEMPLATE_NAME)) Then 'TEMPLATE_NAME = ' + Case When d.TEMPLATE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEMPLATE_NAME) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_NAME_MSG_CDE Is Null And d.TEMPLATE_NAME_MSG_CDE Is Not Null) Or (i.TEMPLATE_NAME_MSG_CDE Is Not Null And d.TEMPLATE_NAME_MSG_CDE Is Null) Or (i.TEMPLATE_NAME_MSG_CDE Is Not Null And d.TEMPLATE_NAME_MSG_CDE Is Not Null And i.TEMPLATE_NAME_MSG_CDE <> d.TEMPLATE_NAME_MSG_CDE)) Then 'TEMPLATE_NAME_MSG_CDE = ' + Case When d.TEMPLATE_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEMPLATE_NAME_MSG_CDE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.TEMPLATE_CODE Is Null And d.TEMPLATE_CODE Is Not Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Not Null And i.TEMPLATE_CODE <> d.TEMPLATE_CODE)) Then 'TEMPLATE_CODE = ' + Case When i.TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEMPLATE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_TYPE Is Null And d.TEMPLATE_TYPE Is Not Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Not Null And i.TEMPLATE_TYPE <> d.TEMPLATE_TYPE)) Then 'TEMPLATE_TYPE = ' + Case When i.TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEMPLATE_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_NAME Is Null And d.TEMPLATE_NAME Is Not Null) Or (i.TEMPLATE_NAME Is Not Null And d.TEMPLATE_NAME Is Null) Or (i.TEMPLATE_NAME Is Not Null And d.TEMPLATE_NAME Is Not Null And i.TEMPLATE_NAME <> d.TEMPLATE_NAME)) Then 'TEMPLATE_NAME = ' + Case When i.TEMPLATE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEMPLATE_NAME) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_NAME_MSG_CDE Is Null And d.TEMPLATE_NAME_MSG_CDE Is Not Null) Or (i.TEMPLATE_NAME_MSG_CDE Is Not Null And d.TEMPLATE_NAME_MSG_CDE Is Null) Or (i.TEMPLATE_NAME_MSG_CDE Is Not Null And d.TEMPLATE_NAME_MSG_CDE Is Not Null And i.TEMPLATE_NAME_MSG_CDE <> d.TEMPLATE_NAME_MSG_CDE)) Then 'TEMPLATE_NAME_MSG_CDE = ' + Case When i.TEMPLATE_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEMPLATE_NAME_MSG_CDE) + '''' End + ', ' Else '' End)  ChangedValue, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), i.TEMPLATE_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.TEMPLATE_CODE = d.TEMPLATE_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('EXPORT_TEMPLATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + ', TEMPLATE_NAME = ' + Case When TEMPLATE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_NAME) + '''' End + ', TEMPLATE_NAME_MSG_CDE = ' + Case When TEMPLATE_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_NAME_MSG_CDE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.TEMPLATE_CODE = d.TEMPLATE_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('EXPORT_TEMPLATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + ', TEMPLATE_NAME = ' + Case When TEMPLATE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_NAME) + '''' End + ', TEMPLATE_NAME_MSG_CDE = ' + Case When TEMPLATE_NAME_MSG_CDE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_NAME_MSG_CDE) + '''' End + '', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.TEMPLATE_CODE = d.TEMPLATE_CODE)  End
GO

ALTER TABLE [dbo].[EXPORT_TEMPLATE] ENABLE TRIGGER [TG_AUD_EXPORT_TEMPLATE_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_EXPORT_TEMPLATE_COLUMNS_OnDeleted]
On [dbo].[EXPORT_TEMPLATE_COLUMNS]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('EXPORT_TEMPLATE_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[EXPORT_TEMPLATE_COLUMNS] ENABLE TRIGGER [TG_AUD_EXPORT_TEMPLATE_COLUMNS_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_EXPORT_TEMPLATE_COLUMNS_OnInserted]
On [dbo].[EXPORT_TEMPLATE_COLUMNS]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('EXPORT_TEMPLATE_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEMPLATE_CODE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COLUMN_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEMPLATE_TYPE) + '''' End + '', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[EXPORT_TEMPLATE_COLUMNS] ENABLE TRIGGER [TG_AUD_EXPORT_TEMPLATE_COLUMNS_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_EXPORT_TEMPLATE_COLUMNS_OnUpdated]
On [dbo].[EXPORT_TEMPLATE_COLUMNS]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('EXPORT_TEMPLATE_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.TEMPLATE_CODE Is Null And d.TEMPLATE_CODE Is Not Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Not Null And i.TEMPLATE_CODE <> d.TEMPLATE_CODE)) Then 'TEMPLATE_CODE = ' + Case When d.TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEMPLATE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_CODE Is Null And d.COLUMN_CODE Is Not Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Not Null And i.COLUMN_CODE <> d.COLUMN_CODE)) Then 'COLUMN_CODE = ' + Case When d.COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COLUMN_CODE) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_TYPE Is Null And d.TEMPLATE_TYPE Is Not Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Not Null And i.TEMPLATE_TYPE <> d.TEMPLATE_TYPE)) Then 'TEMPLATE_TYPE = ' + Case When d.TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEMPLATE_TYPE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.TEMPLATE_CODE Is Null And d.TEMPLATE_CODE Is Not Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Null) Or (i.TEMPLATE_CODE Is Not Null And d.TEMPLATE_CODE Is Not Null And i.TEMPLATE_CODE <> d.TEMPLATE_CODE)) Then 'TEMPLATE_CODE = ' + Case When i.TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEMPLATE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.COLUMN_CODE Is Null And d.COLUMN_CODE Is Not Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Null) Or (i.COLUMN_CODE Is Not Null And d.COLUMN_CODE Is Not Null And i.COLUMN_CODE <> d.COLUMN_CODE)) Then 'COLUMN_CODE = ' + Case When i.COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COLUMN_CODE) + '''' End + ', ' Else '' End +  Case When ((i.TEMPLATE_TYPE Is Null And d.TEMPLATE_TYPE Is Not Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Null) Or (i.TEMPLATE_TYPE Is Not Null And d.TEMPLATE_TYPE Is Not Null And i.TEMPLATE_TYPE <> d.TEMPLATE_TYPE)) Then 'TEMPLATE_TYPE = ' + Case When i.TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEMPLATE_TYPE) + '''' End + ', ' Else '' End)  ChangedValue, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), i.TEMPLATE_CODE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), i.COLUMN_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.TEMPLATE_CODE = d.TEMPLATE_CODE And i.COLUMN_CODE = d.COLUMN_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('EXPORT_TEMPLATE_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.TEMPLATE_CODE = d.TEMPLATE_CODE And i.COLUMN_CODE = d.COLUMN_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('EXPORT_TEMPLATE_COLUMNS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('TEMPLATE_CODE = ' + Case When TEMPLATE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_CODE) + '''' End + ', COLUMN_CODE = ' + Case When COLUMN_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COLUMN_CODE) + '''' End + ', TEMPLATE_TYPE = ' + Case When TEMPLATE_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEMPLATE_TYPE) + '''' End + '', 4000), @PROJECT_ID, Left('TEMPLATE_CODE = ''' + Convert(NVarChar(4000), TEMPLATE_CODE) + ''', COLUMN_CODE = ''' + Convert(NVarChar(4000), COLUMN_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.TEMPLATE_CODE = d.TEMPLATE_CODE And i.COLUMN_CODE = d.COLUMN_CODE)  End
GO

ALTER TABLE [dbo].[EXPORT_TEMPLATE_COLUMNS] ENABLE TRIGGER [TG_AUD_EXPORT_TEMPLATE_COLUMNS_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_FLAT_PACKAGE_OnDeleted]
On [dbo].[FLAT_PACKAGE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FLAT_PACKAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PACKAGE_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FLAT_PACKAGE] ENABLE TRIGGER [TG_AUD_FLAT_PACKAGE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_FLAT_PACKAGE_OnInserted]
On [dbo].[FLAT_PACKAGE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FLAT_PACKAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PACKAGE_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FLAT_PACKAGE] ENABLE TRIGGER [TG_AUD_FLAT_PACKAGE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_FLAT_PACKAGE_OnUpdated]
On [dbo].[FLAT_PACKAGE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_PACKAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When d.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.PACKAGE_ID Is Null And d.PACKAGE_ID Is Not Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Not Null And i.PACKAGE_ID <> d.PACKAGE_ID)) Then 'PACKAGE_ID = ' + Case When d.PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PACKAGE_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When i.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.PACKAGE_ID Is Null And d.PACKAGE_ID Is Not Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Null) Or (i.PACKAGE_ID Is Not Null And d.PACKAGE_ID Is Not Null And i.PACKAGE_ID <> d.PACKAGE_ID)) Then 'PACKAGE_ID = ' + Case When i.PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PACKAGE_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('FM_CODE = ''' + Convert(NVarChar(4000), i.FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), i.PACKAGE_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.FM_CODE = d.FM_CODE And i.PROJECT_ID = d.PROJECT_ID And i.PACKAGE_ID = d.PACKAGE_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FLAT_PACKAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PACKAGE_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.FM_CODE = d.FM_CODE And i.PROJECT_ID = d.PROJECT_ID And i.PACKAGE_ID = d.PACKAGE_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_PACKAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', PACKAGE_ID = ' + Case When PACKAGE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PACKAGE_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', PACKAGE_ID = ''' + Convert(NVarChar(4000), PACKAGE_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.FM_CODE = d.FM_CODE And i.PROJECT_ID = d.PROJECT_ID And i.PACKAGE_ID = d.PACKAGE_ID)  End
GO

ALTER TABLE [dbo].[FLAT_PACKAGE] ENABLE TRIGGER [TG_AUD_FLAT_PACKAGE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_PRICE_AUDIT_OnDeleted]
On [dbo].[FLAT_PRICE_AUDIT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FLAT_PRICE_AUDIT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', ADJ_NO = ' + Case When ADJ_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_NO) + '''' End + ', ORG_PRICE = ' + Case When ORG_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_PRICE) + '''' End + ', NEW_PRICE = ' + Case When NEW_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NEW_PRICE) + '''' End + ', ORG_PRICE_LIST_NO = ' + Case When ORG_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_PRICE_LIST_NO) + '''' End + ', NEW_PRICE_LIST_NO = ' + Case When NEW_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NEW_PRICE_LIST_NO) + '''' End + ', ADJ_TYPE = ' + Case When ADJ_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_TYPE) + '''' End + ', ADJ_UNIT = ' + Case When ADJ_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_UNIT) + '''' End + ', ADJ = ' + Case When ADJ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', ADJ_NO = ''' + Convert(NVarChar(4000), ADJ_NO) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FLAT_PRICE_AUDIT] ENABLE TRIGGER [TG_AUD_FLAT_PRICE_AUDIT_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_PRICE_AUDIT_OnInserted]
On [dbo].[FLAT_PRICE_AUDIT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FLAT_PRICE_AUDIT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CODE) + '''' End + ', ADJ_NO = ' + Case When ADJ_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADJ_NO) + '''' End + ', ORG_PRICE = ' + Case When ORG_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ORG_PRICE) + '''' End + ', NEW_PRICE = ' + Case When NEW_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),NEW_PRICE) + '''' End + ', ORG_PRICE_LIST_NO = ' + Case When ORG_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ORG_PRICE_LIST_NO) + '''' End + ', NEW_PRICE_LIST_NO = ' + Case When NEW_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),NEW_PRICE_LIST_NO) + '''' End + ', ADJ_TYPE = ' + Case When ADJ_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADJ_TYPE) + '''' End + ', ADJ_UNIT = ' + Case When ADJ_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADJ_UNIT) + '''' End + ', ADJ = ' + Case When ADJ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADJ) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', ADJ_NO = ''' + Convert(NVarChar(4000), ADJ_NO) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FLAT_PRICE_AUDIT] ENABLE TRIGGER [TG_AUD_FLAT_PRICE_AUDIT_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_FLAT_PRICE_AUDIT_OnUpdated]
On [dbo].[FLAT_PRICE_AUDIT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_PRICE_AUDIT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When d.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.ADJ_NO Is Null And d.ADJ_NO Is Not Null) Or (i.ADJ_NO Is Not Null And d.ADJ_NO Is Null) Or (i.ADJ_NO Is Not Null And d.ADJ_NO Is Not Null And i.ADJ_NO <> d.ADJ_NO)) Then 'ADJ_NO = ' + Case When d.ADJ_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADJ_NO) + '''' End + ', ' Else '' End +  Case When ((i.ORG_PRICE Is Null And d.ORG_PRICE Is Not Null) Or (i.ORG_PRICE Is Not Null And d.ORG_PRICE Is Null) Or (i.ORG_PRICE Is Not Null And d.ORG_PRICE Is Not Null And i.ORG_PRICE <> d.ORG_PRICE)) Then 'ORG_PRICE = ' + Case When d.ORG_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ORG_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.NEW_PRICE Is Null And d.NEW_PRICE Is Not Null) Or (i.NEW_PRICE Is Not Null And d.NEW_PRICE Is Null) Or (i.NEW_PRICE Is Not Null And d.NEW_PRICE Is Not Null And i.NEW_PRICE <> d.NEW_PRICE)) Then 'NEW_PRICE = ' + Case When d.NEW_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.NEW_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.ORG_PRICE_LIST_NO Is Null And d.ORG_PRICE_LIST_NO Is Not Null) Or (i.ORG_PRICE_LIST_NO Is Not Null And d.ORG_PRICE_LIST_NO Is Null) Or (i.ORG_PRICE_LIST_NO Is Not Null And d.ORG_PRICE_LIST_NO Is Not Null And i.ORG_PRICE_LIST_NO <> d.ORG_PRICE_LIST_NO)) Then 'ORG_PRICE_LIST_NO = ' + Case When d.ORG_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ORG_PRICE_LIST_NO) + '''' End + ', ' Else '' End +  Case When ((i.NEW_PRICE_LIST_NO Is Null And d.NEW_PRICE_LIST_NO Is Not Null) Or (i.NEW_PRICE_LIST_NO Is Not Null And d.NEW_PRICE_LIST_NO Is Null) Or (i.NEW_PRICE_LIST_NO Is Not Null And d.NEW_PRICE_LIST_NO Is Not Null And i.NEW_PRICE_LIST_NO <> d.NEW_PRICE_LIST_NO)) Then 'NEW_PRICE_LIST_NO = ' + Case When d.NEW_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.NEW_PRICE_LIST_NO) + '''' End + ', ' Else '' End +  Case When ((i.ADJ_TYPE Is Null And d.ADJ_TYPE Is Not Null) Or (i.ADJ_TYPE Is Not Null And d.ADJ_TYPE Is Null) Or (i.ADJ_TYPE Is Not Null And d.ADJ_TYPE Is Not Null And i.ADJ_TYPE <> d.ADJ_TYPE)) Then 'ADJ_TYPE = ' + Case When d.ADJ_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADJ_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.ADJ_UNIT Is Null And d.ADJ_UNIT Is Not Null) Or (i.ADJ_UNIT Is Not Null And d.ADJ_UNIT Is Null) Or (i.ADJ_UNIT Is Not Null And d.ADJ_UNIT Is Not Null And i.ADJ_UNIT <> d.ADJ_UNIT)) Then 'ADJ_UNIT = ' + Case When d.ADJ_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADJ_UNIT) + '''' End + ', ' Else '' End +  Case When ((i.ADJ Is Null And d.ADJ Is Not Null) Or (i.ADJ Is Not Null And d.ADJ Is Null) Or (i.ADJ Is Not Null And d.ADJ Is Not Null And i.ADJ <> d.ADJ)) Then 'ADJ = ' + Case When d.ADJ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADJ) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When i.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.ADJ_NO Is Null And d.ADJ_NO Is Not Null) Or (i.ADJ_NO Is Not Null And d.ADJ_NO Is Null) Or (i.ADJ_NO Is Not Null And d.ADJ_NO Is Not Null And i.ADJ_NO <> d.ADJ_NO)) Then 'ADJ_NO = ' + Case When i.ADJ_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADJ_NO) + '''' End + ', ' Else '' End +  Case When ((i.ORG_PRICE Is Null And d.ORG_PRICE Is Not Null) Or (i.ORG_PRICE Is Not Null And d.ORG_PRICE Is Null) Or (i.ORG_PRICE Is Not Null And d.ORG_PRICE Is Not Null And i.ORG_PRICE <> d.ORG_PRICE)) Then 'ORG_PRICE = ' + Case When i.ORG_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ORG_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.NEW_PRICE Is Null And d.NEW_PRICE Is Not Null) Or (i.NEW_PRICE Is Not Null And d.NEW_PRICE Is Null) Or (i.NEW_PRICE Is Not Null And d.NEW_PRICE Is Not Null And i.NEW_PRICE <> d.NEW_PRICE)) Then 'NEW_PRICE = ' + Case When i.NEW_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.NEW_PRICE) + '''' End + ', ' Else '' End +  Case When ((i.ORG_PRICE_LIST_NO Is Null And d.ORG_PRICE_LIST_NO Is Not Null) Or (i.ORG_PRICE_LIST_NO Is Not Null And d.ORG_PRICE_LIST_NO Is Null) Or (i.ORG_PRICE_LIST_NO Is Not Null And d.ORG_PRICE_LIST_NO Is Not Null And i.ORG_PRICE_LIST_NO <> d.ORG_PRICE_LIST_NO)) Then 'ORG_PRICE_LIST_NO = ' + Case When i.ORG_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ORG_PRICE_LIST_NO) + '''' End + ', ' Else '' End +  Case When ((i.NEW_PRICE_LIST_NO Is Null And d.NEW_PRICE_LIST_NO Is Not Null) Or (i.NEW_PRICE_LIST_NO Is Not Null And d.NEW_PRICE_LIST_NO Is Null) Or (i.NEW_PRICE_LIST_NO Is Not Null And d.NEW_PRICE_LIST_NO Is Not Null And i.NEW_PRICE_LIST_NO <> d.NEW_PRICE_LIST_NO)) Then 'NEW_PRICE_LIST_NO = ' + Case When i.NEW_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.NEW_PRICE_LIST_NO) + '''' End + ', ' Else '' End +  Case When ((i.ADJ_TYPE Is Null And d.ADJ_TYPE Is Not Null) Or (i.ADJ_TYPE Is Not Null And d.ADJ_TYPE Is Null) Or (i.ADJ_TYPE Is Not Null And d.ADJ_TYPE Is Not Null And i.ADJ_TYPE <> d.ADJ_TYPE)) Then 'ADJ_TYPE = ' + Case When i.ADJ_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADJ_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.ADJ_UNIT Is Null And d.ADJ_UNIT Is Not Null) Or (i.ADJ_UNIT Is Not Null And d.ADJ_UNIT Is Null) Or (i.ADJ_UNIT Is Not Null And d.ADJ_UNIT Is Not Null And i.ADJ_UNIT <> d.ADJ_UNIT)) Then 'ADJ_UNIT = ' + Case When i.ADJ_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADJ_UNIT) + '''' End + ', ' Else '' End +  Case When ((i.ADJ Is Null And d.ADJ Is Not Null) Or (i.ADJ Is Not Null And d.ADJ Is Null) Or (i.ADJ Is Not Null And d.ADJ Is Not Null And i.ADJ <> d.ADJ)) Then 'ADJ = ' + Case When i.ADJ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADJ) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', FM_CODE = ''' + Convert(NVarChar(4000), i.FM_CODE) + ''', ADJ_NO = ''' + Convert(NVarChar(4000), i.ADJ_NO) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CODE = d.FM_CODE And i.ADJ_NO = d.ADJ_NO
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FLAT_PRICE_AUDIT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', ADJ_NO = ' + Case When ADJ_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_NO) + '''' End + ', ORG_PRICE = ' + Case When ORG_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_PRICE) + '''' End + ', NEW_PRICE = ' + Case When NEW_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NEW_PRICE) + '''' End + ', ORG_PRICE_LIST_NO = ' + Case When ORG_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_PRICE_LIST_NO) + '''' End + ', NEW_PRICE_LIST_NO = ' + Case When NEW_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NEW_PRICE_LIST_NO) + '''' End + ', ADJ_TYPE = ' + Case When ADJ_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_TYPE) + '''' End + ', ADJ_UNIT = ' + Case When ADJ_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_UNIT) + '''' End + ', ADJ = ' + Case When ADJ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', ADJ_NO = ''' + Convert(NVarChar(4000), ADJ_NO) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CODE = d.FM_CODE And i.ADJ_NO = d.ADJ_NO
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_PRICE_AUDIT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', ADJ_NO = ' + Case When ADJ_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_NO) + '''' End + ', ORG_PRICE = ' + Case When ORG_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_PRICE) + '''' End + ', NEW_PRICE = ' + Case When NEW_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NEW_PRICE) + '''' End + ', ORG_PRICE_LIST_NO = ' + Case When ORG_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_PRICE_LIST_NO) + '''' End + ', NEW_PRICE_LIST_NO = ' + Case When NEW_PRICE_LIST_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NEW_PRICE_LIST_NO) + '''' End + ', ADJ_TYPE = ' + Case When ADJ_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_TYPE) + '''' End + ', ADJ_UNIT = ' + Case When ADJ_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ_UNIT) + '''' End + ', ADJ = ' + Case When ADJ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADJ) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', ADJ_NO = ''' + Convert(NVarChar(4000), ADJ_NO) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CODE = d.FM_CODE And i.ADJ_NO = d.ADJ_NO)  End
GO

ALTER TABLE [dbo].[FLAT_PRICE_AUDIT] ENABLE TRIGGER [TG_AUD_FLAT_PRICE_AUDIT_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_SELECTION_OnDeleted]
On [dbo].[FLAT_SELECTION]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FLAT_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPDATE_DATE, 121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_STATUS) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID_TYPE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FLAT_SELECTION] ENABLE TRIGGER [TG_AUD_FLAT_SELECTION_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_SELECTION_OnInserted]
On [dbo].[FLAT_SELECTION]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FLAT_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CODE) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UPDATE_DATE,121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ORG_STATUS) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ID_TYPE) + '''' End + '', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FLAT_SELECTION] ENABLE TRIGGER [TG_AUD_FLAT_SELECTION_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_SELECTION_OnUpdated]
On [dbo].[FLAT_SELECTION]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When d.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.UPDATE_DATE Is Null And d.UPDATE_DATE Is Not Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Not Null And i.UPDATE_DATE <> d.UPDATE_DATE)) Then 'UPDATE_DATE = ' + Case When d.UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UPDATE_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_SEQ Is Null And d.BALLOT_SEQ Is Not Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Not Null And i.BALLOT_SEQ <> d.BALLOT_SEQ)) Then 'BALLOT_SEQ = ' + Case When d.BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BALLOT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.SELECTION_ORDER Is Null And d.SELECTION_ORDER Is Not Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Not Null And i.SELECTION_ORDER <> d.SELECTION_ORDER)) Then 'SELECTION_ORDER = ' + Case When d.SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SELECTION_ORDER) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When d.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.APPROVE_UID Is Null And d.APPROVE_UID Is Not Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Not Null And i.APPROVE_UID <> d.APPROVE_UID)) Then 'APPROVE_UID = ' + Case When d.APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.APPROVE_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.ORG_STATUS Is Null And d.ORG_STATUS Is Not Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Not Null And i.ORG_STATUS <> d.ORG_STATUS)) Then 'ORG_STATUS = ' + Case When d.ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ORG_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.ID_TYPE Is Null And d.ID_TYPE Is Not Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Not Null And i.ID_TYPE <> d.ID_TYPE)) Then 'ID_TYPE = ' + Case When d.ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ID_TYPE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.FM_CODE Is Null And d.FM_CODE Is Not Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Null) Or (i.FM_CODE Is Not Null And d.FM_CODE Is Not Null And i.FM_CODE <> d.FM_CODE)) Then 'FM_CODE = ' + Case When i.FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.UPDATE_DATE Is Null And d.UPDATE_DATE Is Not Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Null) Or (i.UPDATE_DATE Is Not Null And d.UPDATE_DATE Is Not Null And i.UPDATE_DATE <> d.UPDATE_DATE)) Then 'UPDATE_DATE = ' + Case When i.UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UPDATE_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.BALLOT_SEQ Is Null And d.BALLOT_SEQ Is Not Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Null) Or (i.BALLOT_SEQ Is Not Null And d.BALLOT_SEQ Is Not Null And i.BALLOT_SEQ <> d.BALLOT_SEQ)) Then 'BALLOT_SEQ = ' + Case When i.BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BALLOT_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.SELECTION_ORDER Is Null And d.SELECTION_ORDER Is Not Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Null) Or (i.SELECTION_ORDER Is Not Null And d.SELECTION_ORDER Is Not Null And i.SELECTION_ORDER <> d.SELECTION_ORDER)) Then 'SELECTION_ORDER = ' + Case When i.SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SELECTION_ORDER) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When i.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.APPROVE_UID Is Null And d.APPROVE_UID Is Not Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Null) Or (i.APPROVE_UID Is Not Null And d.APPROVE_UID Is Not Null And i.APPROVE_UID <> d.APPROVE_UID)) Then 'APPROVE_UID = ' + Case When i.APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.APPROVE_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.ORG_STATUS Is Null And d.ORG_STATUS Is Not Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Null) Or (i.ORG_STATUS Is Not Null And d.ORG_STATUS Is Not Null And i.ORG_STATUS <> d.ORG_STATUS)) Then 'ORG_STATUS = ' + Case When i.ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ORG_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.ID_TYPE Is Null And d.ID_TYPE Is Not Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Not Null And i.ID_TYPE <> d.ID_TYPE)) Then 'ID_TYPE = ' + Case When i.ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ID_TYPE) + '''' End + ', ' Else '' End)  ChangedValue, Left('FM_CODE = ''' + Convert(NVarChar(4000), i.FM_CODE) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), i.UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.FM_CODE = d.FM_CODE And i.UPDATE_DATE = d.UPDATE_DATE And i.PROJECT_ID = d.PROJECT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FLAT_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPDATE_DATE, 121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_STATUS) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID_TYPE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.FM_CODE = d.FM_CODE And i.UPDATE_DATE = d.UPDATE_DATE And i.PROJECT_ID = d.PROJECT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_SELECTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FM_CODE = ' + Case When FM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CODE) + '''' End + ', UPDATE_DATE = ' + Case When UPDATE_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UPDATE_DATE, 121) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', BALLOT_SEQ = ' + Case When BALLOT_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BALLOT_SEQ) + '''' End + ', SELECTION_ORDER = ' + Case When SELECTION_ORDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTION_ORDER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', APPROVE_UID = ' + Case When APPROVE_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), APPROVE_UID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', ORG_STATUS = ' + Case When ORG_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ORG_STATUS) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID_TYPE) + '''' End + '', 4000), @PROJECT_ID, Left('FM_CODE = ''' + Convert(NVarChar(4000), FM_CODE) + ''', UPDATE_DATE = ''' + Convert(NVarChar(4000), UPDATE_DATE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.FM_CODE = d.FM_CODE And i.UPDATE_DATE = d.UPDATE_DATE And i.PROJECT_ID = d.PROJECT_ID)  End
GO

ALTER TABLE [dbo].[FLAT_SELECTION] ENABLE TRIGGER [TG_AUD_FLAT_SELECTION_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_TYPE_OnDeleted]
On [dbo].[FLAT_TYPE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FLAT_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FT_ID = ' + Case When FT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FT_ID) + '''' End + ', FT_DESC = ' + Case When FT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FT_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FT_ID = ''' + Convert(NVarChar(4000), FT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FLAT_TYPE] ENABLE TRIGGER [TG_AUD_FLAT_TYPE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_TYPE_OnInserted]
On [dbo].[FLAT_TYPE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FLAT_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FT_ID = ' + Case When FT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FT_ID) + '''' End + ', FT_DESC = ' + Case When FT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FT_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('FT_ID = ''' + Convert(NVarChar(4000), FT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FLAT_TYPE] ENABLE TRIGGER [TG_AUD_FLAT_TYPE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_FLAT_TYPE_OnUpdated]
On [dbo].[FLAT_TYPE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.FT_ID Is Null And d.FT_ID Is Not Null) Or (i.FT_ID Is Not Null And d.FT_ID Is Null) Or (i.FT_ID Is Not Null And d.FT_ID Is Not Null And i.FT_ID <> d.FT_ID)) Then 'FT_ID = ' + Case When d.FT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FT_DESC Is Null And d.FT_DESC Is Not Null) Or (i.FT_DESC Is Not Null And d.FT_DESC Is Null) Or (i.FT_DESC Is Not Null And d.FT_DESC Is Not Null And i.FT_DESC <> d.FT_DESC)) Then 'FT_DESC = ' + Case When d.FT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FT_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.FT_ID Is Null And d.FT_ID Is Not Null) Or (i.FT_ID Is Not Null And d.FT_ID Is Null) Or (i.FT_ID Is Not Null And d.FT_ID Is Not Null And i.FT_ID <> d.FT_ID)) Then 'FT_ID = ' + Case When i.FT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FT_DESC Is Null And d.FT_DESC Is Not Null) Or (i.FT_DESC Is Not Null And d.FT_DESC Is Null) Or (i.FT_DESC Is Not Null And d.FT_DESC Is Not Null And i.FT_DESC <> d.FT_DESC)) Then 'FT_DESC = ' + Case When i.FT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FT_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('FT_ID = ''' + Convert(NVarChar(4000), i.FT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.FT_ID = d.FT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FLAT_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FT_ID = ' + Case When FT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FT_ID) + '''' End + ', FT_DESC = ' + Case When FT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FT_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FT_ID = ''' + Convert(NVarChar(4000), FT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.FT_ID = d.FT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FLAT_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FT_ID = ' + Case When FT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FT_ID) + '''' End + ', FT_DESC = ' + Case When FT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FT_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('FT_ID = ''' + Convert(NVarChar(4000), FT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.FT_ID = d.FT_ID)  End
GO

ALTER TABLE [dbo].[FLAT_TYPE] ENABLE TRIGGER [TG_AUD_FLAT_TYPE_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_FM_CP_ANALYSIS_CODE_OnDeleted]
On [dbo].[FM_CP_ANALYSIS_CODE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FM_CP_ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', FLAT_CP = ' + Case When FLAT_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_CP) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FM_CP_ANALYSIS_CODE] ENABLE TRIGGER [TG_AUD_FM_CP_ANALYSIS_CODE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_FM_CP_ANALYSIS_CODE_OnInserted]
On [dbo].[FM_CP_ANALYSIS_CODE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FM_CP_ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CP_CODE) + '''' End + ', ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ANA_GROUP_ID) + '''' End + ', FLAT_CP = ' + Case When FLAT_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FLAT_CP) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FM_CP_ANALYSIS_CODE] ENABLE TRIGGER [TG_AUD_FM_CP_ANALYSIS_CODE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_FM_CP_ANALYSIS_CODE_OnUpdated]
On [dbo].[FM_CP_ANALYSIS_CODE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FM_CP_ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_CODE Is Null And d.FM_CP_CODE Is Not Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Not Null And i.FM_CP_CODE <> d.FM_CP_CODE)) Then 'FM_CP_CODE = ' + Case When d.FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CP_CODE) + '''' End + ', ' Else '' End +  Case When ((i.ANA_ID Is Null And d.ANA_ID Is Not Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Not Null And i.ANA_ID <> d.ANA_ID)) Then 'ANA_ID = ' + Case When d.ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_GROUP_ID Is Null And d.ANA_GROUP_ID Is Not Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Not Null And i.ANA_GROUP_ID <> d.ANA_GROUP_ID)) Then 'ANA_GROUP_ID = ' + Case When d.ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ANA_GROUP_ID) + '''' End + ', ' Else '' End +  Case When ((i.FLAT_CP Is Null And d.FLAT_CP Is Not Null) Or (i.FLAT_CP Is Not Null And d.FLAT_CP Is Null) Or (i.FLAT_CP Is Not Null And d.FLAT_CP Is Not Null And i.FLAT_CP <> d.FLAT_CP)) Then 'FLAT_CP = ' + Case When d.FLAT_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FLAT_CP) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_CODE Is Null And d.FM_CP_CODE Is Not Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Not Null And i.FM_CP_CODE <> d.FM_CP_CODE)) Then 'FM_CP_CODE = ' + Case When i.FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CP_CODE) + '''' End + ', ' Else '' End +  Case When ((i.ANA_ID Is Null And d.ANA_ID Is Not Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Null) Or (i.ANA_ID Is Not Null And d.ANA_ID Is Not Null And i.ANA_ID <> d.ANA_ID)) Then 'ANA_ID = ' + Case When i.ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_ID) + '''' End + ', ' Else '' End +  Case When ((i.ANA_GROUP_ID Is Null And d.ANA_GROUP_ID Is Not Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Null) Or (i.ANA_GROUP_ID Is Not Null And d.ANA_GROUP_ID Is Not Null And i.ANA_GROUP_ID <> d.ANA_GROUP_ID)) Then 'ANA_GROUP_ID = ' + Case When i.ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ANA_GROUP_ID) + '''' End + ', ' Else '' End +  Case When ((i.FLAT_CP Is Null And d.FLAT_CP Is Not Null) Or (i.FLAT_CP Is Not Null And d.FLAT_CP Is Null) Or (i.FLAT_CP Is Not Null And d.FLAT_CP Is Not Null And i.FLAT_CP <> d.FLAT_CP)) Then 'FLAT_CP = ' + Case When i.FLAT_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FLAT_CP) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), i.FM_CP_CODE) + ''', ANA_ID = ''' + Convert(NVarChar(4000), i.ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), i.ANA_GROUP_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE And i.ANA_ID = d.ANA_ID And i.ANA_GROUP_ID = d.ANA_GROUP_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FM_CP_ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', FLAT_CP = ' + Case When FLAT_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_CP) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE And i.ANA_ID = d.ANA_ID And i.ANA_GROUP_ID = d.ANA_GROUP_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FM_CP_ANALYSIS_CODE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', ANA_ID = ' + Case When ANA_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_ID) + '''' End + ', ANA_GROUP_ID = ' + Case When ANA_GROUP_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''' End + ', FLAT_CP = ' + Case When FLAT_CP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FLAT_CP) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', ANA_ID = ''' + Convert(NVarChar(4000), ANA_ID) + ''', ANA_GROUP_ID = ''' + Convert(NVarChar(4000), ANA_GROUP_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE And i.ANA_ID = d.ANA_ID And i.ANA_GROUP_ID = d.ANA_GROUP_ID)  End
GO

ALTER TABLE [dbo].[FM_CP_ANALYSIS_CODE] ENABLE TRIGGER [TG_AUD_FM_CP_ANALYSIS_CODE_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_FM_CP_PAYMENT_METHOD_PRICE_OnDeleted]
On [dbo].[FM_CP_PAYMENT_METHOD_PRICE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FM_CP_PAYMENT_METHOD_PRICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', PAYMENT_METHOD_CODE = ' + Case When PAYMENT_METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_METHOD_CODE) + '''' End + ', PAYMENT_METHOD_PRICE = ' + Case When PAYMENT_METHOD_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_METHOD_PRICE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', PAYMENT_METHOD_CODE = ''' + Convert(NVarChar(4000), PAYMENT_METHOD_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FM_CP_PAYMENT_METHOD_PRICE] ENABLE TRIGGER [TG_AUD_FM_CP_PAYMENT_METHOD_PRICE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_FM_CP_PAYMENT_METHOD_PRICE_OnInserted]
On [dbo].[FM_CP_PAYMENT_METHOD_PRICE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FM_CP_PAYMENT_METHOD_PRICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FM_CP_CODE) + '''' End + ', PAYMENT_METHOD_CODE = ' + Case When PAYMENT_METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PAYMENT_METHOD_CODE) + '''' End + ', PAYMENT_METHOD_PRICE = ' + Case When PAYMENT_METHOD_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PAYMENT_METHOD_PRICE) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', PAYMENT_METHOD_CODE = ''' + Convert(NVarChar(4000), PAYMENT_METHOD_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FM_CP_PAYMENT_METHOD_PRICE] ENABLE TRIGGER [TG_AUD_FM_CP_PAYMENT_METHOD_PRICE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_FM_CP_PAYMENT_METHOD_PRICE_OnUpdated]
On [dbo].[FM_CP_PAYMENT_METHOD_PRICE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FM_CP_PAYMENT_METHOD_PRICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_CODE Is Null And d.FM_CP_CODE Is Not Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Not Null And i.FM_CP_CODE <> d.FM_CP_CODE)) Then 'FM_CP_CODE = ' + Case When d.FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FM_CP_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_METHOD_CODE Is Null And d.PAYMENT_METHOD_CODE Is Not Null) Or (i.PAYMENT_METHOD_CODE Is Not Null And d.PAYMENT_METHOD_CODE Is Null) Or (i.PAYMENT_METHOD_CODE Is Not Null And d.PAYMENT_METHOD_CODE Is Not Null And i.PAYMENT_METHOD_CODE <> d.PAYMENT_METHOD_CODE)) Then 'PAYMENT_METHOD_CODE = ' + Case When d.PAYMENT_METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PAYMENT_METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_METHOD_PRICE Is Null And d.PAYMENT_METHOD_PRICE Is Not Null) Or (i.PAYMENT_METHOD_PRICE Is Not Null And d.PAYMENT_METHOD_PRICE Is Null) Or (i.PAYMENT_METHOD_PRICE Is Not Null And d.PAYMENT_METHOD_PRICE Is Not Null And i.PAYMENT_METHOD_PRICE <> d.PAYMENT_METHOD_PRICE)) Then 'PAYMENT_METHOD_PRICE = ' + Case When d.PAYMENT_METHOD_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PAYMENT_METHOD_PRICE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.FM_CP_CODE Is Null And d.FM_CP_CODE Is Not Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Null) Or (i.FM_CP_CODE Is Not Null And d.FM_CP_CODE Is Not Null And i.FM_CP_CODE <> d.FM_CP_CODE)) Then 'FM_CP_CODE = ' + Case When i.FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FM_CP_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_METHOD_CODE Is Null And d.PAYMENT_METHOD_CODE Is Not Null) Or (i.PAYMENT_METHOD_CODE Is Not Null And d.PAYMENT_METHOD_CODE Is Null) Or (i.PAYMENT_METHOD_CODE Is Not Null And d.PAYMENT_METHOD_CODE Is Not Null And i.PAYMENT_METHOD_CODE <> d.PAYMENT_METHOD_CODE)) Then 'PAYMENT_METHOD_CODE = ' + Case When i.PAYMENT_METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PAYMENT_METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_METHOD_PRICE Is Null And d.PAYMENT_METHOD_PRICE Is Not Null) Or (i.PAYMENT_METHOD_PRICE Is Not Null And d.PAYMENT_METHOD_PRICE Is Null) Or (i.PAYMENT_METHOD_PRICE Is Not Null And d.PAYMENT_METHOD_PRICE Is Not Null And i.PAYMENT_METHOD_PRICE <> d.PAYMENT_METHOD_PRICE)) Then 'PAYMENT_METHOD_PRICE = ' + Case When i.PAYMENT_METHOD_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PAYMENT_METHOD_PRICE) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), i.FM_CP_CODE) + ''', PAYMENT_METHOD_CODE = ''' + Convert(NVarChar(4000), i.PAYMENT_METHOD_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE And i.PAYMENT_METHOD_CODE = d.PAYMENT_METHOD_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FM_CP_PAYMENT_METHOD_PRICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', PAYMENT_METHOD_CODE = ' + Case When PAYMENT_METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_METHOD_CODE) + '''' End + ', PAYMENT_METHOD_PRICE = ' + Case When PAYMENT_METHOD_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_METHOD_PRICE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', PAYMENT_METHOD_CODE = ''' + Convert(NVarChar(4000), PAYMENT_METHOD_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE And i.PAYMENT_METHOD_CODE = d.PAYMENT_METHOD_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FM_CP_PAYMENT_METHOD_PRICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', FM_CP_CODE = ' + Case When FM_CP_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FM_CP_CODE) + '''' End + ', PAYMENT_METHOD_CODE = ' + Case When PAYMENT_METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_METHOD_CODE) + '''' End + ', PAYMENT_METHOD_PRICE = ' + Case When PAYMENT_METHOD_PRICE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_METHOD_PRICE) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', FM_CP_CODE = ''' + Convert(NVarChar(4000), FM_CP_CODE) + ''', PAYMENT_METHOD_CODE = ''' + Convert(NVarChar(4000), PAYMENT_METHOD_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.FM_CP_CODE = d.FM_CP_CODE And i.PAYMENT_METHOD_CODE = d.PAYMENT_METHOD_CODE)  End
GO

ALTER TABLE [dbo].[FM_CP_PAYMENT_METHOD_PRICE] ENABLE TRIGGER [TG_AUD_FM_CP_PAYMENT_METHOD_PRICE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_FUNCTION_GROUP_OnDeleted]
On [dbo].[FUNCTION_GROUP]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FUNCTION_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupID) + '''' End + ', FunctionGroupEngName = ' + Case When FunctionGroupEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupEngName) + '''' End + ', FunctionGroupChiName = ' + Case When FunctionGroupChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupChiName) + '''' End + ', ParentGroupID = ' + Case When ParentGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ParentGroupID) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuChiName) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateDate, 121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateDate, 121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuOrder) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FunctionGroupID = ''' + Convert(NVarChar(4000), FunctionGroupID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FUNCTION_GROUP] ENABLE TRIGGER [TG_AUD_FUNCTION_GROUP_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_FUNCTION_GROUP_OnInserted]
On [dbo].[FUNCTION_GROUP]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FUNCTION_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FunctionGroupID) + '''' End + ', FunctionGroupEngName = ' + Case When FunctionGroupEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FunctionGroupEngName) + '''' End + ', FunctionGroupChiName = ' + Case When FunctionGroupChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FunctionGroupChiName) + '''' End + ', ParentGroupID = ' + Case When ParentGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ParentGroupID) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MenuChiName) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateDate,121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CreateDate,121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MenuOrder) + '''' End + '', 4000), @PROJECT_ID, Left('FunctionGroupID = ''' + Convert(NVarChar(4000), FunctionGroupID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FUNCTION_GROUP] ENABLE TRIGGER [TG_AUD_FUNCTION_GROUP_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_FUNCTION_GROUP_OnUpdated]
On [dbo].[FUNCTION_GROUP]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FUNCTION_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.FunctionGroupID Is Null And d.FunctionGroupID Is Not Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Not Null And i.FunctionGroupID <> d.FunctionGroupID)) Then 'FunctionGroupID = ' + Case When d.FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FunctionGroupID) + '''' End + ', ' Else '' End +  Case When ((i.FunctionGroupEngName Is Null And d.FunctionGroupEngName Is Not Null) Or (i.FunctionGroupEngName Is Not Null And d.FunctionGroupEngName Is Null) Or (i.FunctionGroupEngName Is Not Null And d.FunctionGroupEngName Is Not Null And i.FunctionGroupEngName <> d.FunctionGroupEngName)) Then 'FunctionGroupEngName = ' + Case When d.FunctionGroupEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FunctionGroupEngName) + '''' End + ', ' Else '' End +  Case When ((i.FunctionGroupChiName Is Null And d.FunctionGroupChiName Is Not Null) Or (i.FunctionGroupChiName Is Not Null And d.FunctionGroupChiName Is Null) Or (i.FunctionGroupChiName Is Not Null And d.FunctionGroupChiName Is Not Null And i.FunctionGroupChiName <> d.FunctionGroupChiName)) Then 'FunctionGroupChiName = ' + Case When d.FunctionGroupChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FunctionGroupChiName) + '''' End + ', ' Else '' End +  Case When ((i.ParentGroupID Is Null And d.ParentGroupID Is Not Null) Or (i.ParentGroupID Is Not Null And d.ParentGroupID Is Null) Or (i.ParentGroupID Is Not Null And d.ParentGroupID Is Not Null And i.ParentGroupID <> d.ParentGroupID)) Then 'ParentGroupID = ' + Case When d.ParentGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ParentGroupID) + '''' End + ', ' Else '' End +  Case When ((i.MenuEngName Is Null And d.MenuEngName Is Not Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Not Null And i.MenuEngName <> d.MenuEngName)) Then 'MenuEngName = ' + Case When d.MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MenuEngName) + '''' End + ', ' Else '' End +  Case When ((i.MenuChiName Is Null And d.MenuChiName Is Not Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Not Null And i.MenuChiName <> d.MenuChiName)) Then 'MenuChiName = ' + Case When d.MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MenuChiName) + '''' End + ', ' Else '' End +  Case When ((i.UpdateServerName Is Null And d.UpdateServerName Is Not Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Not Null And i.UpdateServerName <> d.UpdateServerName)) Then 'UpdateServerName = ' + Case When d.UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateServerName) + '''' End + ', ' Else '' End +  Case When ((i.UpdateFunctionID Is Null And d.UpdateFunctionID Is Not Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Not Null And i.UpdateFunctionID <> d.UpdateFunctionID)) Then 'UpdateFunctionID = ' + Case When d.UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.UpdateUser Is Null And d.UpdateUser Is Not Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Not Null And i.UpdateUser <> d.UpdateUser)) Then 'UpdateUser = ' + Case When d.UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateUser) + '''' End + ', ' Else '' End +  Case When ((i.UpdateDate Is Null And d.UpdateDate Is Not Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Not Null And i.UpdateDate <> d.UpdateDate)) Then 'UpdateDate = ' + Case When d.UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.CreateFunctionID Is Null And d.CreateFunctionID Is Not Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Not Null And i.CreateFunctionID <> d.CreateFunctionID)) Then 'CreateFunctionID = ' + Case When d.CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CreateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.CreateUser Is Null And d.CreateUser Is Not Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Not Null And i.CreateUser <> d.CreateUser)) Then 'CreateUser = ' + Case When d.CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CreateUser) + '''' End + ', ' Else '' End +  Case When ((i.CreateDate Is Null And d.CreateDate Is Not Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Not Null And i.CreateDate <> d.CreateDate)) Then 'CreateDate = ' + Case When d.CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CreateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.MenuOrder Is Null And d.MenuOrder Is Not Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Not Null And i.MenuOrder <> d.MenuOrder)) Then 'MenuOrder = ' + Case When d.MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MenuOrder) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.FunctionGroupID Is Null And d.FunctionGroupID Is Not Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Not Null And i.FunctionGroupID <> d.FunctionGroupID)) Then 'FunctionGroupID = ' + Case When i.FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FunctionGroupID) + '''' End + ', ' Else '' End +  Case When ((i.FunctionGroupEngName Is Null And d.FunctionGroupEngName Is Not Null) Or (i.FunctionGroupEngName Is Not Null And d.FunctionGroupEngName Is Null) Or (i.FunctionGroupEngName Is Not Null And d.FunctionGroupEngName Is Not Null And i.FunctionGroupEngName <> d.FunctionGroupEngName)) Then 'FunctionGroupEngName = ' + Case When i.FunctionGroupEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FunctionGroupEngName) + '''' End + ', ' Else '' End +  Case When ((i.FunctionGroupChiName Is Null And d.FunctionGroupChiName Is Not Null) Or (i.FunctionGroupChiName Is Not Null And d.FunctionGroupChiName Is Null) Or (i.FunctionGroupChiName Is Not Null And d.FunctionGroupChiName Is Not Null And i.FunctionGroupChiName <> d.FunctionGroupChiName)) Then 'FunctionGroupChiName = ' + Case When i.FunctionGroupChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FunctionGroupChiName) + '''' End + ', ' Else '' End +  Case When ((i.ParentGroupID Is Null And d.ParentGroupID Is Not Null) Or (i.ParentGroupID Is Not Null And d.ParentGroupID Is Null) Or (i.ParentGroupID Is Not Null And d.ParentGroupID Is Not Null And i.ParentGroupID <> d.ParentGroupID)) Then 'ParentGroupID = ' + Case When i.ParentGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ParentGroupID) + '''' End + ', ' Else '' End +  Case When ((i.MenuEngName Is Null And d.MenuEngName Is Not Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Not Null And i.MenuEngName <> d.MenuEngName)) Then 'MenuEngName = ' + Case When i.MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MenuEngName) + '''' End + ', ' Else '' End +  Case When ((i.MenuChiName Is Null And d.MenuChiName Is Not Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Not Null And i.MenuChiName <> d.MenuChiName)) Then 'MenuChiName = ' + Case When i.MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MenuChiName) + '''' End + ', ' Else '' End +  Case When ((i.UpdateServerName Is Null And d.UpdateServerName Is Not Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Not Null And i.UpdateServerName <> d.UpdateServerName)) Then 'UpdateServerName = ' + Case When i.UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateServerName) + '''' End + ', ' Else '' End +  Case When ((i.UpdateFunctionID Is Null And d.UpdateFunctionID Is Not Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Not Null And i.UpdateFunctionID <> d.UpdateFunctionID)) Then 'UpdateFunctionID = ' + Case When i.UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.UpdateUser Is Null And d.UpdateUser Is Not Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Not Null And i.UpdateUser <> d.UpdateUser)) Then 'UpdateUser = ' + Case When i.UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateUser) + '''' End + ', ' Else '' End +  Case When ((i.UpdateDate Is Null And d.UpdateDate Is Not Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Not Null And i.UpdateDate <> d.UpdateDate)) Then 'UpdateDate = ' + Case When i.UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.CreateFunctionID Is Null And d.CreateFunctionID Is Not Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Not Null And i.CreateFunctionID <> d.CreateFunctionID)) Then 'CreateFunctionID = ' + Case When i.CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CreateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.CreateUser Is Null And d.CreateUser Is Not Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Not Null And i.CreateUser <> d.CreateUser)) Then 'CreateUser = ' + Case When i.CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CreateUser) + '''' End + ', ' Else '' End +  Case When ((i.CreateDate Is Null And d.CreateDate Is Not Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Not Null And i.CreateDate <> d.CreateDate)) Then 'CreateDate = ' + Case When i.CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CreateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.MenuOrder Is Null And d.MenuOrder Is Not Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Not Null And i.MenuOrder <> d.MenuOrder)) Then 'MenuOrder = ' + Case When i.MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MenuOrder) + '''' End + ', ' Else '' End)  ChangedValue, Left('FunctionGroupID = ''' + Convert(NVarChar(4000), i.FunctionGroupID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.FunctionGroupID = d.FunctionGroupID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FUNCTION_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupID) + '''' End + ', FunctionGroupEngName = ' + Case When FunctionGroupEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupEngName) + '''' End + ', FunctionGroupChiName = ' + Case When FunctionGroupChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupChiName) + '''' End + ', ParentGroupID = ' + Case When ParentGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ParentGroupID) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuChiName) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateDate, 121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateDate, 121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuOrder) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FunctionGroupID = ''' + Convert(NVarChar(4000), FunctionGroupID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.FunctionGroupID = d.FunctionGroupID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FUNCTION_GROUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupID) + '''' End + ', FunctionGroupEngName = ' + Case When FunctionGroupEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupEngName) + '''' End + ', FunctionGroupChiName = ' + Case When FunctionGroupChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupChiName) + '''' End + ', ParentGroupID = ' + Case When ParentGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ParentGroupID) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuChiName) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateDate, 121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateDate, 121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuOrder) + '''' End + '', 4000), @PROJECT_ID, Left('FunctionGroupID = ''' + Convert(NVarChar(4000), FunctionGroupID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.FunctionGroupID = d.FunctionGroupID)  End
GO

ALTER TABLE [dbo].[FUNCTION_GROUP] ENABLE TRIGGER [TG_AUD_FUNCTION_GROUP_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_FUNCTION_PROFILE_OnDeleted]
On [dbo].[FUNCTION_PROFILE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('FUNCTION_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('Fn_ID = ' + Case When Fn_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Fn_ID) + '''' End + ', FunctionEngName = ' + Case When FunctionEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionEngName) + '''' End + ', FunctionChiName = ' + Case When FunctionChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionChiName) + '''' End + ', FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupID) + '''' End + ', InMenu = ' + Case When InMenu Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InMenu) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuChiName) + '''' End + ', AccessLevelCode = ' + Case When AccessLevelCode Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AccessLevelCode) + '''' End + ', AccessPath = ' + Case When AccessPath Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AccessPath) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateDate, 121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateDate, 121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuOrder) + '''' End + ', InFunctionAccess = ' + Case When InFunctionAccess Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InFunctionAccess) + '''' End + 'InAuditLog = ' + Case When InAuditLog Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InAuditLog) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('Fn_ID = ''' + Convert(NVarChar(4000), Fn_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[FUNCTION_PROFILE] ENABLE TRIGGER [TG_AUD_FUNCTION_PROFILE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_FUNCTION_PROFILE_OnInserted]
On [dbo].[FUNCTION_PROFILE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('FUNCTION_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('Fn_ID = ' + Case When Fn_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Fn_ID) + '''' End + ', FunctionEngName = ' + Case When FunctionEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FunctionEngName) + '''' End + ', FunctionChiName = ' + Case When FunctionChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FunctionChiName) + '''' End + ', FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FunctionGroupID) + '''' End + ', InMenu = ' + Case When InMenu Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),InMenu) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MenuChiName) + '''' End + ', AccessLevelCode = ' + Case When AccessLevelCode Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AccessLevelCode) + '''' End + ', AccessPath = ' + Case When AccessPath Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AccessPath) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UpdateDate,121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CreateDate,121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MenuOrder) + '''' End + ', InFunctionAccess = ' + Case When InFunctionAccess Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),InFunctionAccess) + '''' End + ', InAuditLog = ' + Case When InAuditLog Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),InAuditLog) + '''' End + '', 4000), @PROJECT_ID, Left('Fn_ID = ''' + Convert(NVarChar(4000), Fn_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[FUNCTION_PROFILE] ENABLE TRIGGER [TG_AUD_FUNCTION_PROFILE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_FUNCTION_PROFILE_OnUpdated]
On [dbo].[FUNCTION_PROFILE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FUNCTION_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.Fn_ID Is Null And d.Fn_ID Is Not Null) Or (i.Fn_ID Is Not Null And d.Fn_ID Is Null) Or (i.Fn_ID Is Not Null And d.Fn_ID Is Not Null And i.Fn_ID <> d.Fn_ID)) Then 'Fn_ID = ' + Case When d.Fn_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Fn_ID) + '''' End + ', ' Else '' End +  Case When ((i.FunctionEngName Is Null And d.FunctionEngName Is Not Null) Or (i.FunctionEngName Is Not Null And d.FunctionEngName Is Null) Or (i.FunctionEngName Is Not Null And d.FunctionEngName Is Not Null And i.FunctionEngName <> d.FunctionEngName)) Then 'FunctionEngName = ' + Case When d.FunctionEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FunctionEngName) + '''' End + ', ' Else '' End +  Case When ((i.FunctionChiName Is Null And d.FunctionChiName Is Not Null) Or (i.FunctionChiName Is Not Null And d.FunctionChiName Is Null) Or (i.FunctionChiName Is Not Null And d.FunctionChiName Is Not Null And i.FunctionChiName <> d.FunctionChiName)) Then 'FunctionChiName = ' + Case When d.FunctionChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FunctionChiName) + '''' End + ', ' Else '' End +  Case When ((i.FunctionGroupID Is Null And d.FunctionGroupID Is Not Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Not Null And i.FunctionGroupID <> d.FunctionGroupID)) Then 'FunctionGroupID = ' + Case When d.FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FunctionGroupID) + '''' End + ', ' Else '' End +  Case When ((i.InMenu Is Null And d.InMenu Is Not Null) Or (i.InMenu Is Not Null And d.InMenu Is Null) Or (i.InMenu Is Not Null And d.InMenu Is Not Null And i.InMenu <> d.InMenu)) Then 'InMenu = ' + Case When d.InMenu Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.InMenu) + '''' End + ', ' Else '' End +  Case When ((i.MenuEngName Is Null And d.MenuEngName Is Not Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Not Null And i.MenuEngName <> d.MenuEngName)) Then 'MenuEngName = ' + Case When d.MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MenuEngName) + '''' End + ', ' Else '' End +  Case When ((i.MenuChiName Is Null And d.MenuChiName Is Not Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Not Null And i.MenuChiName <> d.MenuChiName)) Then 'MenuChiName = ' + Case When d.MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MenuChiName) + '''' End + ', ' Else '' End +  Case When ((i.AccessLevelCode Is Null And d.AccessLevelCode Is Not Null) Or (i.AccessLevelCode Is Not Null And d.AccessLevelCode Is Null) Or (i.AccessLevelCode Is Not Null And d.AccessLevelCode Is Not Null And i.AccessLevelCode <> d.AccessLevelCode)) Then 'AccessLevelCode = ' + Case When d.AccessLevelCode Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AccessLevelCode) + '''' End + ', ' Else '' End +  Case When ((i.AccessPath Is Null And d.AccessPath Is Not Null) Or (i.AccessPath Is Not Null And d.AccessPath Is Null) Or (i.AccessPath Is Not Null And d.AccessPath Is Not Null And i.AccessPath <> d.AccessPath)) Then 'AccessPath = ' + Case When d.AccessPath Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AccessPath) + '''' End + ', ' Else '' End +  Case When ((i.UpdateServerName Is Null And d.UpdateServerName Is Not Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Not Null And i.UpdateServerName <> d.UpdateServerName)) Then 'UpdateServerName = ' + Case When d.UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateServerName) + '''' End + ', ' Else '' End +  Case When ((i.UpdateFunctionID Is Null And d.UpdateFunctionID Is Not Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Not Null And i.UpdateFunctionID <> d.UpdateFunctionID)) Then 'UpdateFunctionID = ' + Case When d.UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.UpdateUser Is Null And d.UpdateUser Is Not Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Not Null And i.UpdateUser <> d.UpdateUser)) Then 'UpdateUser = ' + Case When d.UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateUser) + '''' End + ', ' Else '' End +  Case When ((i.UpdateDate Is Null And d.UpdateDate Is Not Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Not Null And i.UpdateDate <> d.UpdateDate)) Then 'UpdateDate = ' + Case When d.UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UpdateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.CreateFunctionID Is Null And d.CreateFunctionID Is Not Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Not Null And i.CreateFunctionID <> d.CreateFunctionID)) Then 'CreateFunctionID = ' + Case When d.CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CreateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.CreateUser Is Null And d.CreateUser Is Not Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Not Null And i.CreateUser <> d.CreateUser)) Then 'CreateUser = ' + Case When d.CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CreateUser) + '''' End + ', ' Else '' End +  Case When ((i.CreateDate Is Null And d.CreateDate Is Not Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Not Null And i.CreateDate <> d.CreateDate)) Then 'CreateDate = ' + Case When d.CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CreateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.MenuOrder Is Null And d.MenuOrder Is Not Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Not Null And i.MenuOrder <> d.MenuOrder)) Then 'MenuOrder = ' + Case When d.MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MenuOrder) + '''' End + ', ' Else '' End +  Case When ((i.InFunctionAccess Is Null And d.InFunctionAccess Is Not Null) Or (i.InFunctionAccess Is Not Null And d.InFunctionAccess Is Null) Or (i.InFunctionAccess Is Not Null And d.InFunctionAccess Is Not Null And i.InFunctionAccess <> d.InFunctionAccess)) Then 'InFunctionAccess = ' + Case When d.InFunctionAccess Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.InFunctionAccess) + '''' End + ', ' Else '' End +  Case When ((i.InAuditLog Is Null And d.InAuditLog Is Not Null) Or (i.InAuditLog Is Not Null And d.InAuditLog Is Null) Or (i.InAuditLog Is Not Null And d.InAuditLog Is Not Null And i.InAuditLog <> d.InAuditLog)) Then 'InAuditLog = ' + Case When d.InAuditLog Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.InAuditLog) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.Fn_ID Is Null And d.Fn_ID Is Not Null) Or (i.Fn_ID Is Not Null And d.Fn_ID Is Null) Or (i.Fn_ID Is Not Null And d.Fn_ID Is Not Null And i.Fn_ID <> d.Fn_ID)) Then 'Fn_ID = ' + Case When i.Fn_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Fn_ID) + '''' End + ', ' Else '' End +  Case When ((i.FunctionEngName Is Null And d.FunctionEngName Is Not Null) Or (i.FunctionEngName Is Not Null And d.FunctionEngName Is Null) Or (i.FunctionEngName Is Not Null And d.FunctionEngName Is Not Null And i.FunctionEngName <> d.FunctionEngName)) Then 'FunctionEngName = ' + Case When i.FunctionEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FunctionEngName) + '''' End + ', ' Else '' End +  Case When ((i.FunctionChiName Is Null And d.FunctionChiName Is Not Null) Or (i.FunctionChiName Is Not Null And d.FunctionChiName Is Null) Or (i.FunctionChiName Is Not Null And d.FunctionChiName Is Not Null And i.FunctionChiName <> d.FunctionChiName)) Then 'FunctionChiName = ' + Case When i.FunctionChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FunctionChiName) + '''' End + ', ' Else '' End +  Case When ((i.FunctionGroupID Is Null And d.FunctionGroupID Is Not Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Null) Or (i.FunctionGroupID Is Not Null And d.FunctionGroupID Is Not Null And i.FunctionGroupID <> d.FunctionGroupID)) Then 'FunctionGroupID = ' + Case When i.FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FunctionGroupID) + '''' End + ', ' Else '' End +  Case When ((i.InMenu Is Null And d.InMenu Is Not Null) Or (i.InMenu Is Not Null And d.InMenu Is Null) Or (i.InMenu Is Not Null And d.InMenu Is Not Null And i.InMenu <> d.InMenu)) Then 'InMenu = ' + Case When i.InMenu Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.InMenu) + '''' End + ', ' Else '' End +  Case When ((i.MenuEngName Is Null And d.MenuEngName Is Not Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Null) Or (i.MenuEngName Is Not Null And d.MenuEngName Is Not Null And i.MenuEngName <> d.MenuEngName)) Then 'MenuEngName = ' + Case When i.MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MenuEngName) + '''' End + ', ' Else '' End +  Case When ((i.MenuChiName Is Null And d.MenuChiName Is Not Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Null) Or (i.MenuChiName Is Not Null And d.MenuChiName Is Not Null And i.MenuChiName <> d.MenuChiName)) Then 'MenuChiName = ' + Case When i.MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MenuChiName) + '''' End + ', ' Else '' End +  Case When ((i.AccessLevelCode Is Null And d.AccessLevelCode Is Not Null) Or (i.AccessLevelCode Is Not Null And d.AccessLevelCode Is Null) Or (i.AccessLevelCode Is Not Null And d.AccessLevelCode Is Not Null And i.AccessLevelCode <> d.AccessLevelCode)) Then 'AccessLevelCode = ' + Case When i.AccessLevelCode Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AccessLevelCode) + '''' End + ', ' Else '' End +  Case When ((i.AccessPath Is Null And d.AccessPath Is Not Null) Or (i.AccessPath Is Not Null And d.AccessPath Is Null) Or (i.AccessPath Is Not Null And d.AccessPath Is Not Null And i.AccessPath <> d.AccessPath)) Then 'AccessPath = ' + Case When i.AccessPath Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AccessPath) + '''' End + ', ' Else '' End +  Case When ((i.UpdateServerName Is Null And d.UpdateServerName Is Not Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Null) Or (i.UpdateServerName Is Not Null And d.UpdateServerName Is Not Null And i.UpdateServerName <> d.UpdateServerName)) Then 'UpdateServerName = ' + Case When i.UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateServerName) + '''' End + ', ' Else '' End +  Case When ((i.UpdateFunctionID Is Null And d.UpdateFunctionID Is Not Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Null) Or (i.UpdateFunctionID Is Not Null And d.UpdateFunctionID Is Not Null And i.UpdateFunctionID <> d.UpdateFunctionID)) Then 'UpdateFunctionID = ' + Case When i.UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.UpdateUser Is Null And d.UpdateUser Is Not Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Null) Or (i.UpdateUser Is Not Null And d.UpdateUser Is Not Null And i.UpdateUser <> d.UpdateUser)) Then 'UpdateUser = ' + Case When i.UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateUser) + '''' End + ', ' Else '' End +  Case When ((i.UpdateDate Is Null And d.UpdateDate Is Not Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Null) Or (i.UpdateDate Is Not Null And d.UpdateDate Is Not Null And i.UpdateDate <> d.UpdateDate)) Then 'UpdateDate = ' + Case When i.UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UpdateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.CreateFunctionID Is Null And d.CreateFunctionID Is Not Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Null) Or (i.CreateFunctionID Is Not Null And d.CreateFunctionID Is Not Null And i.CreateFunctionID <> d.CreateFunctionID)) Then 'CreateFunctionID = ' + Case When i.CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CreateFunctionID) + '''' End + ', ' Else '' End +  Case When ((i.CreateUser Is Null And d.CreateUser Is Not Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Null) Or (i.CreateUser Is Not Null And d.CreateUser Is Not Null And i.CreateUser <> d.CreateUser)) Then 'CreateUser = ' + Case When i.CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CreateUser) + '''' End + ', ' Else '' End +  Case When ((i.CreateDate Is Null And d.CreateDate Is Not Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Null) Or (i.CreateDate Is Not Null And d.CreateDate Is Not Null And i.CreateDate <> d.CreateDate)) Then 'CreateDate = ' + Case When i.CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CreateDate, 121) + '''' End + ', ' Else '' End +  Case When ((i.MenuOrder Is Null And d.MenuOrder Is Not Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Null) Or (i.MenuOrder Is Not Null And d.MenuOrder Is Not Null And i.MenuOrder <> d.MenuOrder)) Then 'MenuOrder = ' + Case When i.MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MenuOrder) + '''' End + ', ' Else '' End +  Case When ((i.InFunctionAccess Is Null And d.InFunctionAccess Is Not Null) Or (i.InFunctionAccess Is Not Null And d.InFunctionAccess Is Null) Or (i.InFunctionAccess Is Not Null And d.InFunctionAccess Is Not Null And i.InFunctionAccess <> d.InFunctionAccess)) Then 'InFunctionAccess = ' + Case When i.InFunctionAccess Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.InFunctionAccess) + '''' End + ', ' Else '' End +  Case When ((i.InAuditLog Is Null And d.InAuditLog Is Not Null) Or (i.InAuditLog Is Not Null And d.InAuditLog Is Null) Or (i.InAuditLog Is Not Null And d.InAuditLog Is Not Null And i.InAuditLog <> d.InAuditLog)) Then 'InAuditLog = ' + Case When i.InAuditLog Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.InAuditLog) + '''' End + ', ' Else '' End)  ChangedValue, Left('Fn_ID = ''' + Convert(NVarChar(4000), i.Fn_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.Fn_ID = d.Fn_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('FUNCTION_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('Fn_ID = ' + Case When Fn_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Fn_ID) + '''' End + ', FunctionEngName = ' + Case When FunctionEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionEngName) + '''' End + ', FunctionChiName = ' + Case When FunctionChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionChiName) + '''' End + ', FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupID) + '''' End + ', InMenu = ' + Case When InMenu Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InMenu) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuChiName) + '''' End + ', AccessLevelCode = ' + Case When AccessLevelCode Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AccessLevelCode) + '''' End + ', AccessPath = ' + Case When AccessPath Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AccessPath) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateDate, 121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateDate, 121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuOrder) + '''' End + ', InFunctionAccess = ' + Case When InFunctionAccess Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InFunctionAccess) + '''' End + ', InAuditLog = ' + Case When InAuditLog Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InAuditLog) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('Fn_ID = ''' + Convert(NVarChar(4000), Fn_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.Fn_ID = d.Fn_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('FUNCTION_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('Fn_ID = ' + Case When Fn_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Fn_ID) + '''' End + ', FunctionEngName = ' + Case When FunctionEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionEngName) + '''' End + ', FunctionChiName = ' + Case When FunctionChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionChiName) + '''' End + ', FunctionGroupID = ' + Case When FunctionGroupID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FunctionGroupID) + '''' End + ', InMenu = ' + Case When InMenu Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InMenu) + '''' End + ', MenuEngName = ' + Case When MenuEngName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuEngName) + '''' End + ', MenuChiName = ' + Case When MenuChiName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuChiName) + '''' End + ', AccessLevelCode = ' + Case When AccessLevelCode Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AccessLevelCode) + '''' End + ', AccessPath = ' + Case When AccessPath Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AccessPath) + '''' End + ', UpdateServerName = ' + Case When UpdateServerName Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateServerName) + '''' End + ', UpdateFunctionID = ' + Case When UpdateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateFunctionID) + '''' End + ', UpdateUser = ' + Case When UpdateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateUser) + '''' End + ', UpdateDate = ' + Case When UpdateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UpdateDate, 121) + '''' End + ', CreateFunctionID = ' + Case When CreateFunctionID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateFunctionID) + '''' End + ', CreateUser = ' + Case When CreateUser Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateUser) + '''' End + ', CreateDate = ' + Case When CreateDate Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CreateDate, 121) + '''' End + ', MenuOrder = ' + Case When MenuOrder Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MenuOrder) + '''' End + ', InFunctionAccess = ' + Case When InFunctionAccess Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InFunctionAccess) + '''' End + ', InAuditLog = ' + Case When InAuditLog Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), InAuditLog) + '''' End + '', 4000), @PROJECT_ID, Left('Fn_ID = ''' + Convert(NVarChar(4000), Fn_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.Fn_ID = d.Fn_ID)  End
GO

ALTER TABLE [dbo].[FUNCTION_PROFILE] ENABLE TRIGGER [TG_AUD_FUNCTION_PROFILE_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_LAW_FIRMS_OnDeleted]
On [dbo].[LAW_FIRMS]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('LAW_FIRMS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', LF_NAME_CHI = ' + Case When LF_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_NAME_CHI) + '''' End + ', LF_NAME_ENG = ' + Case When LF_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_NAME_ENG) + '''' End + ', LF_ADD_CHI_1 = ' + Case When LF_ADD_CHI_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_1) + '''' End + ', LF_ADD_CHI_2 = ' + Case When LF_ADD_CHI_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_2) + '''' End + ', LF_ADD_CHI_3 = ' + Case When LF_ADD_CHI_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_3) + '''' End + ', LF_ADD_ENG_1 = ' + Case When LF_ADD_ENG_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_1) + '''' End + ', LF_ADD_ENG_2 = ' + Case When LF_ADD_ENG_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_2) + '''' End + ', LF_ADD_ENG_3 = ' + Case When LF_ADD_ENG_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_3) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[LAW_FIRMS] ENABLE TRIGGER [TG_AUD_LAW_FIRMS_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_LAW_FIRMS_OnInserted]
On [dbo].[LAW_FIRMS]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('LAW_FIRMS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_CODE) + '''' End + ', LF_NAME_CHI = ' + Case When LF_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_NAME_CHI) + '''' End + ', LF_NAME_ENG = ' + Case When LF_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_NAME_ENG) + '''' End + ', LF_ADD_CHI_1 = ' + Case When LF_ADD_CHI_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_ADD_CHI_1) + '''' End + ', LF_ADD_CHI_2 = ' + Case When LF_ADD_CHI_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_ADD_CHI_2) + '''' End + ', LF_ADD_CHI_3 = ' + Case When LF_ADD_CHI_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_ADD_CHI_3) + '''' End + ', LF_ADD_ENG_1 = ' + Case When LF_ADD_ENG_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_ADD_ENG_1) + '''' End + ', LF_ADD_ENG_2 = ' + Case When LF_ADD_ENG_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_ADD_ENG_2) + '''' End + ', LF_ADD_ENG_3 = ' + Case When LF_ADD_ENG_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_ADD_ENG_3) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[LAW_FIRMS] ENABLE TRIGGER [TG_AUD_LAW_FIRMS_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_LAW_FIRMS_OnUpdated]
On [dbo].[LAW_FIRMS]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('LAW_FIRMS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.LF_CODE Is Null And d.LF_CODE Is Not Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Not Null And i.LF_CODE <> d.LF_CODE)) Then 'LF_CODE = ' + Case When d.LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.LF_NAME_CHI Is Null And d.LF_NAME_CHI Is Not Null) Or (i.LF_NAME_CHI Is Not Null And d.LF_NAME_CHI Is Null) Or (i.LF_NAME_CHI Is Not Null And d.LF_NAME_CHI Is Not Null And i.LF_NAME_CHI <> d.LF_NAME_CHI)) Then 'LF_NAME_CHI = ' + Case When d.LF_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_NAME_CHI) + '''' End + ', ' Else '' End +  Case When ((i.LF_NAME_ENG Is Null And d.LF_NAME_ENG Is Not Null) Or (i.LF_NAME_ENG Is Not Null And d.LF_NAME_ENG Is Null) Or (i.LF_NAME_ENG Is Not Null And d.LF_NAME_ENG Is Not Null And i.LF_NAME_ENG <> d.LF_NAME_ENG)) Then 'LF_NAME_ENG = ' + Case When d.LF_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_NAME_ENG) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_CHI_1 Is Null And d.LF_ADD_CHI_1 Is Not Null) Or (i.LF_ADD_CHI_1 Is Not Null And d.LF_ADD_CHI_1 Is Null) Or (i.LF_ADD_CHI_1 Is Not Null And d.LF_ADD_CHI_1 Is Not Null And i.LF_ADD_CHI_1 <> d.LF_ADD_CHI_1)) Then 'LF_ADD_CHI_1 = ' + Case When d.LF_ADD_CHI_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_ADD_CHI_1) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_CHI_2 Is Null And d.LF_ADD_CHI_2 Is Not Null) Or (i.LF_ADD_CHI_2 Is Not Null And d.LF_ADD_CHI_2 Is Null) Or (i.LF_ADD_CHI_2 Is Not Null And d.LF_ADD_CHI_2 Is Not Null And i.LF_ADD_CHI_2 <> d.LF_ADD_CHI_2)) Then 'LF_ADD_CHI_2 = ' + Case When d.LF_ADD_CHI_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_ADD_CHI_2) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_CHI_3 Is Null And d.LF_ADD_CHI_3 Is Not Null) Or (i.LF_ADD_CHI_3 Is Not Null And d.LF_ADD_CHI_3 Is Null) Or (i.LF_ADD_CHI_3 Is Not Null And d.LF_ADD_CHI_3 Is Not Null And i.LF_ADD_CHI_3 <> d.LF_ADD_CHI_3)) Then 'LF_ADD_CHI_3 = ' + Case When d.LF_ADD_CHI_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_ADD_CHI_3) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_ENG_1 Is Null And d.LF_ADD_ENG_1 Is Not Null) Or (i.LF_ADD_ENG_1 Is Not Null And d.LF_ADD_ENG_1 Is Null) Or (i.LF_ADD_ENG_1 Is Not Null And d.LF_ADD_ENG_1 Is Not Null And i.LF_ADD_ENG_1 <> d.LF_ADD_ENG_1)) Then 'LF_ADD_ENG_1 = ' + Case When d.LF_ADD_ENG_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_ADD_ENG_1) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_ENG_2 Is Null And d.LF_ADD_ENG_2 Is Not Null) Or (i.LF_ADD_ENG_2 Is Not Null And d.LF_ADD_ENG_2 Is Null) Or (i.LF_ADD_ENG_2 Is Not Null And d.LF_ADD_ENG_2 Is Not Null And i.LF_ADD_ENG_2 <> d.LF_ADD_ENG_2)) Then 'LF_ADD_ENG_2 = ' + Case When d.LF_ADD_ENG_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_ADD_ENG_2) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_ENG_3 Is Null And d.LF_ADD_ENG_3 Is Not Null) Or (i.LF_ADD_ENG_3 Is Not Null And d.LF_ADD_ENG_3 Is Null) Or (i.LF_ADD_ENG_3 Is Not Null And d.LF_ADD_ENG_3 Is Not Null And i.LF_ADD_ENG_3 <> d.LF_ADD_ENG_3)) Then 'LF_ADD_ENG_3 = ' + Case When d.LF_ADD_ENG_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_ADD_ENG_3) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.LF_CODE Is Null And d.LF_CODE Is Not Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Not Null And i.LF_CODE <> d.LF_CODE)) Then 'LF_CODE = ' + Case When i.LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.LF_NAME_CHI Is Null And d.LF_NAME_CHI Is Not Null) Or (i.LF_NAME_CHI Is Not Null And d.LF_NAME_CHI Is Null) Or (i.LF_NAME_CHI Is Not Null And d.LF_NAME_CHI Is Not Null And i.LF_NAME_CHI <> d.LF_NAME_CHI)) Then 'LF_NAME_CHI = ' + Case When i.LF_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_NAME_CHI) + '''' End + ', ' Else '' End +  Case When ((i.LF_NAME_ENG Is Null And d.LF_NAME_ENG Is Not Null) Or (i.LF_NAME_ENG Is Not Null And d.LF_NAME_ENG Is Null) Or (i.LF_NAME_ENG Is Not Null And d.LF_NAME_ENG Is Not Null And i.LF_NAME_ENG <> d.LF_NAME_ENG)) Then 'LF_NAME_ENG = ' + Case When i.LF_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_NAME_ENG) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_CHI_1 Is Null And d.LF_ADD_CHI_1 Is Not Null) Or (i.LF_ADD_CHI_1 Is Not Null And d.LF_ADD_CHI_1 Is Null) Or (i.LF_ADD_CHI_1 Is Not Null And d.LF_ADD_CHI_1 Is Not Null And i.LF_ADD_CHI_1 <> d.LF_ADD_CHI_1)) Then 'LF_ADD_CHI_1 = ' + Case When i.LF_ADD_CHI_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_ADD_CHI_1) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_CHI_2 Is Null And d.LF_ADD_CHI_2 Is Not Null) Or (i.LF_ADD_CHI_2 Is Not Null And d.LF_ADD_CHI_2 Is Null) Or (i.LF_ADD_CHI_2 Is Not Null And d.LF_ADD_CHI_2 Is Not Null And i.LF_ADD_CHI_2 <> d.LF_ADD_CHI_2)) Then 'LF_ADD_CHI_2 = ' + Case When i.LF_ADD_CHI_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_ADD_CHI_2) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_CHI_3 Is Null And d.LF_ADD_CHI_3 Is Not Null) Or (i.LF_ADD_CHI_3 Is Not Null And d.LF_ADD_CHI_3 Is Null) Or (i.LF_ADD_CHI_3 Is Not Null And d.LF_ADD_CHI_3 Is Not Null And i.LF_ADD_CHI_3 <> d.LF_ADD_CHI_3)) Then 'LF_ADD_CHI_3 = ' + Case When i.LF_ADD_CHI_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_ADD_CHI_3) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_ENG_1 Is Null And d.LF_ADD_ENG_1 Is Not Null) Or (i.LF_ADD_ENG_1 Is Not Null And d.LF_ADD_ENG_1 Is Null) Or (i.LF_ADD_ENG_1 Is Not Null And d.LF_ADD_ENG_1 Is Not Null And i.LF_ADD_ENG_1 <> d.LF_ADD_ENG_1)) Then 'LF_ADD_ENG_1 = ' + Case When i.LF_ADD_ENG_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_ADD_ENG_1) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_ENG_2 Is Null And d.LF_ADD_ENG_2 Is Not Null) Or (i.LF_ADD_ENG_2 Is Not Null And d.LF_ADD_ENG_2 Is Null) Or (i.LF_ADD_ENG_2 Is Not Null And d.LF_ADD_ENG_2 Is Not Null And i.LF_ADD_ENG_2 <> d.LF_ADD_ENG_2)) Then 'LF_ADD_ENG_2 = ' + Case When i.LF_ADD_ENG_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_ADD_ENG_2) + '''' End + ', ' Else '' End +  Case When ((i.LF_ADD_ENG_3 Is Null And d.LF_ADD_ENG_3 Is Not Null) Or (i.LF_ADD_ENG_3 Is Not Null And d.LF_ADD_ENG_3 Is Null) Or (i.LF_ADD_ENG_3 Is Not Null And d.LF_ADD_ENG_3 Is Not Null And i.LF_ADD_ENG_3 <> d.LF_ADD_ENG_3)) Then 'LF_ADD_ENG_3 = ' + Case When i.LF_ADD_ENG_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_ADD_ENG_3) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('LF_CODE = ''' + Convert(NVarChar(4000), i.LF_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.LF_CODE = d.LF_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('LAW_FIRMS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', LF_NAME_CHI = ' + Case When LF_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_NAME_CHI) + '''' End + ', LF_NAME_ENG = ' + Case When LF_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_NAME_ENG) + '''' End + ', LF_ADD_CHI_1 = ' + Case When LF_ADD_CHI_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_1) + '''' End + ', LF_ADD_CHI_2 = ' + Case When LF_ADD_CHI_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_2) + '''' End + ', LF_ADD_CHI_3 = ' + Case When LF_ADD_CHI_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_3) + '''' End + ', LF_ADD_ENG_1 = ' + Case When LF_ADD_ENG_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_1) + '''' End + ', LF_ADD_ENG_2 = ' + Case When LF_ADD_ENG_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_2) + '''' End + ', LF_ADD_ENG_3 = ' + Case When LF_ADD_ENG_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_3) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.LF_CODE = d.LF_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('LAW_FIRMS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', LF_NAME_CHI = ' + Case When LF_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_NAME_CHI) + '''' End + ', LF_NAME_ENG = ' + Case When LF_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_NAME_ENG) + '''' End + ', LF_ADD_CHI_1 = ' + Case When LF_ADD_CHI_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_1) + '''' End + ', LF_ADD_CHI_2 = ' + Case When LF_ADD_CHI_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_2) + '''' End + ', LF_ADD_CHI_3 = ' + Case When LF_ADD_CHI_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_CHI_3) + '''' End + ', LF_ADD_ENG_1 = ' + Case When LF_ADD_ENG_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_1) + '''' End + ', LF_ADD_ENG_2 = ' + Case When LF_ADD_ENG_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_2) + '''' End + ', LF_ADD_ENG_3 = ' + Case When LF_ADD_ENG_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_ADD_ENG_3) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.LF_CODE = d.LF_CODE)  End
GO

ALTER TABLE [dbo].[LAW_FIRMS] ENABLE TRIGGER [TG_AUD_LAW_FIRMS_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_LAW_FIRMS_CONTACT_OnDeleted]
On [dbo].[LAW_FIRMS_CONTACT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('LAW_FIRMS_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_CODE) + '''' End + ', LFC_NAME_CHI = ' + Case When LFC_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_NAME_CHI) + '''' End + ', LFC_NAME_ENG = ' + Case When LFC_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_NAME_ENG) + '''' End + ', LFC_TEL = ' + Case When LFC_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_TEL) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + ''', LFC_CODE = ''' + Convert(NVarChar(4000), LFC_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[LAW_FIRMS_CONTACT] ENABLE TRIGGER [TG_AUD_LAW_FIRMS_CONTACT_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_LAW_FIRMS_CONTACT_OnInserted]
On [dbo].[LAW_FIRMS_CONTACT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('LAW_FIRMS_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LF_CODE) + '''' End + ', LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LFC_CODE) + '''' End + ', LFC_NAME_CHI = ' + Case When LFC_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LFC_NAME_CHI) + '''' End + ', LFC_NAME_ENG = ' + Case When LFC_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LFC_NAME_ENG) + '''' End + ', LFC_TEL = ' + Case When LFC_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LFC_TEL) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + ''', LFC_CODE = ''' + Convert(NVarChar(4000), LFC_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[LAW_FIRMS_CONTACT] ENABLE TRIGGER [TG_AUD_LAW_FIRMS_CONTACT_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_LAW_FIRMS_CONTACT_OnUpdated]
On [dbo].[LAW_FIRMS_CONTACT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('LAW_FIRMS_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.LF_CODE Is Null And d.LF_CODE Is Not Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Not Null And i.LF_CODE <> d.LF_CODE)) Then 'LF_CODE = ' + Case When d.LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.LFC_CODE Is Null And d.LFC_CODE Is Not Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Not Null And i.LFC_CODE <> d.LFC_CODE)) Then 'LFC_CODE = ' + Case When d.LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LFC_CODE) + '''' End + ', ' Else '' End +  Case When ((i.LFC_NAME_CHI Is Null And d.LFC_NAME_CHI Is Not Null) Or (i.LFC_NAME_CHI Is Not Null And d.LFC_NAME_CHI Is Null) Or (i.LFC_NAME_CHI Is Not Null And d.LFC_NAME_CHI Is Not Null And i.LFC_NAME_CHI <> d.LFC_NAME_CHI)) Then 'LFC_NAME_CHI = ' + Case When d.LFC_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LFC_NAME_CHI) + '''' End + ', ' Else '' End +  Case When ((i.LFC_NAME_ENG Is Null And d.LFC_NAME_ENG Is Not Null) Or (i.LFC_NAME_ENG Is Not Null And d.LFC_NAME_ENG Is Null) Or (i.LFC_NAME_ENG Is Not Null And d.LFC_NAME_ENG Is Not Null And i.LFC_NAME_ENG <> d.LFC_NAME_ENG)) Then 'LFC_NAME_ENG = ' + Case When d.LFC_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LFC_NAME_ENG) + '''' End + ', ' Else '' End +  Case When ((i.LFC_TEL Is Null And d.LFC_TEL Is Not Null) Or (i.LFC_TEL Is Not Null And d.LFC_TEL Is Null) Or (i.LFC_TEL Is Not Null And d.LFC_TEL Is Not Null And i.LFC_TEL <> d.LFC_TEL)) Then 'LFC_TEL = ' + Case When d.LFC_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LFC_TEL) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.LF_CODE Is Null And d.LF_CODE Is Not Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Null) Or (i.LF_CODE Is Not Null And d.LF_CODE Is Not Null And i.LF_CODE <> d.LF_CODE)) Then 'LF_CODE = ' + Case When i.LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.LFC_CODE Is Null And d.LFC_CODE Is Not Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Null) Or (i.LFC_CODE Is Not Null And d.LFC_CODE Is Not Null And i.LFC_CODE <> d.LFC_CODE)) Then 'LFC_CODE = ' + Case When i.LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LFC_CODE) + '''' End + ', ' Else '' End +  Case When ((i.LFC_NAME_CHI Is Null And d.LFC_NAME_CHI Is Not Null) Or (i.LFC_NAME_CHI Is Not Null And d.LFC_NAME_CHI Is Null) Or (i.LFC_NAME_CHI Is Not Null And d.LFC_NAME_CHI Is Not Null And i.LFC_NAME_CHI <> d.LFC_NAME_CHI)) Then 'LFC_NAME_CHI = ' + Case When i.LFC_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LFC_NAME_CHI) + '''' End + ', ' Else '' End +  Case When ((i.LFC_NAME_ENG Is Null And d.LFC_NAME_ENG Is Not Null) Or (i.LFC_NAME_ENG Is Not Null And d.LFC_NAME_ENG Is Null) Or (i.LFC_NAME_ENG Is Not Null And d.LFC_NAME_ENG Is Not Null And i.LFC_NAME_ENG <> d.LFC_NAME_ENG)) Then 'LFC_NAME_ENG = ' + Case When i.LFC_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LFC_NAME_ENG) + '''' End + ', ' Else '' End +  Case When ((i.LFC_TEL Is Null And d.LFC_TEL Is Not Null) Or (i.LFC_TEL Is Not Null And d.LFC_TEL Is Null) Or (i.LFC_TEL Is Not Null And d.LFC_TEL Is Not Null And i.LFC_TEL <> d.LFC_TEL)) Then 'LFC_TEL = ' + Case When i.LFC_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LFC_TEL) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('LF_CODE = ''' + Convert(NVarChar(4000), i.LF_CODE) + ''', LFC_CODE = ''' + Convert(NVarChar(4000), i.LFC_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.LF_CODE = d.LF_CODE And i.LFC_CODE = d.LFC_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('LAW_FIRMS_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_CODE) + '''' End + ', LFC_NAME_CHI = ' + Case When LFC_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_NAME_CHI) + '''' End + ', LFC_NAME_ENG = ' + Case When LFC_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_NAME_ENG) + '''' End + ', LFC_TEL = ' + Case When LFC_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_TEL) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + ''', LFC_CODE = ''' + Convert(NVarChar(4000), LFC_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.LF_CODE = d.LF_CODE And i.LFC_CODE = d.LFC_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('LAW_FIRMS_CONTACT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('LF_CODE = ' + Case When LF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LF_CODE) + '''' End + ', LFC_CODE = ' + Case When LFC_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_CODE) + '''' End + ', LFC_NAME_CHI = ' + Case When LFC_NAME_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_NAME_CHI) + '''' End + ', LFC_NAME_ENG = ' + Case When LFC_NAME_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_NAME_ENG) + '''' End + ', LFC_TEL = ' + Case When LFC_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LFC_TEL) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('LF_CODE = ''' + Convert(NVarChar(4000), LF_CODE) + ''', LFC_CODE = ''' + Convert(NVarChar(4000), LFC_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.LF_CODE = d.LF_CODE And i.LFC_CODE = d.LFC_CODE)  End
GO

ALTER TABLE [dbo].[LAW_FIRMS_CONTACT] ENABLE TRIGGER [TG_AUD_LAW_FIRMS_CONTACT_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_LOG_CHECK_OnDeleted]
On [dbo].[LOG_CHECK]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('LOG_CHECK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('LOC = ' + Case When LOC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOC) + '''' End + ', LOGDATE = ' + Case When LOGDATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOGDATE) + '''' End + ', LOGSIZE = ' + Case When LOGSIZE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOGSIZE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[LOG_CHECK] ENABLE TRIGGER [TG_AUD_LOG_CHECK_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_LOG_CHECK_OnInserted]
On [dbo].[LOG_CHECK]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('LOG_CHECK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('LOC = ' + Case When LOC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LOC) + '''' End + ', LOGDATE = ' + Case When LOGDATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LOGDATE) + '''' End + ', LOGSIZE = ' + Case When LOGSIZE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LOGSIZE) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[LOG_CHECK] ENABLE TRIGGER [TG_AUD_LOG_CHECK_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_LOG_CHECK_OnUpdated]
On [dbo].[LOG_CHECK]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('LOG_CHECK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('LOC = ' + Case When LOC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOC) + '''' End + ', LOGDATE = ' + Case When LOGDATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOGDATE) + '''' End + ', LOGSIZE = ' + Case When LOGSIZE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOGSIZE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
			From Deleted
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('LOG_CHECK', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('LOC = ' + Case When LOC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOC) + '''' End + ', LOGDATE = ' + Case When LOGDATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOGDATE) + '''' End + ', LOGSIZE = ' + Case When LOGSIZE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOGSIZE) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000)
				From Inserted  End
GO

ALTER TABLE [dbo].[LOG_CHECK] ENABLE TRIGGER [TG_AUD_LOG_CHECK_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_MAILING_LIST_OnDeleted]
On [dbo].[MAILING_LIST]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('MAILING_LIST', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PRJ_ID = ' + Case When PRJ_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRJ_ID) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REG_NO) + '''' End + ', CONT_NAME = ' + Case When CONT_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONT_NAME) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_3) + '''' End + ', DISTRICT = ' + Case When DISTRICT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DISTRICT) + '''' End + ', LOCATION = ' + Case When LOCATION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOCATION) + '''' End + ', COUNTRY = ' + Case When COUNTRY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY) + '''' End + ', OFFICE_TEL = ' + Case When OFFICE_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OFFICE_TEL) + '''' End + ', HOME_TEL = ' + Case When HOME_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), HOME_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', DM = ' + Case When DM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DM) + '''' End + ', DELETED = ' + Case When DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DELETED) + '''' End + ', TYPE = ' + Case When TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TYPE) + '''' End + ', MOA_ADD4 = ' + Case When MOA_ADD4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_ADD4) + '''' End + 'AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AREA) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PRJ_ID = ''' + Convert(NVarChar(4000), PRJ_ID) + ''', REG_NO = ''' + Convert(NVarChar(4000), REG_NO) + ''', TYPE = ''' + Convert(NVarChar(4000), TYPE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[MAILING_LIST] ENABLE TRIGGER [TG_AUD_MAILING_LIST_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_MAILING_LIST_OnInserted]
On [dbo].[MAILING_LIST]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('MAILING_LIST', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PRJ_ID = ' + Case When PRJ_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PRJ_ID) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REG_NO) + '''' End + ', CONT_NAME = ' + Case When CONT_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CONT_NAME) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR_3) + '''' End + ', DISTRICT = ' + Case When DISTRICT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DISTRICT) + '''' End + ', LOCATION = ' + Case When LOCATION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LOCATION) + '''' End + ', COUNTRY = ' + Case When COUNTRY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COUNTRY) + '''' End + ', OFFICE_TEL = ' + Case When OFFICE_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),OFFICE_TEL) + '''' End + ', HOME_TEL = ' + Case When HOME_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),HOME_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),EMAIL) + '''' End + ', DM = ' + Case When DM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DM) + '''' End + ', DELETED = ' + Case When DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DELETED) + '''' End + ', TYPE = ' + Case When TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TYPE) + '''' End + ', MOA_ADD4 = ' + Case When MOA_ADD4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MOA_ADD4) + '''' End + ', AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AREA) + '''' End + 'REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REGION_CODE) + '''' End + '', 4000), @PROJECT_ID, Left('PRJ_ID = ''' + Convert(NVarChar(4000), PRJ_ID) + ''', REG_NO = ''' + Convert(NVarChar(4000), REG_NO) + ''', TYPE = ''' + Convert(NVarChar(4000), TYPE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[MAILING_LIST] ENABLE TRIGGER [TG_AUD_MAILING_LIST_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_MAILING_LIST_OnUpdated]
On [dbo].[MAILING_LIST]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('MAILING_LIST', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PRJ_ID Is Null And d.PRJ_ID Is Not Null) Or (i.PRJ_ID Is Not Null And d.PRJ_ID Is Null) Or (i.PRJ_ID Is Not Null And d.PRJ_ID Is Not Null And i.PRJ_ID <> d.PRJ_ID)) Then 'PRJ_ID = ' + Case When d.PRJ_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PRJ_ID) + '''' End + ', ' Else '' End +  Case When ((i.REG_NO Is Null And d.REG_NO Is Not Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Not Null And i.REG_NO <> d.REG_NO)) Then 'REG_NO = ' + Case When d.REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REG_NO) + '''' End + ', ' Else '' End +  Case When ((i.CONT_NAME Is Null And d.CONT_NAME Is Not Null) Or (i.CONT_NAME Is Not Null And d.CONT_NAME Is Null) Or (i.CONT_NAME Is Not Null And d.CONT_NAME Is Not Null And i.CONT_NAME <> d.CONT_NAME)) Then 'CONT_NAME = ' + Case When d.CONT_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CONT_NAME) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_1 Is Null And d.ADDR_1 Is Not Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Not Null And i.ADDR_1 <> d.ADDR_1)) Then 'ADDR_1 = ' + Case When d.ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR_1) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_2 Is Null And d.ADDR_2 Is Not Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Not Null And i.ADDR_2 <> d.ADDR_2)) Then 'ADDR_2 = ' + Case When d.ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR_2) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_3 Is Null And d.ADDR_3 Is Not Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Not Null And i.ADDR_3 <> d.ADDR_3)) Then 'ADDR_3 = ' + Case When d.ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR_3) + '''' End + ', ' Else '' End +  Case When ((i.DISTRICT Is Null And d.DISTRICT Is Not Null) Or (i.DISTRICT Is Not Null And d.DISTRICT Is Null) Or (i.DISTRICT Is Not Null And d.DISTRICT Is Not Null And i.DISTRICT <> d.DISTRICT)) Then 'DISTRICT = ' + Case When d.DISTRICT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DISTRICT) + '''' End + ', ' Else '' End +  Case When ((i.LOCATION Is Null And d.LOCATION Is Not Null) Or (i.LOCATION Is Not Null And d.LOCATION Is Null) Or (i.LOCATION Is Not Null And d.LOCATION Is Not Null And i.LOCATION <> d.LOCATION)) Then 'LOCATION = ' + Case When d.LOCATION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LOCATION) + '''' End + ', ' Else '' End +  Case When ((i.COUNTRY Is Null And d.COUNTRY Is Not Null) Or (i.COUNTRY Is Not Null And d.COUNTRY Is Null) Or (i.COUNTRY Is Not Null And d.COUNTRY Is Not Null And i.COUNTRY <> d.COUNTRY)) Then 'COUNTRY = ' + Case When d.COUNTRY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COUNTRY) + '''' End + ', ' Else '' End +  Case When ((i.OFFICE_TEL Is Null And d.OFFICE_TEL Is Not Null) Or (i.OFFICE_TEL Is Not Null And d.OFFICE_TEL Is Null) Or (i.OFFICE_TEL Is Not Null And d.OFFICE_TEL Is Not Null And i.OFFICE_TEL <> d.OFFICE_TEL)) Then 'OFFICE_TEL = ' + Case When d.OFFICE_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.OFFICE_TEL) + '''' End + ', ' Else '' End +  Case When ((i.HOME_TEL Is Null And d.HOME_TEL Is Not Null) Or (i.HOME_TEL Is Not Null And d.HOME_TEL Is Null) Or (i.HOME_TEL Is Not Null And d.HOME_TEL Is Not Null And i.HOME_TEL <> d.HOME_TEL)) Then 'HOME_TEL = ' + Case When d.HOME_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.HOME_TEL) + '''' End + ', ' Else '' End +  Case When ((i.MOBILE Is Null And d.MOBILE Is Not Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Not Null And i.MOBILE <> d.MOBILE)) Then 'MOBILE = ' + Case When d.MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MOBILE) + '''' End + ', ' Else '' End +  Case When ((i.FAX Is Null And d.FAX Is Not Null) Or (i.FAX Is Not Null And d.FAX Is Null) Or (i.FAX Is Not Null And d.FAX Is Not Null And i.FAX <> d.FAX)) Then 'FAX = ' + Case When d.FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FAX) + '''' End + ', ' Else '' End +  Case When ((i.EMAIL Is Null And d.EMAIL Is Not Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Not Null And i.EMAIL <> d.EMAIL)) Then 'EMAIL = ' + Case When d.EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.EMAIL) + '''' End + ', ' Else '' End +  Case When ((i.DM Is Null And d.DM Is Not Null) Or (i.DM Is Not Null And d.DM Is Null) Or (i.DM Is Not Null And d.DM Is Not Null And i.DM <> d.DM)) Then 'DM = ' + Case When d.DM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DM) + '''' End + ', ' Else '' End +  Case When ((i.DELETED Is Null And d.DELETED Is Not Null) Or (i.DELETED Is Not Null And d.DELETED Is Null) Or (i.DELETED Is Not Null And d.DELETED Is Not Null And i.DELETED <> d.DELETED)) Then 'DELETED = ' + Case When d.DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.DELETED) + '''' End + ', ' Else '' End +  Case When ((i.TYPE Is Null And d.TYPE Is Not Null) Or (i.TYPE Is Not Null And d.TYPE Is Null) Or (i.TYPE Is Not Null And d.TYPE Is Not Null And i.TYPE <> d.TYPE)) Then 'TYPE = ' + Case When d.TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TYPE) + '''' End + ', ' Else '' End +  Case When ((i.MOA_ADD4 Is Null And d.MOA_ADD4 Is Not Null) Or (i.MOA_ADD4 Is Not Null And d.MOA_ADD4 Is Null) Or (i.MOA_ADD4 Is Not Null And d.MOA_ADD4 Is Not Null And i.MOA_ADD4 <> d.MOA_ADD4)) Then 'MOA_ADD4 = ' + Case When d.MOA_ADD4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MOA_ADD4) + '''' End + ', ' Else '' End +  Case When ((i.AREA Is Null And d.AREA Is Not Null) Or (i.AREA Is Not Null And d.AREA Is Null) Or (i.AREA Is Not Null And d.AREA Is Not Null And i.AREA <> d.AREA)) Then 'AREA = ' + Case When d.AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AREA) + '''' End + ', ' Else '' End +  Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When d.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REGION_CODE) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PRJ_ID Is Null And d.PRJ_ID Is Not Null) Or (i.PRJ_ID Is Not Null And d.PRJ_ID Is Null) Or (i.PRJ_ID Is Not Null And d.PRJ_ID Is Not Null And i.PRJ_ID <> d.PRJ_ID)) Then 'PRJ_ID = ' + Case When i.PRJ_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PRJ_ID) + '''' End + ', ' Else '' End +  Case When ((i.REG_NO Is Null And d.REG_NO Is Not Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Null) Or (i.REG_NO Is Not Null And d.REG_NO Is Not Null And i.REG_NO <> d.REG_NO)) Then 'REG_NO = ' + Case When i.REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REG_NO) + '''' End + ', ' Else '' End +  Case When ((i.CONT_NAME Is Null And d.CONT_NAME Is Not Null) Or (i.CONT_NAME Is Not Null And d.CONT_NAME Is Null) Or (i.CONT_NAME Is Not Null And d.CONT_NAME Is Not Null And i.CONT_NAME <> d.CONT_NAME)) Then 'CONT_NAME = ' + Case When i.CONT_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CONT_NAME) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_1 Is Null And d.ADDR_1 Is Not Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Null) Or (i.ADDR_1 Is Not Null And d.ADDR_1 Is Not Null And i.ADDR_1 <> d.ADDR_1)) Then 'ADDR_1 = ' + Case When i.ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR_1) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_2 Is Null And d.ADDR_2 Is Not Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Null) Or (i.ADDR_2 Is Not Null And d.ADDR_2 Is Not Null And i.ADDR_2 <> d.ADDR_2)) Then 'ADDR_2 = ' + Case When i.ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR_2) + '''' End + ', ' Else '' End +  Case When ((i.ADDR_3 Is Null And d.ADDR_3 Is Not Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Null) Or (i.ADDR_3 Is Not Null And d.ADDR_3 Is Not Null And i.ADDR_3 <> d.ADDR_3)) Then 'ADDR_3 = ' + Case When i.ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR_3) + '''' End + ', ' Else '' End +  Case When ((i.DISTRICT Is Null And d.DISTRICT Is Not Null) Or (i.DISTRICT Is Not Null And d.DISTRICT Is Null) Or (i.DISTRICT Is Not Null And d.DISTRICT Is Not Null And i.DISTRICT <> d.DISTRICT)) Then 'DISTRICT = ' + Case When i.DISTRICT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DISTRICT) + '''' End + ', ' Else '' End +  Case When ((i.LOCATION Is Null And d.LOCATION Is Not Null) Or (i.LOCATION Is Not Null And d.LOCATION Is Null) Or (i.LOCATION Is Not Null And d.LOCATION Is Not Null And i.LOCATION <> d.LOCATION)) Then 'LOCATION = ' + Case When i.LOCATION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LOCATION) + '''' End + ', ' Else '' End +  Case When ((i.COUNTRY Is Null And d.COUNTRY Is Not Null) Or (i.COUNTRY Is Not Null And d.COUNTRY Is Null) Or (i.COUNTRY Is Not Null And d.COUNTRY Is Not Null And i.COUNTRY <> d.COUNTRY)) Then 'COUNTRY = ' + Case When i.COUNTRY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COUNTRY) + '''' End + ', ' Else '' End +  Case When ((i.OFFICE_TEL Is Null And d.OFFICE_TEL Is Not Null) Or (i.OFFICE_TEL Is Not Null And d.OFFICE_TEL Is Null) Or (i.OFFICE_TEL Is Not Null And d.OFFICE_TEL Is Not Null And i.OFFICE_TEL <> d.OFFICE_TEL)) Then 'OFFICE_TEL = ' + Case When i.OFFICE_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.OFFICE_TEL) + '''' End + ', ' Else '' End +  Case When ((i.HOME_TEL Is Null And d.HOME_TEL Is Not Null) Or (i.HOME_TEL Is Not Null And d.HOME_TEL Is Null) Or (i.HOME_TEL Is Not Null And d.HOME_TEL Is Not Null And i.HOME_TEL <> d.HOME_TEL)) Then 'HOME_TEL = ' + Case When i.HOME_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.HOME_TEL) + '''' End + ', ' Else '' End +  Case When ((i.MOBILE Is Null And d.MOBILE Is Not Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Null) Or (i.MOBILE Is Not Null And d.MOBILE Is Not Null And i.MOBILE <> d.MOBILE)) Then 'MOBILE = ' + Case When i.MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MOBILE) + '''' End + ', ' Else '' End +  Case When ((i.FAX Is Null And d.FAX Is Not Null) Or (i.FAX Is Not Null And d.FAX Is Null) Or (i.FAX Is Not Null And d.FAX Is Not Null And i.FAX <> d.FAX)) Then 'FAX = ' + Case When i.FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FAX) + '''' End + ', ' Else '' End +  Case When ((i.EMAIL Is Null And d.EMAIL Is Not Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Not Null And i.EMAIL <> d.EMAIL)) Then 'EMAIL = ' + Case When i.EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.EMAIL) + '''' End + ', ' Else '' End +  Case When ((i.DM Is Null And d.DM Is Not Null) Or (i.DM Is Not Null And d.DM Is Null) Or (i.DM Is Not Null And d.DM Is Not Null And i.DM <> d.DM)) Then 'DM = ' + Case When i.DM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DM) + '''' End + ', ' Else '' End +  Case When ((i.DELETED Is Null And d.DELETED Is Not Null) Or (i.DELETED Is Not Null And d.DELETED Is Null) Or (i.DELETED Is Not Null And d.DELETED Is Not Null And i.DELETED <> d.DELETED)) Then 'DELETED = ' + Case When i.DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.DELETED) + '''' End + ', ' Else '' End +  Case When ((i.TYPE Is Null And d.TYPE Is Not Null) Or (i.TYPE Is Not Null And d.TYPE Is Null) Or (i.TYPE Is Not Null And d.TYPE Is Not Null And i.TYPE <> d.TYPE)) Then 'TYPE = ' + Case When i.TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TYPE) + '''' End + ', ' Else '' End +  Case When ((i.MOA_ADD4 Is Null And d.MOA_ADD4 Is Not Null) Or (i.MOA_ADD4 Is Not Null And d.MOA_ADD4 Is Null) Or (i.MOA_ADD4 Is Not Null And d.MOA_ADD4 Is Not Null And i.MOA_ADD4 <> d.MOA_ADD4)) Then 'MOA_ADD4 = ' + Case When i.MOA_ADD4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MOA_ADD4) + '''' End + ', ' Else '' End +  Case When ((i.AREA Is Null And d.AREA Is Not Null) Or (i.AREA Is Not Null And d.AREA Is Null) Or (i.AREA Is Not Null And d.AREA Is Not Null And i.AREA <> d.AREA)) Then 'AREA = ' + Case When i.AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AREA) + '''' End + ', ' Else '' End +  Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When i.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REGION_CODE) + '''' End + ', ' Else '' End)  ChangedValue, Left('PRJ_ID = ''' + Convert(NVarChar(4000), i.PRJ_ID) + ''', REG_NO = ''' + Convert(NVarChar(4000), i.REG_NO) + ''', TYPE = ''' + Convert(NVarChar(4000), i.TYPE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PRJ_ID = d.PRJ_ID And i.REG_NO = d.REG_NO And i.TYPE = d.TYPE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('MAILING_LIST', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PRJ_ID = ' + Case When PRJ_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRJ_ID) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REG_NO) + '''' End + ', CONT_NAME = ' + Case When CONT_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONT_NAME) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_3) + '''' End + ', DISTRICT = ' + Case When DISTRICT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DISTRICT) + '''' End + ', LOCATION = ' + Case When LOCATION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOCATION) + '''' End + ', COUNTRY = ' + Case When COUNTRY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY) + '''' End + ', OFFICE_TEL = ' + Case When OFFICE_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OFFICE_TEL) + '''' End + ', HOME_TEL = ' + Case When HOME_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), HOME_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', DM = ' + Case When DM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DM) + '''' End + ', DELETED = ' + Case When DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DELETED) + '''' End + ', TYPE = ' + Case When TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TYPE) + '''' End + ', MOA_ADD4 = ' + Case When MOA_ADD4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_ADD4) + '''' End + ', AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AREA) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PRJ_ID = ''' + Convert(NVarChar(4000), PRJ_ID) + ''', REG_NO = ''' + Convert(NVarChar(4000), REG_NO) + ''', TYPE = ''' + Convert(NVarChar(4000), TYPE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PRJ_ID = d.PRJ_ID And i.REG_NO = d.REG_NO And i.TYPE = d.TYPE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('MAILING_LIST', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PRJ_ID = ' + Case When PRJ_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PRJ_ID) + '''' End + ', REG_NO = ' + Case When REG_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REG_NO) + '''' End + ', CONT_NAME = ' + Case When CONT_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CONT_NAME) + '''' End + ', ADDR_1 = ' + Case When ADDR_1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_1) + '''' End + ', ADDR_2 = ' + Case When ADDR_2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_2) + '''' End + ', ADDR_3 = ' + Case When ADDR_3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR_3) + '''' End + ', DISTRICT = ' + Case When DISTRICT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DISTRICT) + '''' End + ', LOCATION = ' + Case When LOCATION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LOCATION) + '''' End + ', COUNTRY = ' + Case When COUNTRY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COUNTRY) + '''' End + ', OFFICE_TEL = ' + Case When OFFICE_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OFFICE_TEL) + '''' End + ', HOME_TEL = ' + Case When HOME_TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), HOME_TEL) + '''' End + ', MOBILE = ' + Case When MOBILE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOBILE) + '''' End + ', FAX = ' + Case When FAX Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FAX) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', DM = ' + Case When DM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DM) + '''' End + ', DELETED = ' + Case When DELETED Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DELETED) + '''' End + ', TYPE = ' + Case When TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TYPE) + '''' End + ', MOA_ADD4 = ' + Case When MOA_ADD4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_ADD4) + '''' End + ', AREA = ' + Case When AREA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AREA) + '''' End + ', REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + '', 4000), @PROJECT_ID, Left('PRJ_ID = ''' + Convert(NVarChar(4000), PRJ_ID) + ''', REG_NO = ''' + Convert(NVarChar(4000), REG_NO) + ''', TYPE = ''' + Convert(NVarChar(4000), TYPE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PRJ_ID = d.PRJ_ID And i.REG_NO = d.REG_NO And i.TYPE = d.TYPE)  End
GO

ALTER TABLE [dbo].[MAILING_LIST] ENABLE TRIGGER [TG_AUD_MAILING_LIST_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_MESSAGE_OnDeleted]
On [dbo].[MESSAGE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('MESSAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('Lang_ID = ' + Case When Lang_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Lang_ID) + '''' End + ', Msg_Cde = ' + Case When Msg_Cde Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Msg_Cde) + '''' End + ', Msg = ' + Case When Msg Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Msg) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('Lang_ID = ''' + Convert(NVarChar(4000), Lang_ID) + ''', Msg_Cde = ''' + Convert(NVarChar(4000), Msg_Cde) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[MESSAGE] ENABLE TRIGGER [TG_AUD_MESSAGE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_MESSAGE_OnInserted]
On [dbo].[MESSAGE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('MESSAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('Lang_ID = ' + Case When Lang_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Lang_ID) + '''' End + ', Msg_Cde = ' + Case When Msg_Cde Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Msg_Cde) + '''' End + ', Msg = ' + Case When Msg Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Msg) + '''' End + '', 4000), @PROJECT_ID, Left('Lang_ID = ''' + Convert(NVarChar(4000), Lang_ID) + ''', Msg_Cde = ''' + Convert(NVarChar(4000), Msg_Cde) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[MESSAGE] ENABLE TRIGGER [TG_AUD_MESSAGE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_MESSAGE_OnUpdated]
On [dbo].[MESSAGE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('MESSAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.Lang_ID Is Null And d.Lang_ID Is Not Null) Or (i.Lang_ID Is Not Null And d.Lang_ID Is Null) Or (i.Lang_ID Is Not Null And d.Lang_ID Is Not Null And i.Lang_ID <> d.Lang_ID)) Then 'Lang_ID = ' + Case When d.Lang_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Lang_ID) + '''' End + ', ' Else '' End +  Case When ((i.Msg_Cde Is Null And d.Msg_Cde Is Not Null) Or (i.Msg_Cde Is Not Null And d.Msg_Cde Is Null) Or (i.Msg_Cde Is Not Null And d.Msg_Cde Is Not Null And i.Msg_Cde <> d.Msg_Cde)) Then 'Msg_Cde = ' + Case When d.Msg_Cde Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Msg_Cde) + '''' End + ', ' Else '' End +  Case When ((i.Msg Is Null And d.Msg Is Not Null) Or (i.Msg Is Not Null And d.Msg Is Null) Or (i.Msg Is Not Null And d.Msg Is Not Null And i.Msg <> d.Msg)) Then 'Msg = ' + Case When d.Msg Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Msg) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.Lang_ID Is Null And d.Lang_ID Is Not Null) Or (i.Lang_ID Is Not Null And d.Lang_ID Is Null) Or (i.Lang_ID Is Not Null And d.Lang_ID Is Not Null And i.Lang_ID <> d.Lang_ID)) Then 'Lang_ID = ' + Case When i.Lang_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Lang_ID) + '''' End + ', ' Else '' End +  Case When ((i.Msg_Cde Is Null And d.Msg_Cde Is Not Null) Or (i.Msg_Cde Is Not Null And d.Msg_Cde Is Null) Or (i.Msg_Cde Is Not Null And d.Msg_Cde Is Not Null And i.Msg_Cde <> d.Msg_Cde)) Then 'Msg_Cde = ' + Case When i.Msg_Cde Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Msg_Cde) + '''' End + ', ' Else '' End +  Case When ((i.Msg Is Null And d.Msg Is Not Null) Or (i.Msg Is Not Null And d.Msg Is Null) Or (i.Msg Is Not Null And d.Msg Is Not Null And i.Msg <> d.Msg)) Then 'Msg = ' + Case When i.Msg Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Msg) + '''' End + ', ' Else '' End)  ChangedValue, Left('Lang_ID = ''' + Convert(NVarChar(4000), i.Lang_ID) + ''', Msg_Cde = ''' + Convert(NVarChar(4000), i.Msg_Cde) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.Lang_ID = d.Lang_ID And i.Msg_Cde = d.Msg_Cde
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('MESSAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('Lang_ID = ' + Case When Lang_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Lang_ID) + '''' End + ', Msg_Cde = ' + Case When Msg_Cde Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Msg_Cde) + '''' End + ', Msg = ' + Case When Msg Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Msg) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('Lang_ID = ''' + Convert(NVarChar(4000), Lang_ID) + ''', Msg_Cde = ''' + Convert(NVarChar(4000), Msg_Cde) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.Lang_ID = d.Lang_ID And i.Msg_Cde = d.Msg_Cde
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('MESSAGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('Lang_ID = ' + Case When Lang_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Lang_ID) + '''' End + ', Msg_Cde = ' + Case When Msg_Cde Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Msg_Cde) + '''' End + ', Msg = ' + Case When Msg Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Msg) + '''' End + '', 4000), @PROJECT_ID, Left('Lang_ID = ''' + Convert(NVarChar(4000), Lang_ID) + ''', Msg_Cde = ''' + Convert(NVarChar(4000), Msg_Cde) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.Lang_ID = d.Lang_ID And i.Msg_Cde = d.Msg_Cde)  End
GO

ALTER TABLE [dbo].[MESSAGE] ENABLE TRIGGER [TG_AUD_MESSAGE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_NATIONALITY_OnDeleted]
On [dbo].[NATIONALITY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('NATIONALITY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('NAT_CODE = ' + Case When NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_CODE) + '''' End + ', NAT_DESC = ' + Case When NAT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('NAT_CODE = ''' + Convert(NVarChar(4000), NAT_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[NATIONALITY] ENABLE TRIGGER [TG_AUD_NATIONALITY_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_NATIONALITY_OnInserted]
On [dbo].[NATIONALITY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('NATIONALITY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',Left('NAT_CODE = ' + Case When NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_CODE) + '''' End + ', NAT_DESC = ' + Case When NAT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('NAT_CODE = ''' + Convert(NVarChar(4000), NAT_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[NATIONALITY] ENABLE TRIGGER [TG_AUD_NATIONALITY_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_NATIONALITY_OnUpdated]
On [dbo].[NATIONALITY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('NATIONALITY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.NAT_CODE Is Null And d.NAT_CODE Is Not Null) Or (i.NAT_CODE Is Not Null And d.NAT_CODE Is Null) Or (i.NAT_CODE Is Not Null And d.NAT_CODE Is Not Null And i.NAT_CODE <> d.NAT_CODE)) Then 'NAT_CODE = ' + Case When d.NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.NAT_CODE) + '''' End + ', ' Else '' End +  Case When ((i.NAT_DESC Is Null And d.NAT_DESC Is Not Null) Or (i.NAT_DESC Is Not Null And d.NAT_DESC Is Null) Or (i.NAT_DESC Is Not Null And d.NAT_DESC Is Not Null And i.NAT_DESC <> d.NAT_DESC)) Then 'NAT_DESC = ' + Case When d.NAT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.NAT_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.NAT_CODE Is Null And d.NAT_CODE Is Not Null) Or (i.NAT_CODE Is Not Null And d.NAT_CODE Is Null) Or (i.NAT_CODE Is Not Null And d.NAT_CODE Is Not Null And i.NAT_CODE <> d.NAT_CODE)) Then 'NAT_CODE = ' + Case When i.NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.NAT_CODE) + '''' End + ', ' Else '' End +  Case When ((i.NAT_DESC Is Null And d.NAT_DESC Is Not Null) Or (i.NAT_DESC Is Not Null And d.NAT_DESC Is Null) Or (i.NAT_DESC Is Not Null And d.NAT_DESC Is Not Null And i.NAT_DESC <> d.NAT_DESC)) Then 'NAT_DESC = ' + Case When i.NAT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.NAT_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('NAT_CODE = ''' + Convert(NVarChar(4000), i.NAT_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.NAT_CODE = d.NAT_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('NATIONALITY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('NAT_CODE = ' + Case When NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_CODE) + '''' End + ', NAT_DESC = ' + Case When NAT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('NAT_CODE = ''' + Convert(NVarChar(4000), NAT_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.NAT_CODE = d.NAT_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('NATIONALITY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('NAT_CODE = ' + Case When NAT_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_CODE) + '''' End + ', NAT_DESC = ' + Case When NAT_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NAT_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('NAT_CODE = ''' + Convert(NVarChar(4000), NAT_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.NAT_CODE = d.NAT_CODE)  End
GO

ALTER TABLE [dbo].[NATIONALITY] ENABLE TRIGGER [TG_AUD_NATIONALITY_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_PACKAGES_DESC_OnDeleted]
On [dbo].[PACKAGES_DESC]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('PACKAGES_DESC', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('Project_ID = ' + Case When Project_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Project_ID) + '''' End + ', Package_ID = ' + Case When Package_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Package_ID) + '''' End + ', Des = ' + Case When Des Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Des) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[PACKAGES_DESC] ENABLE TRIGGER [TG_AUD_PACKAGES_DESC_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_PACKAGES_DESC_OnInserted]
On [dbo].[PACKAGES_DESC]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('PACKAGES_DESC', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('Project_ID = ' + Case When Project_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Project_ID) + '''' End + ', Package_ID = ' + Case When Package_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Package_ID) + '''' End + ', Des = ' + Case When Des Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Des) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[PACKAGES_DESC] ENABLE TRIGGER [TG_AUD_PACKAGES_DESC_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_PACKAGES_DESC_OnUpdated]
On [dbo].[PACKAGES_DESC]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('PACKAGES_DESC', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('Project_ID = ' + Case When Project_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Project_ID) + '''' End + ', Package_ID = ' + Case When Package_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Package_ID) + '''' End + ', Des = ' + Case When Des Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Des) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
			From Deleted
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PACKAGES_DESC', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('Project_ID = ' + Case When Project_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Project_ID) + '''' End + ', Package_ID = ' + Case When Package_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Package_ID) + '''' End + ', Des = ' + Case When Des Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Des) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000)
				From Inserted  End
GO

ALTER TABLE [dbo].[PACKAGES_DESC] ENABLE TRIGGER [TG_AUD_PACKAGES_DESC_OnUpdated]
GO

Create Trigger [dbo].[TG_AUD_PRJ_PAY_METHOD_OnDeleted]
On [dbo].[PRJ_PAY_METHOD]

After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('PRJ_PAY_METHOD', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_CODE) + '''' End + ', PAY_ADJ_PER = ' + Case When PAY_ADJ_PER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAY_ADJ_PER) + '''' End + 
				', METHOD_DESC(ENG) = ' + Case When METHOD_DESC_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_DESC_ENG) + '''' End + 
				', METHOD_DESC(CHI) = ' + Case When METHOD_DESC_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_DESC_CHI) + '''' End + 
				', SHOW_LIST_PRICE_ON_MOA = ' + Case When SHOW_LIST_PRICE_ON_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SHOW_LIST_PRICE_ON_MOA) + '''' End + ', CASH_REBATE = ' + Case When CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CASH_REBATE) + '''' End + ', CASH_REBATE_UNIT = ' + Case When CASH_REBATE_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CASH_REBATE_UNIT) + '''' End + ', SHOW_CASH_REBATE = ' + Case When SHOW_CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SHOW_CASH_REBATE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[PRJ_PAY_METHOD] ENABLE TRIGGER [TG_AUD_PRJ_PAY_METHOD_OnDeleted]
GO


Create Trigger [dbo].[TG_AUD_PRJ_PAY_METHOD_OnInserted]
On [dbo].[PRJ_PAY_METHOD]
--With Encryption
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('PRJ_PAY_METHOD', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),METHOD_CODE) + '''' End + ', PAY_ADJ_PER = ' + Case When PAY_ADJ_PER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PAY_ADJ_PER) + '''' End + 
', METHOD_DESC(ENG) = ' + Case When METHOD_DESC_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),METHOD_DESC_ENG) + '''' End + 
', METHOD_DESC(CHI) = ' + Case When METHOD_DESC_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),METHOD_DESC_CHI) + '''' End + 
', SHOW_LIST_PRICE_ON_MOA = ' + Case When SHOW_LIST_PRICE_ON_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SHOW_LIST_PRICE_ON_MOA) + '''' End + ', CASH_REBATE = ' + Case When CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CASH_REBATE) + '''' End + ', CASH_REBATE_UNIT = ' + Case When CASH_REBATE_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CASH_REBATE_UNIT) + '''' End + ', SHOW_CASH_REBATE = ' + Case When SHOW_CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SHOW_CASH_REBATE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STATUS) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[PRJ_PAY_METHOD] ENABLE TRIGGER [TG_AUD_PRJ_PAY_METHOD_OnInserted]
GO


Create Trigger [dbo].[TG_AUD_PRJ_PAY_METHOD_OnUpdated]
On [dbo].[PRJ_PAY_METHOD]
--With Encryption
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PRJ_PAY_METHOD', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.METHOD_CODE Is Null And d.METHOD_CODE Is Not Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Not Null And i.METHOD_CODE <> d.METHOD_CODE)) Then 'METHOD_CODE = ' + Case When d.METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PAY_ADJ_PER Is Null And d.PAY_ADJ_PER Is Not Null) Or (i.PAY_ADJ_PER Is Not Null And d.PAY_ADJ_PER Is Null) Or (i.PAY_ADJ_PER Is Not Null And d.PAY_ADJ_PER Is Not Null And i.PAY_ADJ_PER <> d.PAY_ADJ_PER)) Then 'PAY_ADJ_PER = ' + Case When d.PAY_ADJ_PER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PAY_ADJ_PER) + '''' End + ', ' Else '' End +  
					Case When ((i.METHOD_DESC_ENG Is Null And d.METHOD_DESC_ENG Is Not Null) Or (i.METHOD_DESC_ENG Is Not Null And d.METHOD_DESC_ENG Is Null) Or (i.METHOD_DESC_ENG Is Not Null And d.METHOD_DESC_ENG Is Not Null And i.METHOD_DESC_ENG <> d.METHOD_DESC_ENG)) Then 'METHOD_DESC = ' + Case When d.METHOD_DESC_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.METHOD_DESC_ENG) + '''' End + ', ' Else '' End +  
					Case When ((i.METHOD_DESC_CHI Is Null And d.METHOD_DESC_CHI Is Not Null) Or (i.METHOD_DESC_CHI Is Not Null And d.METHOD_DESC_CHI Is Null) Or (i.METHOD_DESC_CHI Is Not Null And d.METHOD_DESC_CHI Is Not Null And i.METHOD_DESC_CHI <> d.METHOD_DESC_CHI)) Then 'METHOD_DESC = ' + Case When d.METHOD_DESC_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.METHOD_DESC_CHI) + '''' End + ', ' Else '' End +  
					Case When ((i.SHOW_LIST_PRICE_ON_MOA Is Null And d.SHOW_LIST_PRICE_ON_MOA Is Not Null) Or (i.SHOW_LIST_PRICE_ON_MOA Is Not Null And d.SHOW_LIST_PRICE_ON_MOA Is Null) Or (i.SHOW_LIST_PRICE_ON_MOA Is Not Null And d.SHOW_LIST_PRICE_ON_MOA Is Not Null And i.SHOW_LIST_PRICE_ON_MOA <> d.SHOW_LIST_PRICE_ON_MOA)) Then 'SHOW_LIST_PRICE_ON_MOA = ' + Case When d.SHOW_LIST_PRICE_ON_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SHOW_LIST_PRICE_ON_MOA) + '''' End + ', ' Else '' End +  Case When ((i.CASH_REBATE Is Null And d.CASH_REBATE Is Not Null) Or (i.CASH_REBATE Is Not Null And d.CASH_REBATE Is Null) Or (i.CASH_REBATE Is Not Null And d.CASH_REBATE Is Not Null And i.CASH_REBATE <> d.CASH_REBATE)) Then 'CASH_REBATE = ' + Case When d.CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CASH_REBATE) + '''' End + ', ' Else '' End +  Case When ((i.CASH_REBATE_UNIT Is Null And d.CASH_REBATE_UNIT Is Not Null) Or (i.CASH_REBATE_UNIT Is Not Null And d.CASH_REBATE_UNIT Is Null) Or (i.CASH_REBATE_UNIT Is Not Null And d.CASH_REBATE_UNIT Is Not Null And i.CASH_REBATE_UNIT <> d.CASH_REBATE_UNIT)) Then 'CASH_REBATE_UNIT = ' + Case When d.CASH_REBATE_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CASH_REBATE_UNIT) + '''' End + ', ' Else '' End +  Case When ((i.SHOW_CASH_REBATE Is Null And d.SHOW_CASH_REBATE Is Not Null) Or (i.SHOW_CASH_REBATE Is Not Null And d.SHOW_CASH_REBATE Is Null) Or (i.SHOW_CASH_REBATE Is Not Null And d.SHOW_CASH_REBATE Is Not Null And i.SHOW_CASH_REBATE <> d.SHOW_CASH_REBATE)) Then 'SHOW_CASH_REBATE = ' + Case When d.SHOW_CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SHOW_CASH_REBATE) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When d.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STATUS) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.METHOD_CODE Is Null And d.METHOD_CODE Is Not Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Not Null And i.METHOD_CODE <> d.METHOD_CODE)) Then 'METHOD_CODE = ' + Case When i.METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PAY_ADJ_PER Is Null And d.PAY_ADJ_PER Is Not Null) Or (i.PAY_ADJ_PER Is Not Null And d.PAY_ADJ_PER Is Null) Or (i.PAY_ADJ_PER Is Not Null And d.PAY_ADJ_PER Is Not Null And i.PAY_ADJ_PER <> d.PAY_ADJ_PER)) Then 'PAY_ADJ_PER = ' + Case When i.PAY_ADJ_PER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PAY_ADJ_PER) + '''' End + ', ' Else '' End +  
					Case When ((i.METHOD_DESC_ENG Is Null And d.METHOD_DESC_ENG Is Not Null) Or (i.METHOD_DESC_ENG Is Not Null And d.METHOD_DESC_ENG Is Null) Or (i.METHOD_DESC_ENG Is Not Null And d.METHOD_DESC_ENG Is Not Null And i.METHOD_DESC_ENG <> d.METHOD_DESC_ENG)) Then 'METHOD_DESC = ' + Case When i.METHOD_DESC_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.METHOD_DESC_ENG) + '''' End + ', ' Else '' End +  
					Case When ((i.METHOD_DESC_CHI Is Null And d.METHOD_DESC_CHI Is Not Null) Or (i.METHOD_DESC_CHI Is Not Null And d.METHOD_DESC_CHI Is Null) Or (i.METHOD_DESC_CHI Is Not Null And d.METHOD_DESC_CHI Is Not Null And i.METHOD_DESC_CHI <> d.METHOD_DESC_CHI)) Then 'METHOD_DESC = ' + Case When i.METHOD_DESC_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.METHOD_DESC_CHI) + '''' End + ', ' Else '' End +  
					Case When ((i.SHOW_LIST_PRICE_ON_MOA Is Null And d.SHOW_LIST_PRICE_ON_MOA Is Not Null) Or (i.SHOW_LIST_PRICE_ON_MOA Is Not Null And d.SHOW_LIST_PRICE_ON_MOA Is Null) Or (i.SHOW_LIST_PRICE_ON_MOA Is Not Null And d.SHOW_LIST_PRICE_ON_MOA Is Not Null And i.SHOW_LIST_PRICE_ON_MOA <> d.SHOW_LIST_PRICE_ON_MOA)) Then 'SHOW_LIST_PRICE_ON_MOA = ' + Case When i.SHOW_LIST_PRICE_ON_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SHOW_LIST_PRICE_ON_MOA) + '''' End + ', ' Else '' End +  Case When ((i.CASH_REBATE Is Null And d.CASH_REBATE Is Not Null) Or (i.CASH_REBATE Is Not Null And d.CASH_REBATE Is Null) Or (i.CASH_REBATE Is Not Null And d.CASH_REBATE Is Not Null And i.CASH_REBATE <> d.CASH_REBATE)) Then 'CASH_REBATE = ' + Case When i.CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CASH_REBATE) + '''' End + ', ' Else '' End +  Case When ((i.CASH_REBATE_UNIT Is Null And d.CASH_REBATE_UNIT Is Not Null) Or (i.CASH_REBATE_UNIT Is Not Null And d.CASH_REBATE_UNIT Is Null) Or (i.CASH_REBATE_UNIT Is Not Null And d.CASH_REBATE_UNIT Is Not Null And i.CASH_REBATE_UNIT <> d.CASH_REBATE_UNIT)) Then 'CASH_REBATE_UNIT = ' + Case When i.CASH_REBATE_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CASH_REBATE_UNIT) + '''' End + ', ' Else '' End +  Case When ((i.SHOW_CASH_REBATE Is Null And d.SHOW_CASH_REBATE Is Not Null) Or (i.SHOW_CASH_REBATE Is Not Null And d.SHOW_CASH_REBATE Is Null) Or (i.SHOW_CASH_REBATE Is Not Null And d.SHOW_CASH_REBATE Is Not Null And i.SHOW_CASH_REBATE <> d.SHOW_CASH_REBATE)) Then 'SHOW_CASH_REBATE = ' + Case When i.SHOW_CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SHOW_CASH_REBATE) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When i.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STATUS) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), i.METHOD_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.METHOD_CODE = d.METHOD_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('PRJ_PAY_METHOD', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_CODE) + '''' End + ', PAY_ADJ_PER = ' + Case When PAY_ADJ_PER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAY_ADJ_PER) + '''' End + 
				', METHOD_DESC(ENG) = ' + Case When METHOD_DESC_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_DESC_ENG) + '''' End + 
				', METHOD_DESC(CHI) = ' + Case When METHOD_DESC_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_DESC_CHI) + '''' End + 
				', SHOW_LIST_PRICE_ON_MOA = ' + Case When SHOW_LIST_PRICE_ON_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SHOW_LIST_PRICE_ON_MOA) + '''' End + ', CASH_REBATE = ' + Case When CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CASH_REBATE) + '''' End + ', CASH_REBATE_UNIT = ' + Case When CASH_REBATE_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CASH_REBATE_UNIT) + '''' End + ', SHOW_CASH_REBATE = ' + Case When SHOW_CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SHOW_CASH_REBATE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.METHOD_CODE = d.METHOD_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PRJ_PAY_METHOD', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_CODE) + '''' End + ', PAY_ADJ_PER = ' + Case When PAY_ADJ_PER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAY_ADJ_PER) + '''' End + 
				', METHOD_DESC(ENG) = ' + Case When METHOD_DESC_ENG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_DESC_ENG) + '''' End + 
				', METHOD_DESC(CHI) = ' + Case When METHOD_DESC_CHI Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_DESC_CHI) + '''' End + 
				', SHOW_LIST_PRICE_ON_MOA = ' + Case When SHOW_LIST_PRICE_ON_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SHOW_LIST_PRICE_ON_MOA) + '''' End + ', CASH_REBATE = ' + Case When CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CASH_REBATE) + '''' End + ', CASH_REBATE_UNIT = ' + Case When CASH_REBATE_UNIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CASH_REBATE_UNIT) + '''' End + ', SHOW_CASH_REBATE = ' + Case When SHOW_CASH_REBATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SHOW_CASH_REBATE) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.METHOD_CODE = d.METHOD_CODE)  End
GO

ALTER TABLE [dbo].[PRJ_PAY_METHOD] ENABLE TRIGGER [TG_AUD_PRJ_PAY_METHOD_OnUpdated]
GO


CREATE TRIGGER [dbo].[TG_UpdPayMtdPrice_OnDeleted]
ON [dbo].[PRJ_PAY_METHOD]
 
INSTEAD OF DELETE
As 

DECLARE @Project_ID nvarchar(6),
@Method_Code nvarchar(6)

BEGIN
	
	-- Case delete
	
	select @Project_ID = project_id, @Method_Code = method_code from deleted

	-- delete the child table record
	delete from fm_cp_payment_method_price
	where project_id = @Project_ID
	and payment_method_code = @Method_Code
	
	-- delete the parent table record
	delete from prj_pay_method
	where project_id = @Project_ID
	and method_code = @Method_Code
	
	-- delete the related record on system_setup_dtl table
	delete from system_setup_dtl
	where fn_id = 'FS1002'
	and para_type = 'DISPLAY_INFO'
	and para_descr = 'PAYMENT_METHOD_PRICE'
	and para_key1 = @Project_ID
	and para_key2 = @Method_Code
END


GO

ALTER TABLE [dbo].[PRJ_PAY_METHOD] ENABLE TRIGGER [TG_UpdPayMtdPrice_OnDeleted]
GO

CREATE TRIGGER [dbo].[TG_UpdPayMtdPrice_OnInserted]
ON [dbo].[PRJ_PAY_METHOD]
 
AFTER INSERT
As 
BEGIN
	
	-- create all flats record
	insert into fm_cp_payment_method_price (
		project_id, fm_cp_code, payment_method_code,
		payment_method_price
	)
	select f.project_id, f.fm_code, p.method_code, 
	(f.fm_list_price * (1 + (p.pay_adj_per/100))) - ((f.fm_list_price * (1 + (p.pay_adj_per/100))) - floor(floor((f.fm_list_price * (1 + (p.pay_adj_per/100))))/100)*100)	
	from flat_master f inner join inserted p
	on (p.project_id = f.project_id)

	-- create all car parks record
	insert into fm_cp_payment_method_price (
		project_id, fm_cp_code, payment_method_code,
		payment_method_price
	)
	select c.project_id, c.car_park_id, p.method_code, 
	(c.park_list_price * (1 + (p.pay_adj_per/100))) - ((c.park_list_price * (1 + (p.pay_adj_per/100))) - floor(floor((c.park_list_price * (1 + (p.pay_adj_per/100))))/100)*100)	
	from car_park c inner join inserted p
	on (p.project_id = c.project_id)
	
END





GO

ALTER TABLE [dbo].[PRJ_PAY_METHOD] ENABLE TRIGGER [TG_UpdPayMtdPrice_OnInserted]
GO

CREATE TRIGGER [dbo].[TG_UpdPayMtdPrice_OnUpdated]
ON [dbo].[PRJ_PAY_METHOD]
 
AFTER UPDATE 
As 
BEGIN
	
	IF UPDATE(pay_adj_per)
	BEGIN
		update a set 
		a.payment_method_price = (
			(f.fm_list_price * (1 + (p.pay_adj_per/100))) - ((f.fm_list_price * (1 + (p.pay_adj_per/100))) - floor(floor((f.fm_list_price * (1 + (p.pay_adj_per/100))))/100)*100)			
		)
		from fm_cp_payment_method_price a inner join inserted p
		on (a.project_id = p.project_id
		and a.payment_method_code = p.method_code)
		inner join flat_master f 
		on (f.project_id = p.project_id
		and f.fm_code = a.fm_cp_code)

		update a set 
		a.payment_method_price = (
			(c.park_list_price * (1 + (p.pay_adj_per/100))) - ((c.park_list_price * (1 + (p.pay_adj_per/100))) - floor(floor((c.park_list_price * (1 + (p.pay_adj_per/100))))/100)*100)			
		)
		from fm_cp_payment_method_price a inner join inserted p
		on (a.project_id = p.project_id
		and a.payment_method_code = p.method_code)
		inner join car_park c 
		on (c.project_id = p.project_id
		and c.car_park_id = a.fm_cp_code)
	END

END




GO

ALTER TABLE [dbo].[PRJ_PAY_METHOD] ENABLE TRIGGER [TG_UpdPayMtdPrice_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_PROJECT_ACCESS_OnDeleted]
On [dbo].[PROJECT_ACCESS]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('PROJECT_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[PROJECT_ACCESS] ENABLE TRIGGER [TG_AUD_PROJECT_ACCESS_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_PROJECT_ACCESS_OnInserted]
On [dbo].[PROJECT_ACCESS]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('PROJECT_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + '', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[PROJECT_ACCESS] ENABLE TRIGGER [TG_AUD_PROJECT_ACCESS_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_PROJECT_ACCESS_OnUpdated]
On [dbo].[PROJECT_ACCESS]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PROJECT_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When d.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When i.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End)  ChangedValue, Left('UID = ''' + Convert(NVarChar(4000), i.UID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.UID = d.UID And i.PROJECT_ID = d.PROJECT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('PROJECT_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.UID = d.UID And i.PROJECT_ID = d.PROJECT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PROJECT_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + '', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.UID = d.UID And i.PROJECT_ID = d.PROJECT_ID)  End
GO

ALTER TABLE [dbo].[PROJECT_ACCESS] ENABLE TRIGGER [TG_AUD_PROJECT_ACCESS_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_PURCHASER_TYPE_OnDeleted]
On [dbo].[PURCHASER_TYPE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('PURCHASER_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PURCHASER_TYPE_ID = ' + Case When PURCHASER_TYPE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PURCHASER_TYPE_ID) + '''' End + ', PURCHASER_TYPE_NAME = ' + Case When PURCHASER_TYPE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PURCHASER_TYPE_NAME) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PURCHASER_TYPE_ID = ''' + Convert(NVarChar(4000), PURCHASER_TYPE_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[PURCHASER_TYPE] ENABLE TRIGGER [TG_AUD_PURCHASER_TYPE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_PURCHASER_TYPE_OnInserted]
On [dbo].[PURCHASER_TYPE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('PURCHASER_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PURCHASER_TYPE_ID = ' + Case When PURCHASER_TYPE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PURCHASER_TYPE_ID) + '''' End + ', PURCHASER_TYPE_NAME = ' + Case When PURCHASER_TYPE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PURCHASER_TYPE_NAME) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('PURCHASER_TYPE_ID = ''' + Convert(NVarChar(4000), PURCHASER_TYPE_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[PURCHASER_TYPE] ENABLE TRIGGER [TG_AUD_PURCHASER_TYPE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_PURCHASER_TYPE_OnUpdated]
On [dbo].[PURCHASER_TYPE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PURCHASER_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PURCHASER_TYPE_ID Is Null And d.PURCHASER_TYPE_ID Is Not Null) Or (i.PURCHASER_TYPE_ID Is Not Null And d.PURCHASER_TYPE_ID Is Null) Or (i.PURCHASER_TYPE_ID Is Not Null And d.PURCHASER_TYPE_ID Is Not Null And i.PURCHASER_TYPE_ID <> d.PURCHASER_TYPE_ID)) Then 'PURCHASER_TYPE_ID = ' + Case When d.PURCHASER_TYPE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PURCHASER_TYPE_ID) + '''' End + ', ' Else '' End +  Case When ((i.PURCHASER_TYPE_NAME Is Null And d.PURCHASER_TYPE_NAME Is Not Null) Or (i.PURCHASER_TYPE_NAME Is Not Null And d.PURCHASER_TYPE_NAME Is Null) Or (i.PURCHASER_TYPE_NAME Is Not Null And d.PURCHASER_TYPE_NAME Is Not Null And i.PURCHASER_TYPE_NAME <> d.PURCHASER_TYPE_NAME)) Then 'PURCHASER_TYPE_NAME = ' + Case When d.PURCHASER_TYPE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PURCHASER_TYPE_NAME) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PURCHASER_TYPE_ID Is Null And d.PURCHASER_TYPE_ID Is Not Null) Or (i.PURCHASER_TYPE_ID Is Not Null And d.PURCHASER_TYPE_ID Is Null) Or (i.PURCHASER_TYPE_ID Is Not Null And d.PURCHASER_TYPE_ID Is Not Null And i.PURCHASER_TYPE_ID <> d.PURCHASER_TYPE_ID)) Then 'PURCHASER_TYPE_ID = ' + Case When i.PURCHASER_TYPE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PURCHASER_TYPE_ID) + '''' End + ', ' Else '' End +  Case When ((i.PURCHASER_TYPE_NAME Is Null And d.PURCHASER_TYPE_NAME Is Not Null) Or (i.PURCHASER_TYPE_NAME Is Not Null And d.PURCHASER_TYPE_NAME Is Null) Or (i.PURCHASER_TYPE_NAME Is Not Null And d.PURCHASER_TYPE_NAME Is Not Null And i.PURCHASER_TYPE_NAME <> d.PURCHASER_TYPE_NAME)) Then 'PURCHASER_TYPE_NAME = ' + Case When i.PURCHASER_TYPE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PURCHASER_TYPE_NAME) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('PURCHASER_TYPE_ID = ''' + Convert(NVarChar(4000), i.PURCHASER_TYPE_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PURCHASER_TYPE_ID = d.PURCHASER_TYPE_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('PURCHASER_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PURCHASER_TYPE_ID = ' + Case When PURCHASER_TYPE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PURCHASER_TYPE_ID) + '''' End + ', PURCHASER_TYPE_NAME = ' + Case When PURCHASER_TYPE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PURCHASER_TYPE_NAME) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PURCHASER_TYPE_ID = ''' + Convert(NVarChar(4000), PURCHASER_TYPE_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PURCHASER_TYPE_ID = d.PURCHASER_TYPE_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PURCHASER_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PURCHASER_TYPE_ID = ' + Case When PURCHASER_TYPE_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PURCHASER_TYPE_ID) + '''' End + ', PURCHASER_TYPE_NAME = ' + Case When PURCHASER_TYPE_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PURCHASER_TYPE_NAME) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('PURCHASER_TYPE_ID = ''' + Convert(NVarChar(4000), PURCHASER_TYPE_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PURCHASER_TYPE_ID = d.PURCHASER_TYPE_ID)  End
GO

ALTER TABLE [dbo].[PURCHASER_TYPE] ENABLE TRIGGER [TG_AUD_PURCHASER_TYPE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_PY_PLAN_DTL_OnDeleted]
On [dbo].[PY_PLAN_DTL]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('PY_PLAN_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_CODE) + '''' End + ', PY_PLAN_SEQ = ' + Case When PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''' End + ', PY_DT_TYPE = ' + Case When PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_TYPE) + '''' End + ', PY_DT_FACT = ' + Case When PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_FACT) + '''' End + ', PY_PAYMENT = ' + Case When PY_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PAYMENT) + '''' End + ', PY_DT_CAL_TYPE = ' + Case When PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_CAL_TYPE) + '''' End + ', PY_PAY_TYPE = ' + Case When PY_PAY_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PAY_TYPE) + '''' End + ', PY_DESC = ' + Case When PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DESC) + '''' End + ', BEFORE_DATE_DESC = ' + Case When BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BEFORE_DATE_DESC) + '''' End + ', AFTER_DATE_DESC = ' + Case When AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AFTER_DATE_DESC) + '''' End + ', INITIAL_PAYMENT = ' + Case When INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), INITIAL_PAYMENT) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[PY_PLAN_DTL] ENABLE TRIGGER [TG_AUD_PY_PLAN_DTL_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_PY_PLAN_DTL_OnInserted]
On [dbo].[PY_PLAN_DTL]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('PY_PLAN_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),METHOD_CODE) + '''' End + ', PY_PLAN_SEQ = ' + Case When PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_PLAN_SEQ) + '''' End + ', PY_DT_TYPE = ' + Case When PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DT_TYPE) + '''' End + ', PY_DT_FACT = ' + Case When PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DT_FACT) + '''' End + ', PY_PAYMENT = ' + Case When PY_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_PAYMENT) + '''' End + ', PY_DT_CAL_TYPE = ' + Case When PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DT_CAL_TYPE) + '''' End + ', PY_PAY_TYPE = ' + Case When PY_PAY_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_PAY_TYPE) + '''' End + ', PY_DESC = ' + Case When PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PY_DESC) + '''' End + ', BEFORE_DATE_DESC = ' + Case When BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BEFORE_DATE_DESC) + '''' End + ', AFTER_DATE_DESC = ' + Case When AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),AFTER_DATE_DESC) + '''' End + ', INITIAL_PAYMENT = ' + Case When INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),INITIAL_PAYMENT) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[PY_PLAN_DTL] ENABLE TRIGGER [TG_AUD_PY_PLAN_DTL_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_PY_PLAN_DTL_OnUpdated]
On [dbo].[PY_PLAN_DTL]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PY_PLAN_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.METHOD_CODE Is Null And d.METHOD_CODE Is Not Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Not Null And i.METHOD_CODE <> d.METHOD_CODE)) Then 'METHOD_CODE = ' + Case When d.METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PY_PLAN_SEQ Is Null And d.PY_PLAN_SEQ Is Not Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Not Null And i.PY_PLAN_SEQ <> d.PY_PLAN_SEQ)) Then 'PY_PLAN_SEQ = ' + Case When d.PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_PLAN_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_TYPE Is Null And d.PY_DT_TYPE Is Not Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Not Null And i.PY_DT_TYPE <> d.PY_DT_TYPE)) Then 'PY_DT_TYPE = ' + Case When d.PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DT_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_FACT Is Null And d.PY_DT_FACT Is Not Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Not Null And i.PY_DT_FACT <> d.PY_DT_FACT)) Then 'PY_DT_FACT = ' + Case When d.PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DT_FACT) + '''' End + ', ' Else '' End +  Case When ((i.PY_PAYMENT Is Null And d.PY_PAYMENT Is Not Null) Or (i.PY_PAYMENT Is Not Null And d.PY_PAYMENT Is Null) Or (i.PY_PAYMENT Is Not Null And d.PY_PAYMENT Is Not Null And i.PY_PAYMENT <> d.PY_PAYMENT)) Then 'PY_PAYMENT = ' + Case When d.PY_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_PAYMENT) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_CAL_TYPE Is Null And d.PY_DT_CAL_TYPE Is Not Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Not Null And i.PY_DT_CAL_TYPE <> d.PY_DT_CAL_TYPE)) Then 'PY_DT_CAL_TYPE = ' + Case When d.PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DT_CAL_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_PAY_TYPE Is Null And d.PY_PAY_TYPE Is Not Null) Or (i.PY_PAY_TYPE Is Not Null And d.PY_PAY_TYPE Is Null) Or (i.PY_PAY_TYPE Is Not Null And d.PY_PAY_TYPE Is Not Null And i.PY_PAY_TYPE <> d.PY_PAY_TYPE)) Then 'PY_PAY_TYPE = ' + Case When d.PY_PAY_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_PAY_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DESC Is Null And d.PY_DESC Is Not Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Not Null And i.PY_DESC <> d.PY_DESC)) Then 'PY_DESC = ' + Case When d.PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PY_DESC) + '''' End + ', ' Else '' End +  Case When ((i.BEFORE_DATE_DESC Is Null And d.BEFORE_DATE_DESC Is Not Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Not Null And i.BEFORE_DATE_DESC <> d.BEFORE_DATE_DESC)) Then 'BEFORE_DATE_DESC = ' + Case When d.BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BEFORE_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.AFTER_DATE_DESC Is Null And d.AFTER_DATE_DESC Is Not Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Not Null And i.AFTER_DATE_DESC <> d.AFTER_DATE_DESC)) Then 'AFTER_DATE_DESC = ' + Case When d.AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.AFTER_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.INITIAL_PAYMENT Is Null And d.INITIAL_PAYMENT Is Not Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Not Null And i.INITIAL_PAYMENT <> d.INITIAL_PAYMENT)) Then 'INITIAL_PAYMENT = ' + Case When d.INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.INITIAL_PAYMENT) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.METHOD_CODE Is Null And d.METHOD_CODE Is Not Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Null) Or (i.METHOD_CODE Is Not Null And d.METHOD_CODE Is Not Null And i.METHOD_CODE <> d.METHOD_CODE)) Then 'METHOD_CODE = ' + Case When i.METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.METHOD_CODE) + '''' End + ', ' Else '' End +  Case When ((i.PY_PLAN_SEQ Is Null And d.PY_PLAN_SEQ Is Not Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Null) Or (i.PY_PLAN_SEQ Is Not Null And d.PY_PLAN_SEQ Is Not Null And i.PY_PLAN_SEQ <> d.PY_PLAN_SEQ)) Then 'PY_PLAN_SEQ = ' + Case When i.PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_PLAN_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_TYPE Is Null And d.PY_DT_TYPE Is Not Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Null) Or (i.PY_DT_TYPE Is Not Null And d.PY_DT_TYPE Is Not Null And i.PY_DT_TYPE <> d.PY_DT_TYPE)) Then 'PY_DT_TYPE = ' + Case When i.PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DT_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_FACT Is Null And d.PY_DT_FACT Is Not Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Null) Or (i.PY_DT_FACT Is Not Null And d.PY_DT_FACT Is Not Null And i.PY_DT_FACT <> d.PY_DT_FACT)) Then 'PY_DT_FACT = ' + Case When i.PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DT_FACT) + '''' End + ', ' Else '' End +  Case When ((i.PY_PAYMENT Is Null And d.PY_PAYMENT Is Not Null) Or (i.PY_PAYMENT Is Not Null And d.PY_PAYMENT Is Null) Or (i.PY_PAYMENT Is Not Null And d.PY_PAYMENT Is Not Null And i.PY_PAYMENT <> d.PY_PAYMENT)) Then 'PY_PAYMENT = ' + Case When i.PY_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_PAYMENT) + '''' End + ', ' Else '' End +  Case When ((i.PY_DT_CAL_TYPE Is Null And d.PY_DT_CAL_TYPE Is Not Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Null) Or (i.PY_DT_CAL_TYPE Is Not Null And d.PY_DT_CAL_TYPE Is Not Null And i.PY_DT_CAL_TYPE <> d.PY_DT_CAL_TYPE)) Then 'PY_DT_CAL_TYPE = ' + Case When i.PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DT_CAL_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_PAY_TYPE Is Null And d.PY_PAY_TYPE Is Not Null) Or (i.PY_PAY_TYPE Is Not Null And d.PY_PAY_TYPE Is Null) Or (i.PY_PAY_TYPE Is Not Null And d.PY_PAY_TYPE Is Not Null And i.PY_PAY_TYPE <> d.PY_PAY_TYPE)) Then 'PY_PAY_TYPE = ' + Case When i.PY_PAY_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_PAY_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.PY_DESC Is Null And d.PY_DESC Is Not Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Null) Or (i.PY_DESC Is Not Null And d.PY_DESC Is Not Null And i.PY_DESC <> d.PY_DESC)) Then 'PY_DESC = ' + Case When i.PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PY_DESC) + '''' End + ', ' Else '' End +  Case When ((i.BEFORE_DATE_DESC Is Null And d.BEFORE_DATE_DESC Is Not Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Null) Or (i.BEFORE_DATE_DESC Is Not Null And d.BEFORE_DATE_DESC Is Not Null And i.BEFORE_DATE_DESC <> d.BEFORE_DATE_DESC)) Then 'BEFORE_DATE_DESC = ' + Case When i.BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BEFORE_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.AFTER_DATE_DESC Is Null And d.AFTER_DATE_DESC Is Not Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Null) Or (i.AFTER_DATE_DESC Is Not Null And d.AFTER_DATE_DESC Is Not Null And i.AFTER_DATE_DESC <> d.AFTER_DATE_DESC)) Then 'AFTER_DATE_DESC = ' + Case When i.AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.AFTER_DATE_DESC) + '''' End + ', ' Else '' End +  Case When ((i.INITIAL_PAYMENT Is Null And d.INITIAL_PAYMENT Is Not Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Null) Or (i.INITIAL_PAYMENT Is Not Null And d.INITIAL_PAYMENT Is Not Null And i.INITIAL_PAYMENT <> d.INITIAL_PAYMENT)) Then 'INITIAL_PAYMENT = ' + Case When i.INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.INITIAL_PAYMENT) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), i.METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), i.PY_PLAN_SEQ) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.METHOD_CODE = d.METHOD_CODE And i.PY_PLAN_SEQ = d.PY_PLAN_SEQ
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('PY_PLAN_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_CODE) + '''' End + ', PY_PLAN_SEQ = ' + Case When PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''' End + ', PY_DT_TYPE = ' + Case When PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_TYPE) + '''' End + ', PY_DT_FACT = ' + Case When PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_FACT) + '''' End + ', PY_PAYMENT = ' + Case When PY_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PAYMENT) + '''' End + ', PY_DT_CAL_TYPE = ' + Case When PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_CAL_TYPE) + '''' End + ', PY_PAY_TYPE = ' + Case When PY_PAY_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PAY_TYPE) + '''' End + ', PY_DESC = ' + Case When PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DESC) + '''' End + ', BEFORE_DATE_DESC = ' + Case When BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BEFORE_DATE_DESC) + '''' End + ', AFTER_DATE_DESC = ' + Case When AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AFTER_DATE_DESC) + '''' End + ', INITIAL_PAYMENT = ' + Case When INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), INITIAL_PAYMENT) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.METHOD_CODE = d.METHOD_CODE And i.PY_PLAN_SEQ = d.PY_PLAN_SEQ
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('PY_PLAN_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', METHOD_CODE = ' + Case When METHOD_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), METHOD_CODE) + '''' End + ', PY_PLAN_SEQ = ' + Case When PY_PLAN_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''' End + ', PY_DT_TYPE = ' + Case When PY_DT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_TYPE) + '''' End + ', PY_DT_FACT = ' + Case When PY_DT_FACT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_FACT) + '''' End + ', PY_PAYMENT = ' + Case When PY_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PAYMENT) + '''' End + ', PY_DT_CAL_TYPE = ' + Case When PY_DT_CAL_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DT_CAL_TYPE) + '''' End + ', PY_PAY_TYPE = ' + Case When PY_PAY_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_PAY_TYPE) + '''' End + ', PY_DESC = ' + Case When PY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PY_DESC) + '''' End + ', BEFORE_DATE_DESC = ' + Case When BEFORE_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BEFORE_DATE_DESC) + '''' End + ', AFTER_DATE_DESC = ' + Case When AFTER_DATE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), AFTER_DATE_DESC) + '''' End + ', INITIAL_PAYMENT = ' + Case When INITIAL_PAYMENT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), INITIAL_PAYMENT) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', METHOD_CODE = ''' + Convert(NVarChar(4000), METHOD_CODE) + ''', PY_PLAN_SEQ = ''' + Convert(NVarChar(4000), PY_PLAN_SEQ) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.METHOD_CODE = d.METHOD_CODE And i.PY_PLAN_SEQ = d.PY_PLAN_SEQ)  End
GO

ALTER TABLE [dbo].[PY_PLAN_DTL] ENABLE TRIGGER [TG_AUD_PY_PLAN_DTL_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_RECEIPT_OnDeleted]
On [dbo].[RECEIPT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('RECEIPT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_NO) + '''' End + ', RECEIPT_NO = ' + Case When RECEIPT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_NO) + '''' End + ', RECEIPT_TYPE = ' + Case When RECEIPT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_TYPE) + '''' End + ', RECEIPT_DATA = ' + Case When RECEIPT_DATA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_DATA) + '''' End + ', SALES_OFFICE_CODE = ' + Case When SALES_OFFICE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFFICE_CODE) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', Cr_Dt = ' + Case When Cr_Dt Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Cr_Dt, 121) + '''' End + ', BUYER_SURNAME = ' + Case When BUYER_SURNAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SURNAME) + '''' End + ', BUYER_GIVEN_NAME = ' + Case When BUYER_GIVEN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_GIVEN_NAME) + '''' End + ', MOA_CO_NAME = ' + Case When MOA_CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_CO_NAME) + '''' End + ', JOINT_BUYER = ' + Case When JOINT_BUYER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), JOINT_BUYER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', Cr_FID = ' + Case When Cr_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Cr_FID) + '''' End + ', TRANSACT_DATE = ' + Case When TRANSACT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TRANSACT_DATE, 121) + '''' End + 'TRANSACT_AMT = ' + Case When TRANSACT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TRANSACT_AMT) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RECEIPT_NO = ''' + Convert(NVarChar(4000), RECEIPT_NO) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[RECEIPT] ENABLE TRIGGER [TG_AUD_RECEIPT_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_RECEIPT_OnInserted]
On [dbo].[RECEIPT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('RECEIPT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MOA_NO) + '''' End + ', RECEIPT_NO = ' + Case When RECEIPT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RECEIPT_NO) + '''' End + ', RECEIPT_TYPE = ' + Case When RECEIPT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RECEIPT_TYPE) + '''' End + ', RECEIPT_DATA = ' + Case When RECEIPT_DATA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RECEIPT_DATA) + '''' End + ', SALES_OFFICE_CODE = ' + Case When SALES_OFFICE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_OFFICE_CODE) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UID) + '''' End + ', Cr_Dt = ' + Case When Cr_Dt Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Cr_Dt,121) + '''' End + ', BUYER_SURNAME = ' + Case When BUYER_SURNAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_SURNAME) + '''' End + ', BUYER_GIVEN_NAME = ' + Case When BUYER_GIVEN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),BUYER_GIVEN_NAME) + '''' End + ', MOA_CO_NAME = ' + Case When MOA_CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MOA_CO_NAME) + '''' End + ', JOINT_BUYER = ' + Case When JOINT_BUYER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),JOINT_BUYER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STATUS) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + ', Cr_FID = ' + Case When Cr_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),Cr_FID) + '''' End + ', TRANSACT_DATE = ' + Case When TRANSACT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TRANSACT_DATE,121) + '''' End + ', TRANSACT_AMT = ' + Case When TRANSACT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TRANSACT_AMT) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RECEIPT_NO = ''' + Convert(NVarChar(4000), RECEIPT_NO) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[RECEIPT] ENABLE TRIGGER [TG_AUD_RECEIPT_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_RECEIPT_OnUpdated]
On [dbo].[RECEIPT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('RECEIPT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.MOA_NO Is Null And d.MOA_NO Is Not Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Not Null And i.MOA_NO <> d.MOA_NO)) Then 'MOA_NO = ' + Case When d.MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MOA_NO) + '''' End + ', ' Else '' End +  Case When ((i.RECEIPT_NO Is Null And d.RECEIPT_NO Is Not Null) Or (i.RECEIPT_NO Is Not Null And d.RECEIPT_NO Is Null) Or (i.RECEIPT_NO Is Not Null And d.RECEIPT_NO Is Not Null And i.RECEIPT_NO <> d.RECEIPT_NO)) Then 'RECEIPT_NO = ' + Case When d.RECEIPT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RECEIPT_NO) + '''' End + ', ' Else '' End +  Case When ((i.RECEIPT_TYPE Is Null And d.RECEIPT_TYPE Is Not Null) Or (i.RECEIPT_TYPE Is Not Null And d.RECEIPT_TYPE Is Null) Or (i.RECEIPT_TYPE Is Not Null And d.RECEIPT_TYPE Is Not Null And i.RECEIPT_TYPE <> d.RECEIPT_TYPE)) Then 'RECEIPT_TYPE = ' + Case When d.RECEIPT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RECEIPT_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.RECEIPT_DATA Is Null And d.RECEIPT_DATA Is Not Null) Or (i.RECEIPT_DATA Is Not Null And d.RECEIPT_DATA Is Null) Or (i.RECEIPT_DATA Is Not Null And d.RECEIPT_DATA Is Not Null And i.RECEIPT_DATA <> d.RECEIPT_DATA)) Then 'RECEIPT_DATA = ' + Case When d.RECEIPT_DATA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RECEIPT_DATA) + '''' End + ', ' Else '' End +  Case When ((i.SALES_OFFICE_CODE Is Null And d.SALES_OFFICE_CODE Is Not Null) Or (i.SALES_OFFICE_CODE Is Not Null And d.SALES_OFFICE_CODE Is Null) Or (i.SALES_OFFICE_CODE Is Not Null And d.SALES_OFFICE_CODE Is Not Null And i.SALES_OFFICE_CODE <> d.SALES_OFFICE_CODE)) Then 'SALES_OFFICE_CODE = ' + Case When d.SALES_OFFICE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_OFFICE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When d.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UID) + '''' End + ', ' Else '' End +  Case When ((i.Cr_Dt Is Null And d.Cr_Dt Is Not Null) Or (i.Cr_Dt Is Not Null And d.Cr_Dt Is Null) Or (i.Cr_Dt Is Not Null And d.Cr_Dt Is Not Null And i.Cr_Dt <> d.Cr_Dt)) Then 'Cr_Dt = ' + Case When d.Cr_Dt Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Cr_Dt, 121) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SURNAME Is Null And d.BUYER_SURNAME Is Not Null) Or (i.BUYER_SURNAME Is Not Null And d.BUYER_SURNAME Is Null) Or (i.BUYER_SURNAME Is Not Null And d.BUYER_SURNAME Is Not Null And i.BUYER_SURNAME <> d.BUYER_SURNAME)) Then 'BUYER_SURNAME = ' + Case When d.BUYER_SURNAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_SURNAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_GIVEN_NAME Is Null And d.BUYER_GIVEN_NAME Is Not Null) Or (i.BUYER_GIVEN_NAME Is Not Null And d.BUYER_GIVEN_NAME Is Null) Or (i.BUYER_GIVEN_NAME Is Not Null And d.BUYER_GIVEN_NAME Is Not Null And i.BUYER_GIVEN_NAME <> d.BUYER_GIVEN_NAME)) Then 'BUYER_GIVEN_NAME = ' + Case When d.BUYER_GIVEN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.BUYER_GIVEN_NAME) + '''' End + ', ' Else '' End +  Case When ((i.MOA_CO_NAME Is Null And d.MOA_CO_NAME Is Not Null) Or (i.MOA_CO_NAME Is Not Null And d.MOA_CO_NAME Is Null) Or (i.MOA_CO_NAME Is Not Null And d.MOA_CO_NAME Is Not Null And i.MOA_CO_NAME <> d.MOA_CO_NAME)) Then 'MOA_CO_NAME = ' + Case When d.MOA_CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MOA_CO_NAME) + '''' End + ', ' Else '' End +  Case When ((i.JOINT_BUYER Is Null And d.JOINT_BUYER Is Not Null) Or (i.JOINT_BUYER Is Not Null And d.JOINT_BUYER Is Null) Or (i.JOINT_BUYER Is Not Null And d.JOINT_BUYER Is Not Null And i.JOINT_BUYER <> d.JOINT_BUYER)) Then 'JOINT_BUYER = ' + Case When d.JOINT_BUYER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.JOINT_BUYER) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When d.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.Cr_FID Is Null And d.Cr_FID Is Not Null) Or (i.Cr_FID Is Not Null And d.Cr_FID Is Null) Or (i.Cr_FID Is Not Null And d.Cr_FID Is Not Null And i.Cr_FID <> d.Cr_FID)) Then 'Cr_FID = ' + Case When d.Cr_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.Cr_FID) + '''' End + ', ' Else '' End +  Case When ((i.TRANSACT_DATE Is Null And d.TRANSACT_DATE Is Not Null) Or (i.TRANSACT_DATE Is Not Null And d.TRANSACT_DATE Is Null) Or (i.TRANSACT_DATE Is Not Null And d.TRANSACT_DATE Is Not Null And i.TRANSACT_DATE <> d.TRANSACT_DATE)) Then 'TRANSACT_DATE = ' + Case When d.TRANSACT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TRANSACT_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.TRANSACT_AMT Is Null And d.TRANSACT_AMT Is Not Null) Or (i.TRANSACT_AMT Is Not Null And d.TRANSACT_AMT Is Null) Or (i.TRANSACT_AMT Is Not Null And d.TRANSACT_AMT Is Not Null And i.TRANSACT_AMT <> d.TRANSACT_AMT)) Then 'TRANSACT_AMT = ' + Case When d.TRANSACT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TRANSACT_AMT) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.MOA_NO Is Null And d.MOA_NO Is Not Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Null) Or (i.MOA_NO Is Not Null And d.MOA_NO Is Not Null And i.MOA_NO <> d.MOA_NO)) Then 'MOA_NO = ' + Case When i.MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MOA_NO) + '''' End + ', ' Else '' End +  Case When ((i.RECEIPT_NO Is Null And d.RECEIPT_NO Is Not Null) Or (i.RECEIPT_NO Is Not Null And d.RECEIPT_NO Is Null) Or (i.RECEIPT_NO Is Not Null And d.RECEIPT_NO Is Not Null And i.RECEIPT_NO <> d.RECEIPT_NO)) Then 'RECEIPT_NO = ' + Case When i.RECEIPT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RECEIPT_NO) + '''' End + ', ' Else '' End +  Case When ((i.RECEIPT_TYPE Is Null And d.RECEIPT_TYPE Is Not Null) Or (i.RECEIPT_TYPE Is Not Null And d.RECEIPT_TYPE Is Null) Or (i.RECEIPT_TYPE Is Not Null And d.RECEIPT_TYPE Is Not Null And i.RECEIPT_TYPE <> d.RECEIPT_TYPE)) Then 'RECEIPT_TYPE = ' + Case When i.RECEIPT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RECEIPT_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.RECEIPT_DATA Is Null And d.RECEIPT_DATA Is Not Null) Or (i.RECEIPT_DATA Is Not Null And d.RECEIPT_DATA Is Null) Or (i.RECEIPT_DATA Is Not Null And d.RECEIPT_DATA Is Not Null And i.RECEIPT_DATA <> d.RECEIPT_DATA)) Then 'RECEIPT_DATA = ' + Case When i.RECEIPT_DATA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RECEIPT_DATA) + '''' End + ', ' Else '' End +  Case When ((i.SALES_OFFICE_CODE Is Null And d.SALES_OFFICE_CODE Is Not Null) Or (i.SALES_OFFICE_CODE Is Not Null And d.SALES_OFFICE_CODE Is Null) Or (i.SALES_OFFICE_CODE Is Not Null And d.SALES_OFFICE_CODE Is Not Null And i.SALES_OFFICE_CODE <> d.SALES_OFFICE_CODE)) Then 'SALES_OFFICE_CODE = ' + Case When i.SALES_OFFICE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_OFFICE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When i.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UID) + '''' End + ', ' Else '' End +  Case When ((i.Cr_Dt Is Null And d.Cr_Dt Is Not Null) Or (i.Cr_Dt Is Not Null And d.Cr_Dt Is Null) Or (i.Cr_Dt Is Not Null And d.Cr_Dt Is Not Null And i.Cr_Dt <> d.Cr_Dt)) Then 'Cr_Dt = ' + Case When i.Cr_Dt Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Cr_Dt, 121) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_SURNAME Is Null And d.BUYER_SURNAME Is Not Null) Or (i.BUYER_SURNAME Is Not Null And d.BUYER_SURNAME Is Null) Or (i.BUYER_SURNAME Is Not Null And d.BUYER_SURNAME Is Not Null And i.BUYER_SURNAME <> d.BUYER_SURNAME)) Then 'BUYER_SURNAME = ' + Case When i.BUYER_SURNAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_SURNAME) + '''' End + ', ' Else '' End +  Case When ((i.BUYER_GIVEN_NAME Is Null And d.BUYER_GIVEN_NAME Is Not Null) Or (i.BUYER_GIVEN_NAME Is Not Null And d.BUYER_GIVEN_NAME Is Null) Or (i.BUYER_GIVEN_NAME Is Not Null And d.BUYER_GIVEN_NAME Is Not Null And i.BUYER_GIVEN_NAME <> d.BUYER_GIVEN_NAME)) Then 'BUYER_GIVEN_NAME = ' + Case When i.BUYER_GIVEN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.BUYER_GIVEN_NAME) + '''' End + ', ' Else '' End +  Case When ((i.MOA_CO_NAME Is Null And d.MOA_CO_NAME Is Not Null) Or (i.MOA_CO_NAME Is Not Null And d.MOA_CO_NAME Is Null) Or (i.MOA_CO_NAME Is Not Null And d.MOA_CO_NAME Is Not Null And i.MOA_CO_NAME <> d.MOA_CO_NAME)) Then 'MOA_CO_NAME = ' + Case When i.MOA_CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MOA_CO_NAME) + '''' End + ', ' Else '' End +  Case When ((i.JOINT_BUYER Is Null And d.JOINT_BUYER Is Not Null) Or (i.JOINT_BUYER Is Not Null And d.JOINT_BUYER Is Null) Or (i.JOINT_BUYER Is Not Null And d.JOINT_BUYER Is Not Null And i.JOINT_BUYER <> d.JOINT_BUYER)) Then 'JOINT_BUYER = ' + Case When i.JOINT_BUYER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.JOINT_BUYER) + '''' End + ', ' Else '' End +  Case When ((i.STATUS Is Null And d.STATUS Is Not Null) Or (i.STATUS Is Not Null And d.STATUS Is Null) Or (i.STATUS Is Not Null And d.STATUS Is Not Null And i.STATUS <> d.STATUS)) Then 'STATUS = ' + Case When i.STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STATUS) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.Cr_FID Is Null And d.Cr_FID Is Not Null) Or (i.Cr_FID Is Not Null And d.Cr_FID Is Null) Or (i.Cr_FID Is Not Null And d.Cr_FID Is Not Null And i.Cr_FID <> d.Cr_FID)) Then 'Cr_FID = ' + Case When i.Cr_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.Cr_FID) + '''' End + ', ' Else '' End +  Case When ((i.TRANSACT_DATE Is Null And d.TRANSACT_DATE Is Not Null) Or (i.TRANSACT_DATE Is Not Null And d.TRANSACT_DATE Is Null) Or (i.TRANSACT_DATE Is Not Null And d.TRANSACT_DATE Is Not Null And i.TRANSACT_DATE <> d.TRANSACT_DATE)) Then 'TRANSACT_DATE = ' + Case When i.TRANSACT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TRANSACT_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.TRANSACT_AMT Is Null And d.TRANSACT_AMT Is Not Null) Or (i.TRANSACT_AMT Is Not Null And d.TRANSACT_AMT Is Null) Or (i.TRANSACT_AMT Is Not Null And d.TRANSACT_AMT Is Not Null And i.TRANSACT_AMT <> d.TRANSACT_AMT)) Then 'TRANSACT_AMT = ' + Case When i.TRANSACT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TRANSACT_AMT) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', RECEIPT_NO = ''' + Convert(NVarChar(4000), i.RECEIPT_NO) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.RECEIPT_NO = d.RECEIPT_NO
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('RECEIPT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_NO) + '''' End + ', RECEIPT_NO = ' + Case When RECEIPT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_NO) + '''' End + ', RECEIPT_TYPE = ' + Case When RECEIPT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_TYPE) + '''' End + ', RECEIPT_DATA = ' + Case When RECEIPT_DATA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_DATA) + '''' End + ', SALES_OFFICE_CODE = ' + Case When SALES_OFFICE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFFICE_CODE) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', Cr_Dt = ' + Case When Cr_Dt Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Cr_Dt, 121) + '''' End + ', BUYER_SURNAME = ' + Case When BUYER_SURNAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SURNAME) + '''' End + ', BUYER_GIVEN_NAME = ' + Case When BUYER_GIVEN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_GIVEN_NAME) + '''' End + ', MOA_CO_NAME = ' + Case When MOA_CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_CO_NAME) + '''' End + ', JOINT_BUYER = ' + Case When JOINT_BUYER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), JOINT_BUYER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', Cr_FID = ' + Case When Cr_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Cr_FID) + '''' End + ', TRANSACT_DATE = ' + Case When TRANSACT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TRANSACT_DATE, 121) + '''' End + ', TRANSACT_AMT = ' + Case When TRANSACT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TRANSACT_AMT) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RECEIPT_NO = ''' + Convert(NVarChar(4000), RECEIPT_NO) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.RECEIPT_NO = d.RECEIPT_NO
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('RECEIPT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', MOA_NO = ' + Case When MOA_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_NO) + '''' End + ', RECEIPT_NO = ' + Case When RECEIPT_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_NO) + '''' End + ', RECEIPT_TYPE = ' + Case When RECEIPT_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_TYPE) + '''' End + ', RECEIPT_DATA = ' + Case When RECEIPT_DATA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RECEIPT_DATA) + '''' End + ', SALES_OFFICE_CODE = ' + Case When SALES_OFFICE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFFICE_CODE) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', Cr_Dt = ' + Case When Cr_Dt Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Cr_Dt, 121) + '''' End + ', BUYER_SURNAME = ' + Case When BUYER_SURNAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_SURNAME) + '''' End + ', BUYER_GIVEN_NAME = ' + Case When BUYER_GIVEN_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), BUYER_GIVEN_NAME) + '''' End + ', MOA_CO_NAME = ' + Case When MOA_CO_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MOA_CO_NAME) + '''' End + ', JOINT_BUYER = ' + Case When JOINT_BUYER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), JOINT_BUYER) + '''' End + ', STATUS = ' + Case When STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STATUS) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + ', Cr_FID = ' + Case When Cr_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), Cr_FID) + '''' End + ', TRANSACT_DATE = ' + Case When TRANSACT_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TRANSACT_DATE, 121) + '''' End + ', TRANSACT_AMT = ' + Case When TRANSACT_AMT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TRANSACT_AMT) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', RECEIPT_NO = ''' + Convert(NVarChar(4000), RECEIPT_NO) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.RECEIPT_NO = d.RECEIPT_NO)  End
GO

ALTER TABLE [dbo].[RECEIPT] ENABLE TRIGGER [TG_AUD_RECEIPT_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_REGION_OnDeleted]
On [dbo].[REGION]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('REGION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', REGION_DESC = ' + Case When REGION_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_DESC) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[REGION] ENABLE TRIGGER [TG_AUD_REGION_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_REGION_OnInserted]
On [dbo].[REGION]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('REGION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REGION_CODE) + '''' End + ', REGION_DESC = ' + Case When REGION_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REGION_DESC) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[REGION] ENABLE TRIGGER [TG_AUD_REGION_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_REGION_OnUpdated]
On [dbo].[REGION]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('REGION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When d.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.REGION_DESC Is Null And d.REGION_DESC Is Not Null) Or (i.REGION_DESC Is Not Null And d.REGION_DESC Is Null) Or (i.REGION_DESC Is Not Null And d.REGION_DESC Is Not Null And i.REGION_DESC <> d.REGION_DESC)) Then 'REGION_DESC = ' + Case When d.REGION_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REGION_DESC) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.REGION_CODE Is Null And d.REGION_CODE Is Not Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Null) Or (i.REGION_CODE Is Not Null And d.REGION_CODE Is Not Null And i.REGION_CODE <> d.REGION_CODE)) Then 'REGION_CODE = ' + Case When i.REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REGION_CODE) + '''' End + ', ' Else '' End +  Case When ((i.REGION_DESC Is Null And d.REGION_DESC Is Not Null) Or (i.REGION_DESC Is Not Null And d.REGION_DESC Is Null) Or (i.REGION_DESC Is Not Null And d.REGION_DESC Is Not Null And i.REGION_DESC <> d.REGION_DESC)) Then 'REGION_DESC = ' + Case When i.REGION_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REGION_DESC) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('REGION_CODE = ''' + Convert(NVarChar(4000), i.REGION_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.REGION_CODE = d.REGION_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('REGION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', REGION_DESC = ' + Case When REGION_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_DESC) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.REGION_CODE = d.REGION_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('REGION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('REGION_CODE = ' + Case When REGION_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_CODE) + '''' End + ', REGION_DESC = ' + Case When REGION_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REGION_DESC) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('REGION_CODE = ''' + Convert(NVarChar(4000), REGION_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.REGION_CODE = d.REGION_CODE)  End
GO

ALTER TABLE [dbo].[REGION] ENABLE TRIGGER [TG_AUD_REGION_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_SALES_BATCH_OnDeleted]
On [dbo].[SALES_BATCH]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SALES_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SALES_BATCH_CODE = ' + Case When SALES_BATCH_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_BATCH_CODE) + '''' End + ', SALES_BATCH_NAME = ' + Case When SALES_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_BATCH_NAME) + '''' End + ', ALLOW_PERSONAL = ' + Case When ALLOW_PERSONAL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ALLOW_PERSONAL) + '''' End + ', ALLOW_LOCAL_COMP = ' + Case When ALLOW_LOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ALLOW_LOCAL_COMP) + '''' End + ', ALLOW_NLOCAL_COMP = ' + Case When ALLOW_NLOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ALLOW_NLOCAL_COMP) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SALES_BATCH_CODE = ''' + Convert(NVarChar(4000), SALES_BATCH_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SALES_BATCH] ENABLE TRIGGER [TG_AUD_SALES_BATCH_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SALES_BATCH_OnInserted]
On [dbo].[SALES_BATCH]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SALES_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SALES_BATCH_CODE = ' + Case When SALES_BATCH_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_BATCH_CODE) + '''' End + ', SALES_BATCH_NAME = ' + Case When SALES_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_BATCH_NAME) + '''' End + ', ALLOW_PERSONAL = ' + Case When ALLOW_PERSONAL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ALLOW_PERSONAL) + '''' End + ', ALLOW_LOCAL_COMP = ' + Case When ALLOW_LOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ALLOW_LOCAL_COMP) + '''' End + ', ALLOW_NLOCAL_COMP = ' + Case When ALLOW_NLOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ALLOW_NLOCAL_COMP) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('SALES_BATCH_CODE = ''' + Convert(NVarChar(4000), SALES_BATCH_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SALES_BATCH] ENABLE TRIGGER [TG_AUD_SALES_BATCH_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_SALES_BATCH_OnUpdated]
On [dbo].[SALES_BATCH]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

					Insert Into AUDIT_LOG (
						TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
						ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
					)
					Select Left('SALES_BATCH', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
						Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SALES_BATCH_CODE Is Null And d.SALES_BATCH_CODE Is Not Null) Or (i.SALES_BATCH_CODE Is Not Null And d.SALES_BATCH_CODE Is Null) Or (i.SALES_BATCH_CODE Is Not Null And d.SALES_BATCH_CODE Is Not Null And i.SALES_BATCH_CODE <> d.SALES_BATCH_CODE)) Then 'SALES_BATCH_CODE = ' + Case When d.SALES_BATCH_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_BATCH_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_BATCH_NAME Is Null And d.SALES_BATCH_NAME Is Not Null) Or (i.SALES_BATCH_NAME Is Not Null And d.SALES_BATCH_NAME Is Null) Or (i.SALES_BATCH_NAME Is Not Null And d.SALES_BATCH_NAME Is Not Null And i.SALES_BATCH_NAME <> d.SALES_BATCH_NAME)) Then 'SALES_BATCH_NAME = ' + Case When d.SALES_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_BATCH_NAME) + '''' End + ', ' Else '' End +  Case When ((i.ALLOW_PERSONAL Is Null And d.ALLOW_PERSONAL Is Not Null) Or (i.ALLOW_PERSONAL Is Not Null And d.ALLOW_PERSONAL Is Null) Or (i.ALLOW_PERSONAL Is Not Null And d.ALLOW_PERSONAL Is Not Null And i.ALLOW_PERSONAL <> d.ALLOW_PERSONAL)) Then 'ALLOW_PERSONAL = ' + Case When d.ALLOW_PERSONAL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ALLOW_PERSONAL) + '''' End + ', ' Else '' End +  Case When ((i.ALLOW_LOCAL_COMP Is Null And d.ALLOW_LOCAL_COMP Is Not Null) Or (i.ALLOW_LOCAL_COMP Is Not Null And d.ALLOW_LOCAL_COMP Is Null) Or (i.ALLOW_LOCAL_COMP Is Not Null And d.ALLOW_LOCAL_COMP Is Not Null And i.ALLOW_LOCAL_COMP <> d.ALLOW_LOCAL_COMP)) Then 'ALLOW_LOCAL_COMP = ' + Case When d.ALLOW_LOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ALLOW_LOCAL_COMP) + '''' End + ', ' Else '' End +  Case When ((i.ALLOW_NLOCAL_COMP Is Null And d.ALLOW_NLOCAL_COMP Is Not Null) Or (i.ALLOW_NLOCAL_COMP Is Not Null And d.ALLOW_NLOCAL_COMP Is Null) Or (i.ALLOW_NLOCAL_COMP Is Not Null And d.ALLOW_NLOCAL_COMP Is Not Null And i.ALLOW_NLOCAL_COMP <> d.ALLOW_NLOCAL_COMP)) Then 'ALLOW_NLOCAL_COMP = ' + Case When d.ALLOW_NLOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ALLOW_NLOCAL_COMP) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SALES_BATCH_CODE Is Null And d.SALES_BATCH_CODE Is Not Null) Or (i.SALES_BATCH_CODE Is Not Null And d.SALES_BATCH_CODE Is Null) Or (i.SALES_BATCH_CODE Is Not Null And d.SALES_BATCH_CODE Is Not Null And i.SALES_BATCH_CODE <> d.SALES_BATCH_CODE)) Then 'SALES_BATCH_CODE = ' + Case When i.SALES_BATCH_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_BATCH_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_BATCH_NAME Is Null And d.SALES_BATCH_NAME Is Not Null) Or (i.SALES_BATCH_NAME Is Not Null And d.SALES_BATCH_NAME Is Null) Or (i.SALES_BATCH_NAME Is Not Null And d.SALES_BATCH_NAME Is Not Null And i.SALES_BATCH_NAME <> d.SALES_BATCH_NAME)) Then 'SALES_BATCH_NAME = ' + Case When i.SALES_BATCH_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_BATCH_NAME) + '''' End + ', ' Else '' End +  Case When ((i.ALLOW_PERSONAL Is Null And d.ALLOW_PERSONAL Is Not Null) Or (i.ALLOW_PERSONAL Is Not Null And d.ALLOW_PERSONAL Is Null) Or (i.ALLOW_PERSONAL Is Not Null And d.ALLOW_PERSONAL Is Not Null And i.ALLOW_PERSONAL <> d.ALLOW_PERSONAL)) Then 'ALLOW_PERSONAL = ' + Case When i.ALLOW_PERSONAL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ALLOW_PERSONAL) + '''' End + ', ' Else '' End +  Case When ((i.ALLOW_LOCAL_COMP Is Null And d.ALLOW_LOCAL_COMP Is Not Null) Or (i.ALLOW_LOCAL_COMP Is Not Null And d.ALLOW_LOCAL_COMP Is Null) Or (i.ALLOW_LOCAL_COMP Is Not Null And d.ALLOW_LOCAL_COMP Is Not Null And i.ALLOW_LOCAL_COMP <> d.ALLOW_LOCAL_COMP)) Then 'ALLOW_LOCAL_COMP = ' + Case When i.ALLOW_LOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ALLOW_LOCAL_COMP) + '''' End + ', ' Else '' End +  Case When ((i.ALLOW_NLOCAL_COMP Is Null And d.ALLOW_NLOCAL_COMP Is Not Null) Or (i.ALLOW_NLOCAL_COMP Is Not Null And d.ALLOW_NLOCAL_COMP Is Null) Or (i.ALLOW_NLOCAL_COMP Is Not Null And d.ALLOW_NLOCAL_COMP Is Not Null And i.ALLOW_NLOCAL_COMP <> d.ALLOW_NLOCAL_COMP)) Then 'ALLOW_NLOCAL_COMP = ' + Case When i.ALLOW_NLOCAL_COMP Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ALLOW_NLOCAL_COMP) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('SALES_BATCH_CODE = ''' + Convert(NVarChar(4000), i.SALES_BATCH_CODE) + ''', PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''', 4000) KeyValue
						From Inserted i, Deleted d
						Where i.SALES_BATCH_CODE = d.SALES_BATCH_CODE And i.PROJECT_ID = d.PROJECT_ID
					) Temp 
					Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''  End
GO

ALTER TABLE [dbo].[SALES_BATCH] ENABLE TRIGGER [TG_AUD_SALES_BATCH_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SALES_OFFICE_OnDeleted]
On [dbo].[SALES_OFFICE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SALES_OFFICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SALES_OFF_CODE = ' + Case When SALES_OFF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_CODE) + '''' End + ', SALES_OFF_DESC = ' + Case When SALES_OFF_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_DESC) + '''' End + ', SALES_OFF_STATUS = ' + Case When SALES_OFF_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_STATUS) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SALES_OFF_CODE = ''' + Convert(NVarChar(4000), SALES_OFF_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SALES_OFFICE] ENABLE TRIGGER [TG_AUD_SALES_OFFICE_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_SALES_OFFICE_OnInserted]
On [dbo].[SALES_OFFICE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SALES_OFFICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SALES_OFF_CODE = ' + Case When SALES_OFF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_OFF_CODE) + '''' End + ', SALES_OFF_DESC = ' + Case When SALES_OFF_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_OFF_DESC) + '''' End + ', SALES_OFF_STATUS = ' + Case When SALES_OFF_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_OFF_STATUS) + '''' End + '', 4000), @PROJECT_ID, Left('SALES_OFF_CODE = ''' + Convert(NVarChar(4000), SALES_OFF_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SALES_OFFICE] ENABLE TRIGGER [TG_AUD_SALES_OFFICE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_SALES_OFFICE_OnUpdated]
On [dbo].[SALES_OFFICE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SALES_OFFICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SALES_OFF_CODE Is Null And d.SALES_OFF_CODE Is Not Null) Or (i.SALES_OFF_CODE Is Not Null And d.SALES_OFF_CODE Is Null) Or (i.SALES_OFF_CODE Is Not Null And d.SALES_OFF_CODE Is Not Null And i.SALES_OFF_CODE <> d.SALES_OFF_CODE)) Then 'SALES_OFF_CODE = ' + Case When d.SALES_OFF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_OFF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_OFF_DESC Is Null And d.SALES_OFF_DESC Is Not Null) Or (i.SALES_OFF_DESC Is Not Null And d.SALES_OFF_DESC Is Null) Or (i.SALES_OFF_DESC Is Not Null And d.SALES_OFF_DESC Is Not Null And i.SALES_OFF_DESC <> d.SALES_OFF_DESC)) Then 'SALES_OFF_DESC = ' + Case When d.SALES_OFF_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_OFF_DESC) + '''' End + ', ' Else '' End +  Case When ((i.SALES_OFF_STATUS Is Null And d.SALES_OFF_STATUS Is Not Null) Or (i.SALES_OFF_STATUS Is Not Null And d.SALES_OFF_STATUS Is Null) Or (i.SALES_OFF_STATUS Is Not Null And d.SALES_OFF_STATUS Is Not Null And i.SALES_OFF_STATUS <> d.SALES_OFF_STATUS)) Then 'SALES_OFF_STATUS = ' + Case When d.SALES_OFF_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_OFF_STATUS) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SALES_OFF_CODE Is Null And d.SALES_OFF_CODE Is Not Null) Or (i.SALES_OFF_CODE Is Not Null And d.SALES_OFF_CODE Is Null) Or (i.SALES_OFF_CODE Is Not Null And d.SALES_OFF_CODE Is Not Null And i.SALES_OFF_CODE <> d.SALES_OFF_CODE)) Then 'SALES_OFF_CODE = ' + Case When i.SALES_OFF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_OFF_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_OFF_DESC Is Null And d.SALES_OFF_DESC Is Not Null) Or (i.SALES_OFF_DESC Is Not Null And d.SALES_OFF_DESC Is Null) Or (i.SALES_OFF_DESC Is Not Null And d.SALES_OFF_DESC Is Not Null And i.SALES_OFF_DESC <> d.SALES_OFF_DESC)) Then 'SALES_OFF_DESC = ' + Case When i.SALES_OFF_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_OFF_DESC) + '''' End + ', ' Else '' End +  Case When ((i.SALES_OFF_STATUS Is Null And d.SALES_OFF_STATUS Is Not Null) Or (i.SALES_OFF_STATUS Is Not Null And d.SALES_OFF_STATUS Is Null) Or (i.SALES_OFF_STATUS Is Not Null And d.SALES_OFF_STATUS Is Not Null And i.SALES_OFF_STATUS <> d.SALES_OFF_STATUS)) Then 'SALES_OFF_STATUS = ' + Case When i.SALES_OFF_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_OFF_STATUS) + '''' End + ', ' Else '' End)  ChangedValue, Left('SALES_OFF_CODE = ''' + Convert(NVarChar(4000), i.SALES_OFF_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.SALES_OFF_CODE = d.SALES_OFF_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SALES_OFFICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SALES_OFF_CODE = ' + Case When SALES_OFF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_CODE) + '''' End + ', SALES_OFF_DESC = ' + Case When SALES_OFF_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_DESC) + '''' End + ', SALES_OFF_STATUS = ' + Case When SALES_OFF_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_STATUS) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SALES_OFF_CODE = ''' + Convert(NVarChar(4000), SALES_OFF_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.SALES_OFF_CODE = d.SALES_OFF_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SALES_OFFICE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SALES_OFF_CODE = ' + Case When SALES_OFF_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_CODE) + '''' End + ', SALES_OFF_DESC = ' + Case When SALES_OFF_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_DESC) + '''' End + ', SALES_OFF_STATUS = ' + Case When SALES_OFF_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_OFF_STATUS) + '''' End + '', 4000), @PROJECT_ID, Left('SALES_OFF_CODE = ''' + Convert(NVarChar(4000), SALES_OFF_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.SALES_OFF_CODE = d.SALES_OFF_CODE)  End
GO

ALTER TABLE [dbo].[SALES_OFFICE] ENABLE TRIGGER [TG_AUD_SALES_OFFICE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SALES_TYPE_OnDeleted]
On [dbo].[SALES_TYPE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SALES_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''' End + ', SALES_TYPE_DESC = ' + Case When SALES_TYPE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SALES_TYPE_CODE = ''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SALES_TYPE] ENABLE TRIGGER [TG_AUD_SALES_TYPE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SALES_TYPE_OnInserted]
On [dbo].[SALES_TYPE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SALES_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_TYPE_CODE) + '''' End + ', SALES_TYPE_DESC = ' + Case When SALES_TYPE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SALES_TYPE_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('SALES_TYPE_CODE = ''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SALES_TYPE] ENABLE TRIGGER [TG_AUD_SALES_TYPE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_SALES_TYPE_OnUpdated]
On [dbo].[SALES_TYPE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SALES_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SALES_TYPE_CODE Is Null And d.SALES_TYPE_CODE Is Not Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Not Null And i.SALES_TYPE_CODE <> d.SALES_TYPE_CODE)) Then 'SALES_TYPE_CODE = ' + Case When d.SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_TYPE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_TYPE_DESC Is Null And d.SALES_TYPE_DESC Is Not Null) Or (i.SALES_TYPE_DESC Is Not Null And d.SALES_TYPE_DESC Is Null) Or (i.SALES_TYPE_DESC Is Not Null And d.SALES_TYPE_DESC Is Not Null And i.SALES_TYPE_DESC <> d.SALES_TYPE_DESC)) Then 'SALES_TYPE_DESC = ' + Case When d.SALES_TYPE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SALES_TYPE_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SALES_TYPE_CODE Is Null And d.SALES_TYPE_CODE Is Not Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Null) Or (i.SALES_TYPE_CODE Is Not Null And d.SALES_TYPE_CODE Is Not Null And i.SALES_TYPE_CODE <> d.SALES_TYPE_CODE)) Then 'SALES_TYPE_CODE = ' + Case When i.SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_TYPE_CODE) + '''' End + ', ' Else '' End +  Case When ((i.SALES_TYPE_DESC Is Null And d.SALES_TYPE_DESC Is Not Null) Or (i.SALES_TYPE_DESC Is Not Null And d.SALES_TYPE_DESC Is Null) Or (i.SALES_TYPE_DESC Is Not Null And d.SALES_TYPE_DESC Is Not Null And i.SALES_TYPE_DESC <> d.SALES_TYPE_DESC)) Then 'SALES_TYPE_DESC = ' + Case When i.SALES_TYPE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SALES_TYPE_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('SALES_TYPE_CODE = ''' + Convert(NVarChar(4000), i.SALES_TYPE_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.SALES_TYPE_CODE = d.SALES_TYPE_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SALES_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''' End + ', SALES_TYPE_DESC = ' + Case When SALES_TYPE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SALES_TYPE_CODE = ''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.SALES_TYPE_CODE = d.SALES_TYPE_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SALES_TYPE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SALES_TYPE_CODE = ' + Case When SALES_TYPE_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''' End + ', SALES_TYPE_DESC = ' + Case When SALES_TYPE_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SALES_TYPE_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('SALES_TYPE_CODE = ''' + Convert(NVarChar(4000), SALES_TYPE_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.SALES_TYPE_CODE = d.SALES_TYPE_CODE)  End
GO

ALTER TABLE [dbo].[SALES_TYPE] ENABLE TRIGGER [TG_AUD_SALES_TYPE_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SKIP_DATE_OnDeleted]
On [dbo].[SKIP_DATE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SKIP_DATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', SKIP_DATE = ' + Case When SKIP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SKIP_DATE, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', SKIP_DATE = ''' + Convert(NVarChar(4000), SKIP_DATE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SKIP_DATE] ENABLE TRIGGER [TG_AUD_SKIP_DATE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SKIP_DATE_OnInserted]
On [dbo].[SKIP_DATE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SKIP_DATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', SKIP_DATE = ' + Case When SKIP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SKIP_DATE,121) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', SKIP_DATE = ''' + Convert(NVarChar(4000), SKIP_DATE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SKIP_DATE] ENABLE TRIGGER [TG_AUD_SKIP_DATE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_SKIP_DATE_OnUpdated]
On [dbo].[SKIP_DATE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SKIP_DATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SKIP_DATE Is Null And d.SKIP_DATE Is Not Null) Or (i.SKIP_DATE Is Not Null And d.SKIP_DATE Is Null) Or (i.SKIP_DATE Is Not Null And d.SKIP_DATE Is Not Null And i.SKIP_DATE <> d.SKIP_DATE)) Then 'SKIP_DATE = ' + Case When d.SKIP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SKIP_DATE, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SKIP_DATE Is Null And d.SKIP_DATE Is Not Null) Or (i.SKIP_DATE Is Not Null And d.SKIP_DATE Is Null) Or (i.SKIP_DATE Is Not Null And d.SKIP_DATE Is Not Null And i.SKIP_DATE <> d.SKIP_DATE)) Then 'SKIP_DATE = ' + Case When i.SKIP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SKIP_DATE, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', SKIP_DATE = ''' + Convert(NVarChar(4000), i.SKIP_DATE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.SKIP_DATE = d.SKIP_DATE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SKIP_DATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', SKIP_DATE = ' + Case When SKIP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SKIP_DATE, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', SKIP_DATE = ''' + Convert(NVarChar(4000), SKIP_DATE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.SKIP_DATE = d.SKIP_DATE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SKIP_DATE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', SKIP_DATE = ' + Case When SKIP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SKIP_DATE, 121) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', SKIP_DATE = ''' + Convert(NVarChar(4000), SKIP_DATE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.SKIP_DATE = d.SKIP_DATE)  End
GO

ALTER TABLE [dbo].[SKIP_DATE] ENABLE TRIGGER [TG_AUD_SKIP_DATE_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_SPECIAL_ACCESS_OnDeleted]
On [dbo].[SPECIAL_ACCESS]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SPECIAL_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', ACCESS_FLAG = ' + Case When ACCESS_FLAG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ACCESS_FLAG) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + ''', UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SPECIAL_ACCESS] ENABLE TRIGGER [TG_AUD_SPECIAL_ACCESS_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SPECIAL_ACCESS_OnInserted]
On [dbo].[SPECIAL_ACCESS]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SPECIAL_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FN_ID) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UID) + '''' End + ', ACCESS_FLAG = ' + Case When ACCESS_FLAG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ACCESS_FLAG) + '''' End + '', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + ''', UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SPECIAL_ACCESS] ENABLE TRIGGER [TG_AUD_SPECIAL_ACCESS_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_SPECIAL_ACCESS_OnUpdated]
On [dbo].[SPECIAL_ACCESS]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SPECIAL_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.FN_ID Is Null And d.FN_ID Is Not Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Not Null And i.FN_ID <> d.FN_ID)) Then 'FN_ID = ' + Case When d.FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FN_ID) + '''' End + ', ' Else '' End +  Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When d.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UID) + '''' End + ', ' Else '' End +  Case When ((i.ACCESS_FLAG Is Null And d.ACCESS_FLAG Is Not Null) Or (i.ACCESS_FLAG Is Not Null And d.ACCESS_FLAG Is Null) Or (i.ACCESS_FLAG Is Not Null And d.ACCESS_FLAG Is Not Null And i.ACCESS_FLAG <> d.ACCESS_FLAG)) Then 'ACCESS_FLAG = ' + Case When d.ACCESS_FLAG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ACCESS_FLAG) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.FN_ID Is Null And d.FN_ID Is Not Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Null) Or (i.FN_ID Is Not Null And d.FN_ID Is Not Null And i.FN_ID <> d.FN_ID)) Then 'FN_ID = ' + Case When i.FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FN_ID) + '''' End + ', ' Else '' End +  Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When i.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UID) + '''' End + ', ' Else '' End +  Case When ((i.ACCESS_FLAG Is Null And d.ACCESS_FLAG Is Not Null) Or (i.ACCESS_FLAG Is Not Null And d.ACCESS_FLAG Is Null) Or (i.ACCESS_FLAG Is Not Null And d.ACCESS_FLAG Is Not Null And i.ACCESS_FLAG <> d.ACCESS_FLAG)) Then 'ACCESS_FLAG = ' + Case When i.ACCESS_FLAG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ACCESS_FLAG) + '''' End + ', ' Else '' End)  ChangedValue, Left('FN_ID = ''' + Convert(NVarChar(4000), i.FN_ID) + ''', UID = ''' + Convert(NVarChar(4000), i.UID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.FN_ID = d.FN_ID And i.UID = d.UID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SPECIAL_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', ACCESS_FLAG = ' + Case When ACCESS_FLAG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ACCESS_FLAG) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + ''', UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.FN_ID = d.FN_ID And i.UID = d.UID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SPECIAL_ACCESS', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', ACCESS_FLAG = ' + Case When ACCESS_FLAG Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ACCESS_FLAG) + '''' End + '', 4000), @PROJECT_ID, Left('FN_ID = ''' + Convert(NVarChar(4000), FN_ID) + ''', UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.FN_ID = d.FN_ID And i.UID = d.UID)  End
GO

ALTER TABLE [dbo].[SPECIAL_ACCESS] ENABLE TRIGGER [TG_AUD_SPECIAL_ACCESS_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_STAMP_DUTY_OnDeleted]
On [dbo].[STAMP_DUTY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('STAMP_DUTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''' End + ', STAMP_DUTY_DESC = ' + Case When STAMP_DUTY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_DESC) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[STAMP_DUTY] ENABLE TRIGGER [TG_AUD_STAMP_DUTY_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_STAMP_DUTY_OnInserted]
On [dbo].[STAMP_DUTY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('STAMP_DUTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STAMP_DUTY_CODE) + '''' End + ', STAMP_DUTY_DESC = ' + Case When STAMP_DUTY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STAMP_DUTY_DESC) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[STAMP_DUTY] ENABLE TRIGGER [TG_AUD_STAMP_DUTY_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_STAMP_DUTY_OnUpdated]
On [dbo].[STAMP_DUTY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('STAMP_DUTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.STAMP_DUTY_CODE Is Null And d.STAMP_DUTY_CODE Is Not Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Not Null And i.STAMP_DUTY_CODE <> d.STAMP_DUTY_CODE)) Then 'STAMP_DUTY_CODE = ' + Case When d.STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STAMP_DUTY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.STAMP_DUTY_DESC Is Null And d.STAMP_DUTY_DESC Is Not Null) Or (i.STAMP_DUTY_DESC Is Not Null And d.STAMP_DUTY_DESC Is Null) Or (i.STAMP_DUTY_DESC Is Not Null And d.STAMP_DUTY_DESC Is Not Null And i.STAMP_DUTY_DESC <> d.STAMP_DUTY_DESC)) Then 'STAMP_DUTY_DESC = ' + Case When d.STAMP_DUTY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STAMP_DUTY_DESC) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.STAMP_DUTY_CODE Is Null And d.STAMP_DUTY_CODE Is Not Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Not Null And i.STAMP_DUTY_CODE <> d.STAMP_DUTY_CODE)) Then 'STAMP_DUTY_CODE = ' + Case When i.STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STAMP_DUTY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.STAMP_DUTY_DESC Is Null And d.STAMP_DUTY_DESC Is Not Null) Or (i.STAMP_DUTY_DESC Is Not Null And d.STAMP_DUTY_DESC Is Null) Or (i.STAMP_DUTY_DESC Is Not Null And d.STAMP_DUTY_DESC Is Not Null And i.STAMP_DUTY_DESC <> d.STAMP_DUTY_DESC)) Then 'STAMP_DUTY_DESC = ' + Case When i.STAMP_DUTY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STAMP_DUTY_DESC) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), i.STAMP_DUTY_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.STAMP_DUTY_CODE = d.STAMP_DUTY_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('STAMP_DUTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''' End + ', STAMP_DUTY_DESC = ' + Case When STAMP_DUTY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_DESC) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.STAMP_DUTY_CODE = d.STAMP_DUTY_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('STAMP_DUTY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''' End + ', STAMP_DUTY_DESC = ' + Case When STAMP_DUTY_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_DESC) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.STAMP_DUTY_CODE = d.STAMP_DUTY_CODE)  End
GO

ALTER TABLE [dbo].[STAMP_DUTY] ENABLE TRIGGER [TG_AUD_STAMP_DUTY_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_STAMP_DUTY_RANGE_OnDeleted]
On [dbo].[STAMP_DUTY_RANGE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('STAMP_DUTY_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''' End + ', RANGE_NO = ' + Case When RANGE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_NO) + '''' End + ', RANGE_START = ' + Case When RANGE_START Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_START) + '''' End + ', RANGE_END = ' + Case When RANGE_END Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_END) + '''' End + ', FORMULA_FACTOR_A = ' + Case When FORMULA_FACTOR_A Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_A) + '''' End + ', FORMULA_FACTOR_B = ' + Case When FORMULA_FACTOR_B Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_B) + '''' End + ', FORMULA_FACTOR_C = ' + Case When FORMULA_FACTOR_C Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_C) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + ''', RANGE_NO = ''' + Convert(NVarChar(4000), RANGE_NO) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[STAMP_DUTY_RANGE] ENABLE TRIGGER [TG_AUD_STAMP_DUTY_RANGE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_STAMP_DUTY_RANGE_OnInserted]
On [dbo].[STAMP_DUTY_RANGE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('STAMP_DUTY_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STAMP_DUTY_CODE) + '''' End + ', RANGE_NO = ' + Case When RANGE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RANGE_NO) + '''' End + ', RANGE_START = ' + Case When RANGE_START Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RANGE_START) + '''' End + ', RANGE_END = ' + Case When RANGE_END Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),RANGE_END) + '''' End + ', FORMULA_FACTOR_A = ' + Case When FORMULA_FACTOR_A Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FORMULA_FACTOR_A) + '''' End + ', FORMULA_FACTOR_B = ' + Case When FORMULA_FACTOR_B Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FORMULA_FACTOR_B) + '''' End + ', FORMULA_FACTOR_C = ' + Case When FORMULA_FACTOR_C Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FORMULA_FACTOR_C) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + ''', RANGE_NO = ''' + Convert(NVarChar(4000), RANGE_NO) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[STAMP_DUTY_RANGE] ENABLE TRIGGER [TG_AUD_STAMP_DUTY_RANGE_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_STAMP_DUTY_RANGE_OnUpdated]
On [dbo].[STAMP_DUTY_RANGE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('STAMP_DUTY_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.STAMP_DUTY_CODE Is Null And d.STAMP_DUTY_CODE Is Not Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Not Null And i.STAMP_DUTY_CODE <> d.STAMP_DUTY_CODE)) Then 'STAMP_DUTY_CODE = ' + Case When d.STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STAMP_DUTY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_NO Is Null And d.RANGE_NO Is Not Null) Or (i.RANGE_NO Is Not Null And d.RANGE_NO Is Null) Or (i.RANGE_NO Is Not Null And d.RANGE_NO Is Not Null And i.RANGE_NO <> d.RANGE_NO)) Then 'RANGE_NO = ' + Case When d.RANGE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RANGE_NO) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_START Is Null And d.RANGE_START Is Not Null) Or (i.RANGE_START Is Not Null And d.RANGE_START Is Null) Or (i.RANGE_START Is Not Null And d.RANGE_START Is Not Null And i.RANGE_START <> d.RANGE_START)) Then 'RANGE_START = ' + Case When d.RANGE_START Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RANGE_START) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_END Is Null And d.RANGE_END Is Not Null) Or (i.RANGE_END Is Not Null And d.RANGE_END Is Null) Or (i.RANGE_END Is Not Null And d.RANGE_END Is Not Null And i.RANGE_END <> d.RANGE_END)) Then 'RANGE_END = ' + Case When d.RANGE_END Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.RANGE_END) + '''' End + ', ' Else '' End +  Case When ((i.FORMULA_FACTOR_A Is Null And d.FORMULA_FACTOR_A Is Not Null) Or (i.FORMULA_FACTOR_A Is Not Null And d.FORMULA_FACTOR_A Is Null) Or (i.FORMULA_FACTOR_A Is Not Null And d.FORMULA_FACTOR_A Is Not Null And i.FORMULA_FACTOR_A <> d.FORMULA_FACTOR_A)) Then 'FORMULA_FACTOR_A = ' + Case When d.FORMULA_FACTOR_A Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FORMULA_FACTOR_A) + '''' End + ', ' Else '' End +  Case When ((i.FORMULA_FACTOR_B Is Null And d.FORMULA_FACTOR_B Is Not Null) Or (i.FORMULA_FACTOR_B Is Not Null And d.FORMULA_FACTOR_B Is Null) Or (i.FORMULA_FACTOR_B Is Not Null And d.FORMULA_FACTOR_B Is Not Null And i.FORMULA_FACTOR_B <> d.FORMULA_FACTOR_B)) Then 'FORMULA_FACTOR_B = ' + Case When d.FORMULA_FACTOR_B Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FORMULA_FACTOR_B) + '''' End + ', ' Else '' End +  Case When ((i.FORMULA_FACTOR_C Is Null And d.FORMULA_FACTOR_C Is Not Null) Or (i.FORMULA_FACTOR_C Is Not Null And d.FORMULA_FACTOR_C Is Null) Or (i.FORMULA_FACTOR_C Is Not Null And d.FORMULA_FACTOR_C Is Not Null And i.FORMULA_FACTOR_C <> d.FORMULA_FACTOR_C)) Then 'FORMULA_FACTOR_C = ' + Case When d.FORMULA_FACTOR_C Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FORMULA_FACTOR_C) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.STAMP_DUTY_CODE Is Null And d.STAMP_DUTY_CODE Is Not Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Null) Or (i.STAMP_DUTY_CODE Is Not Null And d.STAMP_DUTY_CODE Is Not Null And i.STAMP_DUTY_CODE <> d.STAMP_DUTY_CODE)) Then 'STAMP_DUTY_CODE = ' + Case When i.STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STAMP_DUTY_CODE) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_NO Is Null And d.RANGE_NO Is Not Null) Or (i.RANGE_NO Is Not Null And d.RANGE_NO Is Null) Or (i.RANGE_NO Is Not Null And d.RANGE_NO Is Not Null And i.RANGE_NO <> d.RANGE_NO)) Then 'RANGE_NO = ' + Case When i.RANGE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RANGE_NO) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_START Is Null And d.RANGE_START Is Not Null) Or (i.RANGE_START Is Not Null And d.RANGE_START Is Null) Or (i.RANGE_START Is Not Null And d.RANGE_START Is Not Null And i.RANGE_START <> d.RANGE_START)) Then 'RANGE_START = ' + Case When i.RANGE_START Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RANGE_START) + '''' End + ', ' Else '' End +  Case When ((i.RANGE_END Is Null And d.RANGE_END Is Not Null) Or (i.RANGE_END Is Not Null And d.RANGE_END Is Null) Or (i.RANGE_END Is Not Null And d.RANGE_END Is Not Null And i.RANGE_END <> d.RANGE_END)) Then 'RANGE_END = ' + Case When i.RANGE_END Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.RANGE_END) + '''' End + ', ' Else '' End +  Case When ((i.FORMULA_FACTOR_A Is Null And d.FORMULA_FACTOR_A Is Not Null) Or (i.FORMULA_FACTOR_A Is Not Null And d.FORMULA_FACTOR_A Is Null) Or (i.FORMULA_FACTOR_A Is Not Null And d.FORMULA_FACTOR_A Is Not Null And i.FORMULA_FACTOR_A <> d.FORMULA_FACTOR_A)) Then 'FORMULA_FACTOR_A = ' + Case When i.FORMULA_FACTOR_A Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FORMULA_FACTOR_A) + '''' End + ', ' Else '' End +  Case When ((i.FORMULA_FACTOR_B Is Null And d.FORMULA_FACTOR_B Is Not Null) Or (i.FORMULA_FACTOR_B Is Not Null And d.FORMULA_FACTOR_B Is Null) Or (i.FORMULA_FACTOR_B Is Not Null And d.FORMULA_FACTOR_B Is Not Null And i.FORMULA_FACTOR_B <> d.FORMULA_FACTOR_B)) Then 'FORMULA_FACTOR_B = ' + Case When i.FORMULA_FACTOR_B Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FORMULA_FACTOR_B) + '''' End + ', ' Else '' End +  Case When ((i.FORMULA_FACTOR_C Is Null And d.FORMULA_FACTOR_C Is Not Null) Or (i.FORMULA_FACTOR_C Is Not Null And d.FORMULA_FACTOR_C Is Null) Or (i.FORMULA_FACTOR_C Is Not Null And d.FORMULA_FACTOR_C Is Not Null And i.FORMULA_FACTOR_C <> d.FORMULA_FACTOR_C)) Then 'FORMULA_FACTOR_C = ' + Case When i.FORMULA_FACTOR_C Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FORMULA_FACTOR_C) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), i.STAMP_DUTY_CODE) + ''', RANGE_NO = ''' + Convert(NVarChar(4000), i.RANGE_NO) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.STAMP_DUTY_CODE = d.STAMP_DUTY_CODE And i.RANGE_NO = d.RANGE_NO
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('STAMP_DUTY_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''' End + ', RANGE_NO = ' + Case When RANGE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_NO) + '''' End + ', RANGE_START = ' + Case When RANGE_START Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_START) + '''' End + ', RANGE_END = ' + Case When RANGE_END Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_END) + '''' End + ', FORMULA_FACTOR_A = ' + Case When FORMULA_FACTOR_A Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_A) + '''' End + ', FORMULA_FACTOR_B = ' + Case When FORMULA_FACTOR_B Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_B) + '''' End + ', FORMULA_FACTOR_C = ' + Case When FORMULA_FACTOR_C Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_C) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + ''', RANGE_NO = ''' + Convert(NVarChar(4000), RANGE_NO) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.STAMP_DUTY_CODE = d.STAMP_DUTY_CODE And i.RANGE_NO = d.RANGE_NO
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('STAMP_DUTY_RANGE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('STAMP_DUTY_CODE = ' + Case When STAMP_DUTY_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + '''' End + ', RANGE_NO = ' + Case When RANGE_NO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_NO) + '''' End + ', RANGE_START = ' + Case When RANGE_START Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_START) + '''' End + ', RANGE_END = ' + Case When RANGE_END Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), RANGE_END) + '''' End + ', FORMULA_FACTOR_A = ' + Case When FORMULA_FACTOR_A Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_A) + '''' End + ', FORMULA_FACTOR_B = ' + Case When FORMULA_FACTOR_B Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_B) + '''' End + ', FORMULA_FACTOR_C = ' + Case When FORMULA_FACTOR_C Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FORMULA_FACTOR_C) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('STAMP_DUTY_CODE = ''' + Convert(NVarChar(4000), STAMP_DUTY_CODE) + ''', RANGE_NO = ''' + Convert(NVarChar(4000), RANGE_NO) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.STAMP_DUTY_CODE = d.STAMP_DUTY_CODE And i.RANGE_NO = d.RANGE_NO)  End
GO

ALTER TABLE [dbo].[STAMP_DUTY_RANGE] ENABLE TRIGGER [TG_AUD_STAMP_DUTY_RANGE_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_STREET_OnDeleted]
On [dbo].[STREET]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('STREET', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_CODE) + '''' End + ', STR_NAME = ' + Case When STR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', STR_CODE = ''' + Convert(NVarChar(4000), STR_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[STREET] ENABLE TRIGGER [TG_AUD_STREET_OnDeleted]
GO


CREATE Trigger [dbo].[TG_AUD_STREET_OnInserted]
On [dbo].[STREET]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('STREET', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STR_CODE) + '''' End + ', STR_NAME = ' + Case When STR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),STR_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', STR_CODE = ''' + Convert(NVarChar(4000), STR_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[STREET] ENABLE TRIGGER [TG_AUD_STREET_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_STREET_OnUpdated]
On [dbo].[STREET]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('STREET', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.STR_CODE Is Null And d.STR_CODE Is Not Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Not Null And i.STR_CODE <> d.STR_CODE)) Then 'STR_CODE = ' + Case When d.STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STR_CODE) + '''' End + ', ' Else '' End +  Case When ((i.STR_NAME Is Null And d.STR_NAME Is Not Null) Or (i.STR_NAME Is Not Null And d.STR_NAME Is Null) Or (i.STR_NAME Is Not Null And d.STR_NAME Is Not Null And i.STR_NAME <> d.STR_NAME)) Then 'STR_NAME = ' + Case When d.STR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.STR_NAME) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.STR_CODE Is Null And d.STR_CODE Is Not Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Null) Or (i.STR_CODE Is Not Null And d.STR_CODE Is Not Null And i.STR_CODE <> d.STR_CODE)) Then 'STR_CODE = ' + Case When i.STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STR_CODE) + '''' End + ', ' Else '' End +  Case When ((i.STR_NAME Is Null And d.STR_NAME Is Not Null) Or (i.STR_NAME Is Not Null And d.STR_NAME Is Null) Or (i.STR_NAME Is Not Null And d.STR_NAME Is Not Null And i.STR_NAME <> d.STR_NAME)) Then 'STR_NAME = ' + Case When i.STR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.STR_NAME) + '''' End + ', ' Else '' End)  ChangedValue, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), i.PROJECT_ID) + ''', STR_CODE = ''' + Convert(NVarChar(4000), i.STR_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.STR_CODE = d.STR_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('STREET', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_CODE) + '''' End + ', STR_NAME = ' + Case When STR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_NAME) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', STR_CODE = ''' + Convert(NVarChar(4000), STR_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.PROJECT_ID = d.PROJECT_ID And i.STR_CODE = d.STR_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('STREET', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', STR_CODE = ' + Case When STR_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_CODE) + '''' End + ', STR_NAME = ' + Case When STR_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), STR_NAME) + '''' End + '', 4000), @PROJECT_ID, Left('PROJECT_ID = ''' + Convert(NVarChar(4000), PROJECT_ID) + ''', STR_CODE = ''' + Convert(NVarChar(4000), STR_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.PROJECT_ID = d.PROJECT_ID And i.STR_CODE = d.STR_CODE)  End
GO

ALTER TABLE [dbo].[STREET] ENABLE TRIGGER [TG_AUD_STREET_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_OnDeleted]
On [dbo].[SURVEY]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SURVEY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', SURVEY_NAME = ' + Case When SURVEY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_NAME) + '''' End + ', SURVEY_STATUS = ' + Case When SURVEY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_STATUS) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_ID = ''' + Convert(NVarChar(4000), SURVEY_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SURVEY] ENABLE TRIGGER [TG_AUD_SURVEY_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_OnInserted]
On [dbo].[SURVEY]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SURVEY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PROJECT_ID) + '''' End + ', SURVEY_NAME = ' + Case When SURVEY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_NAME) + '''' End + ', SURVEY_STATUS = ' + Case When SURVEY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_STATUS) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_ID = ''' + Convert(NVarChar(4000), SURVEY_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SURVEY] ENABLE TRIGGER [TG_AUD_SURVEY_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_OnUpdated]
On [dbo].[SURVEY]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SURVEY_ID Is Null And d.SURVEY_ID Is Not Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Not Null And i.SURVEY_ID <> d.SURVEY_ID)) Then 'SURVEY_ID = ' + Case When d.SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When d.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_NAME Is Null And d.SURVEY_NAME Is Not Null) Or (i.SURVEY_NAME Is Not Null And d.SURVEY_NAME Is Null) Or (i.SURVEY_NAME Is Not Null And d.SURVEY_NAME Is Not Null And i.SURVEY_NAME <> d.SURVEY_NAME)) Then 'SURVEY_NAME = ' + Case When d.SURVEY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_NAME) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_STATUS Is Null And d.SURVEY_STATUS Is Not Null) Or (i.SURVEY_STATUS Is Not Null And d.SURVEY_STATUS Is Null) Or (i.SURVEY_STATUS Is Not Null And d.SURVEY_STATUS Is Not Null And i.SURVEY_STATUS <> d.SURVEY_STATUS)) Then 'SURVEY_STATUS = ' + Case When d.SURVEY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SURVEY_ID Is Null And d.SURVEY_ID Is Not Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Not Null And i.SURVEY_ID <> d.SURVEY_ID)) Then 'SURVEY_ID = ' + Case When i.SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_ID) + '''' End + ', ' Else '' End +  Case When ((i.PROJECT_ID Is Null And d.PROJECT_ID Is Not Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Null) Or (i.PROJECT_ID Is Not Null And d.PROJECT_ID Is Not Null And i.PROJECT_ID <> d.PROJECT_ID)) Then 'PROJECT_ID = ' + Case When i.PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PROJECT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_NAME Is Null And d.SURVEY_NAME Is Not Null) Or (i.SURVEY_NAME Is Not Null And d.SURVEY_NAME Is Null) Or (i.SURVEY_NAME Is Not Null And d.SURVEY_NAME Is Not Null And i.SURVEY_NAME <> d.SURVEY_NAME)) Then 'SURVEY_NAME = ' + Case When i.SURVEY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_NAME) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_STATUS Is Null And d.SURVEY_STATUS Is Not Null) Or (i.SURVEY_STATUS Is Not Null And d.SURVEY_STATUS Is Null) Or (i.SURVEY_STATUS Is Not Null And d.SURVEY_STATUS Is Not Null And i.SURVEY_STATUS <> d.SURVEY_STATUS)) Then 'SURVEY_STATUS = ' + Case When i.SURVEY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_STATUS) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('SURVEY_ID = ''' + Convert(NVarChar(4000), i.SURVEY_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.SURVEY_ID = d.SURVEY_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SURVEY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', SURVEY_NAME = ' + Case When SURVEY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_NAME) + '''' End + ', SURVEY_STATUS = ' + Case When SURVEY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_STATUS) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_ID = ''' + Convert(NVarChar(4000), SURVEY_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.SURVEY_ID = d.SURVEY_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', PROJECT_ID = ' + Case When PROJECT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PROJECT_ID) + '''' End + ', SURVEY_NAME = ' + Case When SURVEY_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_NAME) + '''' End + ', SURVEY_STATUS = ' + Case When SURVEY_STATUS Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_STATUS) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_ID = ''' + Convert(NVarChar(4000), SURVEY_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.SURVEY_ID = d.SURVEY_ID)  End
GO

ALTER TABLE [dbo].[SURVEY] ENABLE TRIGGER [TG_AUD_SURVEY_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_DETAIL_OnDeleted]
On [dbo].[SURVEY_DETAIL]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SURVEY_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', SURVEY_DETAIL_SEQ = ' + Case When SURVEY_DETAIL_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_SEQ) + '''' End + ', QUESTION = ' + Case When QUESTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QUESTION) + '''' End + ', QUESTION_TYPE = ' + Case When QUESTION_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QUESTION_TYPE) + '''' End + ', IS_MANDATORY = ' + Case When IS_MANDATORY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), IS_MANDATORY) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SURVEY_DETAIL] ENABLE TRIGGER [TG_AUD_SURVEY_DETAIL_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_DETAIL_OnInserted]
On [dbo].[SURVEY_DETAIL]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SURVEY_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_DETAIL_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_ID) + '''' End + ', SURVEY_DETAIL_SEQ = ' + Case When SURVEY_DETAIL_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_DETAIL_SEQ) + '''' End + ', QUESTION = ' + Case When QUESTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),QUESTION) + '''' End + ', QUESTION_TYPE = ' + Case When QUESTION_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),QUESTION_TYPE) + '''' End + ', IS_MANDATORY = ' + Case When IS_MANDATORY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),IS_MANDATORY) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SURVEY_DETAIL] ENABLE TRIGGER [TG_AUD_SURVEY_DETAIL_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_DETAIL_OnUpdated]
On [dbo].[SURVEY_DETAIL]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SURVEY_DETAIL_ID Is Null And d.SURVEY_DETAIL_ID Is Not Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Not Null And i.SURVEY_DETAIL_ID <> d.SURVEY_DETAIL_ID)) Then 'SURVEY_DETAIL_ID = ' + Case When d.SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_ID Is Null And d.SURVEY_ID Is Not Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Not Null And i.SURVEY_ID <> d.SURVEY_ID)) Then 'SURVEY_ID = ' + Case When d.SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_SEQ Is Null And d.SURVEY_DETAIL_SEQ Is Not Null) Or (i.SURVEY_DETAIL_SEQ Is Not Null And d.SURVEY_DETAIL_SEQ Is Null) Or (i.SURVEY_DETAIL_SEQ Is Not Null And d.SURVEY_DETAIL_SEQ Is Not Null And i.SURVEY_DETAIL_SEQ <> d.SURVEY_DETAIL_SEQ)) Then 'SURVEY_DETAIL_SEQ = ' + Case When d.SURVEY_DETAIL_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_DETAIL_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.QUESTION Is Null And d.QUESTION Is Not Null) Or (i.QUESTION Is Not Null And d.QUESTION Is Null) Or (i.QUESTION Is Not Null And d.QUESTION Is Not Null And i.QUESTION <> d.QUESTION)) Then 'QUESTION = ' + Case When d.QUESTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.QUESTION) + '''' End + ', ' Else '' End +  Case When ((i.QUESTION_TYPE Is Null And d.QUESTION_TYPE Is Not Null) Or (i.QUESTION_TYPE Is Not Null And d.QUESTION_TYPE Is Null) Or (i.QUESTION_TYPE Is Not Null And d.QUESTION_TYPE Is Not Null And i.QUESTION_TYPE <> d.QUESTION_TYPE)) Then 'QUESTION_TYPE = ' + Case When d.QUESTION_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.QUESTION_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.IS_MANDATORY Is Null And d.IS_MANDATORY Is Not Null) Or (i.IS_MANDATORY Is Not Null And d.IS_MANDATORY Is Null) Or (i.IS_MANDATORY Is Not Null And d.IS_MANDATORY Is Not Null And i.IS_MANDATORY <> d.IS_MANDATORY)) Then 'IS_MANDATORY = ' + Case When d.IS_MANDATORY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.IS_MANDATORY) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SURVEY_DETAIL_ID Is Null And d.SURVEY_DETAIL_ID Is Not Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Not Null And i.SURVEY_DETAIL_ID <> d.SURVEY_DETAIL_ID)) Then 'SURVEY_DETAIL_ID = ' + Case When i.SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_ID Is Null And d.SURVEY_ID Is Not Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Not Null And i.SURVEY_ID <> d.SURVEY_ID)) Then 'SURVEY_ID = ' + Case When i.SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_SEQ Is Null And d.SURVEY_DETAIL_SEQ Is Not Null) Or (i.SURVEY_DETAIL_SEQ Is Not Null And d.SURVEY_DETAIL_SEQ Is Null) Or (i.SURVEY_DETAIL_SEQ Is Not Null And d.SURVEY_DETAIL_SEQ Is Not Null And i.SURVEY_DETAIL_SEQ <> d.SURVEY_DETAIL_SEQ)) Then 'SURVEY_DETAIL_SEQ = ' + Case When i.SURVEY_DETAIL_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_SEQ) + '''' End + ', ' Else '' End +  Case When ((i.QUESTION Is Null And d.QUESTION Is Not Null) Or (i.QUESTION Is Not Null And d.QUESTION Is Null) Or (i.QUESTION Is Not Null And d.QUESTION Is Not Null And i.QUESTION <> d.QUESTION)) Then 'QUESTION = ' + Case When i.QUESTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.QUESTION) + '''' End + ', ' Else '' End +  Case When ((i.QUESTION_TYPE Is Null And d.QUESTION_TYPE Is Not Null) Or (i.QUESTION_TYPE Is Not Null And d.QUESTION_TYPE Is Null) Or (i.QUESTION_TYPE Is Not Null And d.QUESTION_TYPE Is Not Null And i.QUESTION_TYPE <> d.QUESTION_TYPE)) Then 'QUESTION_TYPE = ' + Case When i.QUESTION_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.QUESTION_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.IS_MANDATORY Is Null And d.IS_MANDATORY Is Not Null) Or (i.IS_MANDATORY Is Not Null And d.IS_MANDATORY Is Null) Or (i.IS_MANDATORY Is Not Null And d.IS_MANDATORY Is Not Null And i.IS_MANDATORY <> d.IS_MANDATORY)) Then 'IS_MANDATORY = ' + Case When i.IS_MANDATORY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.IS_MANDATORY) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('SURVEY_DETAIL_ID = ''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.SURVEY_DETAIL_ID = d.SURVEY_DETAIL_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SURVEY_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', SURVEY_DETAIL_SEQ = ' + Case When SURVEY_DETAIL_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_SEQ) + '''' End + ', QUESTION = ' + Case When QUESTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QUESTION) + '''' End + ', QUESTION_TYPE = ' + Case When QUESTION_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QUESTION_TYPE) + '''' End + ', IS_MANDATORY = ' + Case When IS_MANDATORY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), IS_MANDATORY) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.SURVEY_DETAIL_ID = d.SURVEY_DETAIL_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', SURVEY_DETAIL_SEQ = ' + Case When SURVEY_DETAIL_SEQ Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_SEQ) + '''' End + ', QUESTION = ' + Case When QUESTION Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QUESTION) + '''' End + ', QUESTION_TYPE = ' + Case When QUESTION_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), QUESTION_TYPE) + '''' End + ', IS_MANDATORY = ' + Case When IS_MANDATORY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), IS_MANDATORY) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.SURVEY_DETAIL_ID = d.SURVEY_DETAIL_ID)  End
GO

ALTER TABLE [dbo].[SURVEY_DETAIL] ENABLE TRIGGER [TG_AUD_SURVEY_DETAIL_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_SURVEY_DETAIL_OPTION_OnDeleted]
On [dbo].[SURVEY_DETAIL_OPTION]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SURVEY_DETAIL_OPTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', OPTION_VALUE = ' + Case When OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_OPTION_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SURVEY_DETAIL_OPTION] ENABLE TRIGGER [TG_AUD_SURVEY_DETAIL_OPTION_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_DETAIL_OPTION_OnInserted]
On [dbo].[SURVEY_DETAIL_OPTION]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SURVEY_DETAIL_OPTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_DETAIL_OPTION_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_DETAIL_ID) + '''' End + ', OPTION_VALUE = ' + Case When OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_OPTION_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SURVEY_DETAIL_OPTION] ENABLE TRIGGER [TG_AUD_SURVEY_DETAIL_OPTION_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_DETAIL_OPTION_OnUpdated]
On [dbo].[SURVEY_DETAIL_OPTION]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_DETAIL_OPTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SURVEY_DETAIL_OPTION_ID Is Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null And i.SURVEY_DETAIL_OPTION_ID <> d.SURVEY_DETAIL_OPTION_ID)) Then 'SURVEY_DETAIL_OPTION_ID = ' + Case When d.SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_DETAIL_OPTION_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_ID Is Null And d.SURVEY_DETAIL_ID Is Not Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Not Null And i.SURVEY_DETAIL_ID <> d.SURVEY_DETAIL_ID)) Then 'SURVEY_DETAIL_ID = ' + Case When d.SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.OPTION_VALUE Is Null And d.OPTION_VALUE Is Not Null) Or (i.OPTION_VALUE Is Not Null And d.OPTION_VALUE Is Null) Or (i.OPTION_VALUE Is Not Null And d.OPTION_VALUE Is Not Null And i.OPTION_VALUE <> d.OPTION_VALUE)) Then 'OPTION_VALUE = ' + Case When d.OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.OPTION_VALUE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SURVEY_DETAIL_OPTION_ID Is Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null And i.SURVEY_DETAIL_OPTION_ID <> d.SURVEY_DETAIL_OPTION_ID)) Then 'SURVEY_DETAIL_OPTION_ID = ' + Case When i.SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_OPTION_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_ID Is Null And d.SURVEY_DETAIL_ID Is Not Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Not Null And i.SURVEY_DETAIL_ID <> d.SURVEY_DETAIL_ID)) Then 'SURVEY_DETAIL_ID = ' + Case When i.SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.OPTION_VALUE Is Null And d.OPTION_VALUE Is Not Null) Or (i.OPTION_VALUE Is Not Null And d.OPTION_VALUE Is Null) Or (i.OPTION_VALUE Is Not Null And d.OPTION_VALUE Is Not Null And i.OPTION_VALUE <> d.OPTION_VALUE)) Then 'OPTION_VALUE = ' + Case When i.OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.OPTION_VALUE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('SURVEY_DETAIL_OPTION_ID = ''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_OPTION_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.SURVEY_DETAIL_OPTION_ID = d.SURVEY_DETAIL_OPTION_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SURVEY_DETAIL_OPTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', OPTION_VALUE = ' + Case When OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_OPTION_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.SURVEY_DETAIL_OPTION_ID = d.SURVEY_DETAIL_OPTION_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_DETAIL_OPTION', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', OPTION_VALUE = ' + Case When OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_DETAIL_OPTION_ID = ''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.SURVEY_DETAIL_OPTION_ID = d.SURVEY_DETAIL_OPTION_ID)  End
GO

ALTER TABLE [dbo].[SURVEY_DETAIL_OPTION] ENABLE TRIGGER [TG_AUD_SURVEY_DETAIL_OPTION_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_RESULT_OnDeleted]
On [dbo].[SURVEY_RESULT]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SURVEY_RESULT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_RESULT_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SURVEY_RESULT] ENABLE TRIGGER [TG_AUD_SURVEY_RESULT_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_RESULT_OnInserted]
On [dbo].[SURVEY_RESULT]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SURVEY_RESULT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_RESULT_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_RESULT_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SURVEY_RESULT] ENABLE TRIGGER [TG_AUD_SURVEY_RESULT_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_RESULT_OnUpdated]
On [dbo].[SURVEY_RESULT]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_RESULT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SURVEY_RESULT_ID Is Null And d.SURVEY_RESULT_ID Is Not Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Not Null And i.SURVEY_RESULT_ID <> d.SURVEY_RESULT_ID)) Then 'SURVEY_RESULT_ID = ' + Case When d.SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_RESULT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_ID Is Null And d.SURVEY_ID Is Not Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Not Null And i.SURVEY_ID <> d.SURVEY_ID)) Then 'SURVEY_ID = ' + Case When d.SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SURVEY_RESULT_ID Is Null And d.SURVEY_RESULT_ID Is Not Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Not Null And i.SURVEY_RESULT_ID <> d.SURVEY_RESULT_ID)) Then 'SURVEY_RESULT_ID = ' + Case When i.SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_RESULT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_ID Is Null And d.SURVEY_ID Is Not Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Null) Or (i.SURVEY_ID Is Not Null And d.SURVEY_ID Is Not Null And i.SURVEY_ID <> d.SURVEY_ID)) Then 'SURVEY_ID = ' + Case When i.SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_ID) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('SURVEY_RESULT_ID = ''' + Convert(NVarChar(4000), i.SURVEY_RESULT_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.SURVEY_RESULT_ID = d.SURVEY_RESULT_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SURVEY_RESULT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_RESULT_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.SURVEY_RESULT_ID = d.SURVEY_RESULT_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_RESULT', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''' End + ', SURVEY_ID = ' + Case When SURVEY_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_ID) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_RESULT_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.SURVEY_RESULT_ID = d.SURVEY_RESULT_ID)  End
GO

ALTER TABLE [dbo].[SURVEY_RESULT] ENABLE TRIGGER [TG_AUD_SURVEY_RESULT_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_RESULT_DETAIL_OnDeleted]
On [dbo].[SURVEY_RESULT_DETAIL]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SURVEY_RESULT_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('SURVEY_RESULT_DETAIL_ID = ' + Case When SURVEY_RESULT_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_DETAIL_ID) + '''' End + ', SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''' End + ', SELECTED_OPTION_VALUE = ' + Case When SELECTED_OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTED_OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_RESULT_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_DETAIL_ID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SURVEY_RESULT_DETAIL] ENABLE TRIGGER [TG_AUD_SURVEY_RESULT_DETAIL_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_RESULT_DETAIL_OnInserted]
On [dbo].[SURVEY_RESULT_DETAIL]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SURVEY_RESULT_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('SURVEY_RESULT_DETAIL_ID = ' + Case When SURVEY_RESULT_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_RESULT_DETAIL_ID) + '''' End + ', SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_RESULT_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_DETAIL_ID) + '''' End + ', SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SURVEY_DETAIL_OPTION_ID) + '''' End + ', SELECTED_OPTION_VALUE = ' + Case When SELECTED_OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SELECTED_OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),CR_DT,121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UP_DT,121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_RESULT_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_DETAIL_ID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SURVEY_RESULT_DETAIL] ENABLE TRIGGER [TG_AUD_SURVEY_RESULT_DETAIL_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_SURVEY_RESULT_DETAIL_OnUpdated]
On [dbo].[SURVEY_RESULT_DETAIL]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_RESULT_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.SURVEY_RESULT_DETAIL_ID Is Null And d.SURVEY_RESULT_DETAIL_ID Is Not Null) Or (i.SURVEY_RESULT_DETAIL_ID Is Not Null And d.SURVEY_RESULT_DETAIL_ID Is Null) Or (i.SURVEY_RESULT_DETAIL_ID Is Not Null And d.SURVEY_RESULT_DETAIL_ID Is Not Null And i.SURVEY_RESULT_DETAIL_ID <> d.SURVEY_RESULT_DETAIL_ID)) Then 'SURVEY_RESULT_DETAIL_ID = ' + Case When d.SURVEY_RESULT_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_RESULT_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_RESULT_ID Is Null And d.SURVEY_RESULT_ID Is Not Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Not Null And i.SURVEY_RESULT_ID <> d.SURVEY_RESULT_ID)) Then 'SURVEY_RESULT_ID = ' + Case When d.SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_RESULT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_ID Is Null And d.SURVEY_DETAIL_ID Is Not Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Not Null And i.SURVEY_DETAIL_ID <> d.SURVEY_DETAIL_ID)) Then 'SURVEY_DETAIL_ID = ' + Case When d.SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_OPTION_ID Is Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null And i.SURVEY_DETAIL_OPTION_ID <> d.SURVEY_DETAIL_OPTION_ID)) Then 'SURVEY_DETAIL_OPTION_ID = ' + Case When d.SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SURVEY_DETAIL_OPTION_ID) + '''' End + ', ' Else '' End +  Case When ((i.SELECTED_OPTION_VALUE Is Null And d.SELECTED_OPTION_VALUE Is Not Null) Or (i.SELECTED_OPTION_VALUE Is Not Null And d.SELECTED_OPTION_VALUE Is Null) Or (i.SELECTED_OPTION_VALUE Is Not Null And d.SELECTED_OPTION_VALUE Is Not Null And i.SELECTED_OPTION_VALUE <> d.SELECTED_OPTION_VALUE)) Then 'SELECTED_OPTION_VALUE = ' + Case When d.SELECTED_OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SELECTED_OPTION_VALUE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When d.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When d.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When d.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When d.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When d.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When d.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UP_DT, 121) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.SURVEY_RESULT_DETAIL_ID Is Null And d.SURVEY_RESULT_DETAIL_ID Is Not Null) Or (i.SURVEY_RESULT_DETAIL_ID Is Not Null And d.SURVEY_RESULT_DETAIL_ID Is Null) Or (i.SURVEY_RESULT_DETAIL_ID Is Not Null And d.SURVEY_RESULT_DETAIL_ID Is Not Null And i.SURVEY_RESULT_DETAIL_ID <> d.SURVEY_RESULT_DETAIL_ID)) Then 'SURVEY_RESULT_DETAIL_ID = ' + Case When i.SURVEY_RESULT_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_RESULT_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_RESULT_ID Is Null And d.SURVEY_RESULT_ID Is Not Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Null) Or (i.SURVEY_RESULT_ID Is Not Null And d.SURVEY_RESULT_ID Is Not Null And i.SURVEY_RESULT_ID <> d.SURVEY_RESULT_ID)) Then 'SURVEY_RESULT_ID = ' + Case When i.SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_RESULT_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_ID Is Null And d.SURVEY_DETAIL_ID Is Not Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Null) Or (i.SURVEY_DETAIL_ID Is Not Null And d.SURVEY_DETAIL_ID Is Not Null And i.SURVEY_DETAIL_ID <> d.SURVEY_DETAIL_ID)) Then 'SURVEY_DETAIL_ID = ' + Case When i.SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_ID) + '''' End + ', ' Else '' End +  Case When ((i.SURVEY_DETAIL_OPTION_ID Is Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Null) Or (i.SURVEY_DETAIL_OPTION_ID Is Not Null And d.SURVEY_DETAIL_OPTION_ID Is Not Null And i.SURVEY_DETAIL_OPTION_ID <> d.SURVEY_DETAIL_OPTION_ID)) Then 'SURVEY_DETAIL_OPTION_ID = ' + Case When i.SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SURVEY_DETAIL_OPTION_ID) + '''' End + ', ' Else '' End +  Case When ((i.SELECTED_OPTION_VALUE Is Null And d.SELECTED_OPTION_VALUE Is Not Null) Or (i.SELECTED_OPTION_VALUE Is Not Null And d.SELECTED_OPTION_VALUE Is Null) Or (i.SELECTED_OPTION_VALUE Is Not Null And d.SELECTED_OPTION_VALUE Is Not Null And i.SELECTED_OPTION_VALUE <> d.SELECTED_OPTION_VALUE)) Then 'SELECTED_OPTION_VALUE = ' + Case When i.SELECTED_OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SELECTED_OPTION_VALUE) + '''' End + ', ' Else '' End +  Case When ((i.CR_UID Is Null And d.CR_UID Is Not Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Null) Or (i.CR_UID Is Not Null And d.CR_UID Is Not Null And i.CR_UID <> d.CR_UID)) Then 'CR_UID = ' + Case When i.CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_UID) + '''' End + ', ' Else '' End +  Case When ((i.CR_FID Is Null And d.CR_FID Is Not Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Null) Or (i.CR_FID Is Not Null And d.CR_FID Is Not Null And i.CR_FID <> d.CR_FID)) Then 'CR_FID = ' + Case When i.CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_FID) + '''' End + ', ' Else '' End +  Case When ((i.CR_DT Is Null And d.CR_DT Is Not Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Null) Or (i.CR_DT Is Not Null And d.CR_DT Is Not Null And i.CR_DT <> d.CR_DT)) Then 'CR_DT = ' + Case When i.CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.CR_DT, 121) + '''' End + ', ' Else '' End +  Case When ((i.UP_UID Is Null And d.UP_UID Is Not Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Null) Or (i.UP_UID Is Not Null And d.UP_UID Is Not Null And i.UP_UID <> d.UP_UID)) Then 'UP_UID = ' + Case When i.UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_UID) + '''' End + ', ' Else '' End +  Case When ((i.UP_FID Is Null And d.UP_FID Is Not Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Null) Or (i.UP_FID Is Not Null And d.UP_FID Is Not Null And i.UP_FID <> d.UP_FID)) Then 'UP_FID = ' + Case When i.UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_FID) + '''' End + ', ' Else '' End +  Case When ((i.UP_DT Is Null And d.UP_DT Is Not Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Null) Or (i.UP_DT Is Not Null And d.UP_DT Is Not Null And i.UP_DT <> d.UP_DT)) Then 'UP_DT = ' + Case When i.UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UP_DT, 121) + '''' End + ', ' Else '' End)  ChangedValue, Left('SURVEY_RESULT_DETAIL_ID = ''' + Convert(NVarChar(4000), i.SURVEY_RESULT_DETAIL_ID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.SURVEY_RESULT_DETAIL_ID = d.SURVEY_RESULT_DETAIL_ID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SURVEY_RESULT_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('SURVEY_RESULT_DETAIL_ID = ' + Case When SURVEY_RESULT_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_DETAIL_ID) + '''' End + ', SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''' End + ', SELECTED_OPTION_VALUE = ' + Case When SELECTED_OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTED_OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('SURVEY_RESULT_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_DETAIL_ID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.SURVEY_RESULT_DETAIL_ID = d.SURVEY_RESULT_DETAIL_ID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SURVEY_RESULT_DETAIL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('SURVEY_RESULT_DETAIL_ID = ' + Case When SURVEY_RESULT_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_DETAIL_ID) + '''' End + ', SURVEY_RESULT_ID = ' + Case When SURVEY_RESULT_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_RESULT_ID) + '''' End + ', SURVEY_DETAIL_ID = ' + Case When SURVEY_DETAIL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_ID) + '''' End + ', SURVEY_DETAIL_OPTION_ID = ' + Case When SURVEY_DETAIL_OPTION_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SURVEY_DETAIL_OPTION_ID) + '''' End + ', SELECTED_OPTION_VALUE = ' + Case When SELECTED_OPTION_VALUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECTED_OPTION_VALUE) + '''' End + ', CR_UID = ' + Case When CR_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_UID) + '''' End + ', CR_FID = ' + Case When CR_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_FID) + '''' End + ', CR_DT = ' + Case When CR_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), CR_DT, 121) + '''' End + ', UP_UID = ' + Case When UP_UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_UID) + '''' End + ', UP_FID = ' + Case When UP_FID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_FID) + '''' End + ', UP_DT = ' + Case When UP_DT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UP_DT, 121) + '''' End + '', 4000), @PROJECT_ID, Left('SURVEY_RESULT_DETAIL_ID = ''' + Convert(NVarChar(4000), SURVEY_RESULT_DETAIL_ID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.SURVEY_RESULT_DETAIL_ID = d.SURVEY_RESULT_DETAIL_ID)  End
GO

ALTER TABLE [dbo].[SURVEY_RESULT_DETAIL] ENABLE TRIGGER [TG_AUD_SURVEY_RESULT_DETAIL_OnUpdated]
GO


CREATE Trigger [dbo].[TG_AUD_SYSTEM_SETUP_OnDeleted]
On [dbo].[SYSTEM_SETUP]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SYSTEM_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY1) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_FR, 121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_TO, 121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_TO) + '''' End + ', PARA_BYTE = ' + Case When PARA_BYTE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_BYTE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SYSTEM_SETUP] ENABLE TRIGGER [TG_AUD_SYSTEM_SETUP_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SYSTEM_SETUP_OnInserted]
On [dbo].[SYSTEM_SETUP]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SYSTEM_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_KEY1) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DATE_FR,121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DATE_TO,121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),VAL_TO) + '''' End + ', PARA_BYTE = ' + Case When PARA_BYTE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_BYTE) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SYSTEM_SETUP] ENABLE TRIGGER [TG_AUD_SYSTEM_SETUP_OnInserted]
GO

CREATE Trigger [dbo].[TG_AUD_SYSTEM_SETUP_OnUpdated]
On [dbo].[SYSTEM_SETUP]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SYSTEM_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY1) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_FR, 121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_TO, 121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_TO) + '''' End + ', PARA_BYTE = ' + Case When PARA_BYTE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_BYTE) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
			From Deleted
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SYSTEM_SETUP', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY1) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_FR, 121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_TO, 121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_TO) + '''' End + ', PARA_BYTE = ' + Case When PARA_BYTE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_BYTE) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000)
				From Inserted  End
GO

ALTER TABLE [dbo].[SYSTEM_SETUP] ENABLE TRIGGER [TG_AUD_SYSTEM_SETUP_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_SYSTEM_SETUP_DTL_OnDeleted]
On [dbo].[SYSTEM_SETUP_DTL]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('SYSTEM_SETUP_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY1) + '''' End + ', PARA_KEY2 = ' + Case When PARA_KEY2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY2) + '''' End + ', PARA_KEY3 = ' + Case When PARA_KEY3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY3) + '''' End + ', PARA_KEY4 = ' + Case When PARA_KEY4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY4) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_FR, 121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_TO, 121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_TO) + '''' End + ', NUM_FR = ' + Case When NUM_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NUM_FR) + '''' End + ', NUM_TO = ' + Case When NUM_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NUM_TO) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[SYSTEM_SETUP_DTL] ENABLE TRIGGER [TG_AUD_SYSTEM_SETUP_DTL_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_SYSTEM_SETUP_DTL_OnInserted]
On [dbo].[SYSTEM_SETUP_DTL]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('SYSTEM_SETUP_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_KEY1) + '''' End + ', PARA_KEY2 = ' + Case When PARA_KEY2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_KEY2) + '''' End + ', PARA_KEY3 = ' + Case When PARA_KEY3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_KEY3) + '''' End + ', PARA_KEY4 = ' + Case When PARA_KEY4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PARA_KEY4) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DATE_FR,121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),DATE_TO,121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),VAL_TO) + '''' End + ', NUM_FR = ' + Case When NUM_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),NUM_FR) + '''' End + ', NUM_TO = ' + Case When NUM_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),NUM_TO) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[SYSTEM_SETUP_DTL] ENABLE TRIGGER [TG_AUD_SYSTEM_SETUP_DTL_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_SYSTEM_SETUP_DTL_OnUpdated]
On [dbo].[SYSTEM_SETUP_DTL]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('SYSTEM_SETUP_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY1) + '''' End + ', PARA_KEY2 = ' + Case When PARA_KEY2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY2) + '''' End + ', PARA_KEY3 = ' + Case When PARA_KEY3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY3) + '''' End + ', PARA_KEY4 = ' + Case When PARA_KEY4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY4) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_FR, 121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_TO, 121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_TO) + '''' End + ', NUM_FR = ' + Case When NUM_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NUM_FR) + '''' End + ', NUM_TO = ' + Case When NUM_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NUM_TO) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('', 4000)
			From Deleted
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('SYSTEM_SETUP_DTL', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('FN_ID = ' + Case When FN_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FN_ID) + '''' End + ', PARA_TYPE = ' + Case When PARA_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_TYPE) + '''' End + ', PARA_DESCR = ' + Case When PARA_DESCR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_DESCR) + '''' End + ', PARA_KEY1 = ' + Case When PARA_KEY1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY1) + '''' End + ', PARA_KEY2 = ' + Case When PARA_KEY2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY2) + '''' End + ', PARA_KEY3 = ' + Case When PARA_KEY3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY3) + '''' End + ', PARA_KEY4 = ' + Case When PARA_KEY4 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PARA_KEY4) + '''' End + ', DATE_FR = ' + Case When DATE_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_FR, 121) + '''' End + ', DATE_TO = ' + Case When DATE_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), DATE_TO, 121) + '''' End + ', VAL_FR = ' + Case When VAL_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_FR) + '''' End + ', VAL_TO = ' + Case When VAL_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VAL_TO) + '''' End + ', NUM_FR = ' + Case When NUM_FR Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NUM_FR) + '''' End + ', NUM_TO = ' + Case When NUM_TO Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), NUM_TO) + '''' End + '', 4000), @PROJECT_ID, Left('', 4000)
				From Inserted  End
GO

ALTER TABLE [dbo].[SYSTEM_SETUP_DTL] ENABLE TRIGGER [TG_AUD_SYSTEM_SETUP_DTL_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_UOM_OnDeleted]
On [dbo].[UOM]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('UOM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('UOM_CODE = ' + Case When UOM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UOM_CODE) + '''' End + ', UOM_DESC = ' + Case When UOM_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UOM_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('UOM_CODE = ''' + Convert(NVarChar(4000), UOM_CODE) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[UOM] ENABLE TRIGGER [TG_AUD_UOM_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_UOM_OnInserted]
On [dbo].[UOM]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('UOM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('UOM_CODE = ' + Case When UOM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UOM_CODE) + '''' End + ', UOM_DESC = ' + Case When UOM_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UOM_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('UOM_CODE = ''' + Convert(NVarChar(4000), UOM_CODE) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[UOM] ENABLE TRIGGER [TG_AUD_UOM_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_UOM_OnUpdated]
On [dbo].[UOM]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('UOM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.UOM_CODE Is Null And d.UOM_CODE Is Not Null) Or (i.UOM_CODE Is Not Null And d.UOM_CODE Is Null) Or (i.UOM_CODE Is Not Null And d.UOM_CODE Is Not Null And i.UOM_CODE <> d.UOM_CODE)) Then 'UOM_CODE = ' + Case When d.UOM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UOM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.UOM_DESC Is Null And d.UOM_DESC Is Not Null) Or (i.UOM_DESC Is Not Null And d.UOM_DESC Is Null) Or (i.UOM_DESC Is Not Null And d.UOM_DESC Is Not Null And i.UOM_DESC <> d.UOM_DESC)) Then 'UOM_DESC = ' + Case When d.UOM_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UOM_DESC) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.UOM_CODE Is Null And d.UOM_CODE Is Not Null) Or (i.UOM_CODE Is Not Null And d.UOM_CODE Is Null) Or (i.UOM_CODE Is Not Null And d.UOM_CODE Is Not Null And i.UOM_CODE <> d.UOM_CODE)) Then 'UOM_CODE = ' + Case When i.UOM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UOM_CODE) + '''' End + ', ' Else '' End +  Case When ((i.UOM_DESC Is Null And d.UOM_DESC Is Not Null) Or (i.UOM_DESC Is Not Null And d.UOM_DESC Is Null) Or (i.UOM_DESC Is Not Null And d.UOM_DESC Is Not Null And i.UOM_DESC <> d.UOM_DESC)) Then 'UOM_DESC = ' + Case When i.UOM_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UOM_DESC) + '''' End + ', ' Else '' End)  ChangedValue, Left('UOM_CODE = ''' + Convert(NVarChar(4000), i.UOM_CODE) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.UOM_CODE = d.UOM_CODE
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('UOM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('UOM_CODE = ' + Case When UOM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UOM_CODE) + '''' End + ', UOM_DESC = ' + Case When UOM_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UOM_DESC) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('UOM_CODE = ''' + Convert(NVarChar(4000), UOM_CODE) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.UOM_CODE = d.UOM_CODE
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('UOM', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('UOM_CODE = ' + Case When UOM_CODE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UOM_CODE) + '''' End + ', UOM_DESC = ' + Case When UOM_DESC Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UOM_DESC) + '''' End + '', 4000), @PROJECT_ID, Left('UOM_CODE = ''' + Convert(NVarChar(4000), UOM_CODE) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.UOM_CODE = d.UOM_CODE)  End
GO

ALTER TABLE [dbo].[UOM] ENABLE TRIGGER [TG_AUD_UOM_OnUpdated]
GO

CREATE Trigger [dbo].[TG_AUD_USER_PROFILE_OnDeleted]
On [dbo].[USER_PROFILE]
 
After Delete
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE )
				Select Left('USER_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_ID) + '''' End + ', FIRST_NAME = ' + Case When FIRST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FIRST_NAME) + '''' End + ', LAST_NAME = ' + Case When LAST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LAST_NAME) + '''' End + ', PASSWORD = ' + Case When PASSWORD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PASSWORD) + '''' End + ', ID = ' + Case When ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', ADDR1 = ' + Case When ADDR1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR1) + '''' End + ', ADDR2 = ' + Case When ADDR2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR2) + '''' End + ', ADDR3 = ' + Case When ADDR3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR3) + '''' End + ', TEL = ' + Case When TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEL) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GENDER) + '''' End + ', EXP_DATE = ' + Case When EXP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EXP_DATE, 121) + '''' End + ', TERMINATE = ' + Case When TERMINATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TERMINATE) + '''' End + ', LANG_ID = ' + Case When LANG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LANG_ID) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID_TYPE) + '''' End + ', COMPANY = ' + Case When COMPANY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COMPANY) + '''' End + ', SELECT_RESERVE = ' + Case When SELECT_RESERVE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECT_RESERVE) + '''' End + 'OVERDUE = ' + Case When OVERDUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OVERDUE) + '''' End + ', LESS_DEPOSIT = ' + Case When LESS_DEPOSIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LESS_DEPOSIT) + '''' End + ', REFUND = ' + Case When REFUND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REFUND) + '''' End + ', PAYMENT_SCHEDULE = ' + Case When PAYMENT_SCHEDULE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_SCHEDULE) + '''' End + ', VOID_AM = ' + Case When VOID_AM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VOID_AM) + '''' End + ', MODIFY_CONFIRM_MOA = ' + Case When MODIFY_CONFIRM_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MODIFY_CONFIRM_MOA) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000)
				From Deleted  End
GO

ALTER TABLE [dbo].[USER_PROFILE] ENABLE TRIGGER [TG_AUD_USER_PROFILE_OnDeleted]
GO

CREATE Trigger [dbo].[TG_AUD_USER_PROFILE_OnInserted]
On [dbo].[USER_PROFILE]
 
After Insert
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End
Insert Into AUDIT_LOG (	TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE)Select Left('USER_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I',	Left('', 4000), Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),UID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LEVEL_ID) + '''' End + ', FIRST_NAME = ' + Case When FIRST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),FIRST_NAME) + '''' End + ', LAST_NAME = ' + Case When LAST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LAST_NAME) + '''' End + ', PASSWORD = ' + Case When PASSWORD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PASSWORD) + '''' End + ', ID = ' + Case When ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ID) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),EMAIL) + '''' End + ', ADDR1 = ' + Case When ADDR1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR1) + '''' End + ', ADDR2 = ' + Case When ADDR2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR2) + '''' End + ', ADDR3 = ' + Case When ADDR3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ADDR3) + '''' End + ', TEL = ' + Case When TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TEL) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),GENDER) + '''' End + ', EXP_DATE = ' + Case When EXP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),EXP_DATE,121) + '''' End + ', TERMINATE = ' + Case When TERMINATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),TERMINATE) + '''' End + ', LANG_ID = ' + Case When LANG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LANG_ID) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),ID_TYPE) + '''' End + ', COMPANY = ' + Case When COMPANY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),COMPANY) + '''' End + ', SELECT_RESERVE = ' + Case When SELECT_RESERVE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),SELECT_RESERVE) + '''' End + ', OVERDUE = ' + Case When OVERDUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),OVERDUE) + '''' End + 'LESS_DEPOSIT = ' + Case When LESS_DEPOSIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),LESS_DEPOSIT) + '''' End + ', REFUND = ' + Case When REFUND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),REFUND) + '''' End + ', PAYMENT_SCHEDULE = ' + Case When PAYMENT_SCHEDULE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),PAYMENT_SCHEDULE) + '''' End + ', VOID_AM = ' + Case When VOID_AM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),VOID_AM) + '''' End + ', MODIFY_CONFIRM_MOA = ' + Case When MODIFY_CONFIRM_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000),MODIFY_CONFIRM_MOA) + '''' End + '', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000) From Inserted  End
GO

ALTER TABLE [dbo].[USER_PROFILE] ENABLE TRIGGER [TG_AUD_USER_PROFILE_OnInserted]
GO


CREATE Trigger [dbo].[TG_AUD_USER_PROFILE_OnUpdated]
On [dbo].[USER_PROFILE]
 
After Update
As
Begin
	Declare @FUNCTION_ID VarChar(20), @CR_TIME DateTime, @CR_USER VarChar(10), @PROJECT_ID NVarChar(50)
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @FUNCTION_ID = Convert(VarChar(10), Left([Value], 10))
		From #ConnectionProperties
		Where [Name] = 'FUNCTION_ID'
	End
	Else
	Begin
		Select @FUNCTION_ID = ''
	End
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @CR_USER = Convert(VarChar(16), Left([Value], 16))
		From #ConnectionProperties
		Where [Name] = 'USER_ID'
	End
	Else
	Begin
		Select @CR_USER = ''
	End
	Select @CR_TIME = GetDate()
	If Object_ID(N'[tempdb]..[#ConnectionProperties]') Is Not Null
	Begin
		Select @PROJECT_ID = Convert(NVarChar(50), Left([Value], 50))
		From #ConnectionProperties
		Where [Name] = 'PROJECT_ID'
	End
	Else
	Begin
		Select @PROJECT_ID = ''
	End

				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('USER_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'U',
					Temp.OriginalValue, Temp.ChangedValue, @PROJECT_ID, Temp.KeyValue From (Select dbo.SF_AUDIT_FormatColumn( Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When d.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.UID) + '''' End + ', ' Else '' End +  Case When ((i.LEVEL_ID Is Null And d.LEVEL_ID Is Not Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Not Null And i.LEVEL_ID <> d.LEVEL_ID)) Then 'LEVEL_ID = ' + Case When d.LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LEVEL_ID) + '''' End + ', ' Else '' End +  Case When ((i.FIRST_NAME Is Null And d.FIRST_NAME Is Not Null) Or (i.FIRST_NAME Is Not Null And d.FIRST_NAME Is Null) Or (i.FIRST_NAME Is Not Null And d.FIRST_NAME Is Not Null And i.FIRST_NAME <> d.FIRST_NAME)) Then 'FIRST_NAME = ' + Case When d.FIRST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.FIRST_NAME) + '''' End + ', ' Else '' End +  Case When ((i.LAST_NAME Is Null And d.LAST_NAME Is Not Null) Or (i.LAST_NAME Is Not Null And d.LAST_NAME Is Null) Or (i.LAST_NAME Is Not Null And d.LAST_NAME Is Not Null And i.LAST_NAME <> d.LAST_NAME)) Then 'LAST_NAME = ' + Case When d.LAST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LAST_NAME) + '''' End + ', ' Else '' End +  Case When ((i.PASSWORD Is Null And d.PASSWORD Is Not Null) Or (i.PASSWORD Is Not Null And d.PASSWORD Is Null) Or (i.PASSWORD Is Not Null And d.PASSWORD Is Not Null And i.PASSWORD <> d.PASSWORD)) Then 'PASSWORD = ' + Case When d.PASSWORD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PASSWORD) + '''' End + ', ' Else '' End +  Case When ((i.ID Is Null And d.ID Is Not Null) Or (i.ID Is Not Null And d.ID Is Null) Or (i.ID Is Not Null And d.ID Is Not Null And i.ID <> d.ID)) Then 'ID = ' + Case When d.ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ID) + '''' End + ', ' Else '' End +  Case When ((i.EMAIL Is Null And d.EMAIL Is Not Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Not Null And i.EMAIL <> d.EMAIL)) Then 'EMAIL = ' + Case When d.EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.EMAIL) + '''' End + ', ' Else '' End +  Case When ((i.ADDR1 Is Null And d.ADDR1 Is Not Null) Or (i.ADDR1 Is Not Null And d.ADDR1 Is Null) Or (i.ADDR1 Is Not Null And d.ADDR1 Is Not Null And i.ADDR1 <> d.ADDR1)) Then 'ADDR1 = ' + Case When d.ADDR1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR1) + '''' End + ', ' Else '' End +  Case When ((i.ADDR2 Is Null And d.ADDR2 Is Not Null) Or (i.ADDR2 Is Not Null And d.ADDR2 Is Null) Or (i.ADDR2 Is Not Null And d.ADDR2 Is Not Null And i.ADDR2 <> d.ADDR2)) Then 'ADDR2 = ' + Case When d.ADDR2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR2) + '''' End + ', ' Else '' End +  Case When ((i.ADDR3 Is Null And d.ADDR3 Is Not Null) Or (i.ADDR3 Is Not Null And d.ADDR3 Is Null) Or (i.ADDR3 Is Not Null And d.ADDR3 Is Not Null And i.ADDR3 <> d.ADDR3)) Then 'ADDR3 = ' + Case When d.ADDR3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ADDR3) + '''' End + ', ' Else '' End +  Case When ((i.TEL Is Null And d.TEL Is Not Null) Or (i.TEL Is Not Null And d.TEL Is Null) Or (i.TEL Is Not Null And d.TEL Is Not Null And i.TEL <> d.TEL)) Then 'TEL = ' + Case When d.TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TEL) + '''' End + ', ' Else '' End +  Case When ((i.GENDER Is Null And d.GENDER Is Not Null) Or (i.GENDER Is Not Null And d.GENDER Is Null) Or (i.GENDER Is Not Null And d.GENDER Is Not Null And i.GENDER <> d.GENDER)) Then 'GENDER = ' + Case When d.GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.GENDER) + '''' End + ', ' Else '' End +  Case When ((i.EXP_DATE Is Null And d.EXP_DATE Is Not Null) Or (i.EXP_DATE Is Not Null And d.EXP_DATE Is Null) Or (i.EXP_DATE Is Not Null And d.EXP_DATE Is Not Null And i.EXP_DATE <> d.EXP_DATE)) Then 'EXP_DATE = ' + Case When d.EXP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.EXP_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.TERMINATE Is Null And d.TERMINATE Is Not Null) Or (i.TERMINATE Is Not Null And d.TERMINATE Is Null) Or (i.TERMINATE Is Not Null And d.TERMINATE Is Not Null And i.TERMINATE <> d.TERMINATE)) Then 'TERMINATE = ' + Case When d.TERMINATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.TERMINATE) + '''' End + ', ' Else '' End +  Case When ((i.LANG_ID Is Null And d.LANG_ID Is Not Null) Or (i.LANG_ID Is Not Null And d.LANG_ID Is Null) Or (i.LANG_ID Is Not Null And d.LANG_ID Is Not Null And i.LANG_ID <> d.LANG_ID)) Then 'LANG_ID = ' + Case When d.LANG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LANG_ID) + '''' End + ', ' Else '' End +  Case When ((i.ID_TYPE Is Null And d.ID_TYPE Is Not Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Not Null And i.ID_TYPE <> d.ID_TYPE)) Then 'ID_TYPE = ' + Case When d.ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.ID_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.COMPANY Is Null And d.COMPANY Is Not Null) Or (i.COMPANY Is Not Null And d.COMPANY Is Null) Or (i.COMPANY Is Not Null And d.COMPANY Is Not Null And i.COMPANY <> d.COMPANY)) Then 'COMPANY = ' + Case When d.COMPANY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.COMPANY) + '''' End + ', ' Else '' End +  Case When ((i.SELECT_RESERVE Is Null And d.SELECT_RESERVE Is Not Null) Or (i.SELECT_RESERVE Is Not Null And d.SELECT_RESERVE Is Null) Or (i.SELECT_RESERVE Is Not Null And d.SELECT_RESERVE Is Not Null And i.SELECT_RESERVE <> d.SELECT_RESERVE)) Then 'SELECT_RESERVE = ' + Case When d.SELECT_RESERVE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.SELECT_RESERVE) + '''' End + ', ' Else '' End +  Case When ((i.OVERDUE Is Null And d.OVERDUE Is Not Null) Or (i.OVERDUE Is Not Null And d.OVERDUE Is Null) Or (i.OVERDUE Is Not Null And d.OVERDUE Is Not Null And i.OVERDUE <> d.OVERDUE)) Then 'OVERDUE = ' + Case When d.OVERDUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.OVERDUE) + '''' End + ', ' Else '' End +  Case When ((i.LESS_DEPOSIT Is Null And d.LESS_DEPOSIT Is Not Null) Or (i.LESS_DEPOSIT Is Not Null And d.LESS_DEPOSIT Is Null) Or (i.LESS_DEPOSIT Is Not Null And d.LESS_DEPOSIT Is Not Null And i.LESS_DEPOSIT <> d.LESS_DEPOSIT)) Then 'LESS_DEPOSIT = ' + Case When d.LESS_DEPOSIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.LESS_DEPOSIT) + '''' End + ', ' Else '' End +  Case When ((i.REFUND Is Null And d.REFUND Is Not Null) Or (i.REFUND Is Not Null And d.REFUND Is Null) Or (i.REFUND Is Not Null And d.REFUND Is Not Null And i.REFUND <> d.REFUND)) Then 'REFUND = ' + Case When d.REFUND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.REFUND) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_SCHEDULE Is Null And d.PAYMENT_SCHEDULE Is Not Null) Or (i.PAYMENT_SCHEDULE Is Not Null And d.PAYMENT_SCHEDULE Is Null) Or (i.PAYMENT_SCHEDULE Is Not Null And d.PAYMENT_SCHEDULE Is Not Null And i.PAYMENT_SCHEDULE <> d.PAYMENT_SCHEDULE)) Then 'PAYMENT_SCHEDULE = ' + Case When d.PAYMENT_SCHEDULE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.PAYMENT_SCHEDULE) + '''' End + ', ' Else '' End +  Case When ((i.VOID_AM Is Null And d.VOID_AM Is Not Null) Or (i.VOID_AM Is Not Null And d.VOID_AM Is Null) Or (i.VOID_AM Is Not Null And d.VOID_AM Is Not Null And i.VOID_AM <> d.VOID_AM)) Then 'VOID_AM = ' + Case When d.VOID_AM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.VOID_AM) + '''' End + ', ' Else '' End +  Case When ((i.MODIFY_CONFIRM_MOA Is Null And d.MODIFY_CONFIRM_MOA Is Not Null) Or (i.MODIFY_CONFIRM_MOA Is Not Null And d.MODIFY_CONFIRM_MOA Is Null) Or (i.MODIFY_CONFIRM_MOA Is Not Null And d.MODIFY_CONFIRM_MOA Is Not Null And i.MODIFY_CONFIRM_MOA <> d.MODIFY_CONFIRM_MOA)) Then 'MODIFY_CONFIRM_MOA = ' + Case When d.MODIFY_CONFIRM_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), d.MODIFY_CONFIRM_MOA) + '''' End + ', ' Else '' End) OriginalValue, dbo.SF_AUDIT_FormatColumn ( Case When ((i.UID Is Null And d.UID Is Not Null) Or (i.UID Is Not Null And d.UID Is Null) Or (i.UID Is Not Null And d.UID Is Not Null And i.UID <> d.UID)) Then 'UID = ' + Case When i.UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.UID) + '''' End + ', ' Else '' End +  Case When ((i.LEVEL_ID Is Null And d.LEVEL_ID Is Not Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Null) Or (i.LEVEL_ID Is Not Null And d.LEVEL_ID Is Not Null And i.LEVEL_ID <> d.LEVEL_ID)) Then 'LEVEL_ID = ' + Case When i.LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LEVEL_ID) + '''' End + ', ' Else '' End +  Case When ((i.FIRST_NAME Is Null And d.FIRST_NAME Is Not Null) Or (i.FIRST_NAME Is Not Null And d.FIRST_NAME Is Null) Or (i.FIRST_NAME Is Not Null And d.FIRST_NAME Is Not Null And i.FIRST_NAME <> d.FIRST_NAME)) Then 'FIRST_NAME = ' + Case When i.FIRST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.FIRST_NAME) + '''' End + ', ' Else '' End +  Case When ((i.LAST_NAME Is Null And d.LAST_NAME Is Not Null) Or (i.LAST_NAME Is Not Null And d.LAST_NAME Is Null) Or (i.LAST_NAME Is Not Null And d.LAST_NAME Is Not Null And i.LAST_NAME <> d.LAST_NAME)) Then 'LAST_NAME = ' + Case When i.LAST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LAST_NAME) + '''' End + ', ' Else '' End +  Case When ((i.PASSWORD Is Null And d.PASSWORD Is Not Null) Or (i.PASSWORD Is Not Null And d.PASSWORD Is Null) Or (i.PASSWORD Is Not Null And d.PASSWORD Is Not Null And i.PASSWORD <> d.PASSWORD)) Then 'PASSWORD = ' + Case When i.PASSWORD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PASSWORD) + '''' End + ', ' Else '' End +  Case When ((i.ID Is Null And d.ID Is Not Null) Or (i.ID Is Not Null And d.ID Is Null) Or (i.ID Is Not Null And d.ID Is Not Null And i.ID <> d.ID)) Then 'ID = ' + Case When i.ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ID) + '''' End + ', ' Else '' End +  Case When ((i.EMAIL Is Null And d.EMAIL Is Not Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Null) Or (i.EMAIL Is Not Null And d.EMAIL Is Not Null And i.EMAIL <> d.EMAIL)) Then 'EMAIL = ' + Case When i.EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.EMAIL) + '''' End + ', ' Else '' End +  Case When ((i.ADDR1 Is Null And d.ADDR1 Is Not Null) Or (i.ADDR1 Is Not Null And d.ADDR1 Is Null) Or (i.ADDR1 Is Not Null And d.ADDR1 Is Not Null And i.ADDR1 <> d.ADDR1)) Then 'ADDR1 = ' + Case When i.ADDR1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR1) + '''' End + ', ' Else '' End +  Case When ((i.ADDR2 Is Null And d.ADDR2 Is Not Null) Or (i.ADDR2 Is Not Null And d.ADDR2 Is Null) Or (i.ADDR2 Is Not Null And d.ADDR2 Is Not Null And i.ADDR2 <> d.ADDR2)) Then 'ADDR2 = ' + Case When i.ADDR2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR2) + '''' End + ', ' Else '' End +  Case When ((i.ADDR3 Is Null And d.ADDR3 Is Not Null) Or (i.ADDR3 Is Not Null And d.ADDR3 Is Null) Or (i.ADDR3 Is Not Null And d.ADDR3 Is Not Null And i.ADDR3 <> d.ADDR3)) Then 'ADDR3 = ' + Case When i.ADDR3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ADDR3) + '''' End + ', ' Else '' End +  Case When ((i.TEL Is Null And d.TEL Is Not Null) Or (i.TEL Is Not Null And d.TEL Is Null) Or (i.TEL Is Not Null And d.TEL Is Not Null And i.TEL <> d.TEL)) Then 'TEL = ' + Case When i.TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TEL) + '''' End + ', ' Else '' End +  Case When ((i.GENDER Is Null And d.GENDER Is Not Null) Or (i.GENDER Is Not Null And d.GENDER Is Null) Or (i.GENDER Is Not Null And d.GENDER Is Not Null And i.GENDER <> d.GENDER)) Then 'GENDER = ' + Case When i.GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.GENDER) + '''' End + ', ' Else '' End +  Case When ((i.EXP_DATE Is Null And d.EXP_DATE Is Not Null) Or (i.EXP_DATE Is Not Null And d.EXP_DATE Is Null) Or (i.EXP_DATE Is Not Null And d.EXP_DATE Is Not Null And i.EXP_DATE <> d.EXP_DATE)) Then 'EXP_DATE = ' + Case When i.EXP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.EXP_DATE, 121) + '''' End + ', ' Else '' End +  Case When ((i.TERMINATE Is Null And d.TERMINATE Is Not Null) Or (i.TERMINATE Is Not Null And d.TERMINATE Is Null) Or (i.TERMINATE Is Not Null And d.TERMINATE Is Not Null And i.TERMINATE <> d.TERMINATE)) Then 'TERMINATE = ' + Case When i.TERMINATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.TERMINATE) + '''' End + ', ' Else '' End +  Case When ((i.LANG_ID Is Null And d.LANG_ID Is Not Null) Or (i.LANG_ID Is Not Null And d.LANG_ID Is Null) Or (i.LANG_ID Is Not Null And d.LANG_ID Is Not Null And i.LANG_ID <> d.LANG_ID)) Then 'LANG_ID = ' + Case When i.LANG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LANG_ID) + '''' End + ', ' Else '' End +  Case When ((i.ID_TYPE Is Null And d.ID_TYPE Is Not Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Null) Or (i.ID_TYPE Is Not Null And d.ID_TYPE Is Not Null And i.ID_TYPE <> d.ID_TYPE)) Then 'ID_TYPE = ' + Case When i.ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.ID_TYPE) + '''' End + ', ' Else '' End +  Case When ((i.COMPANY Is Null And d.COMPANY Is Not Null) Or (i.COMPANY Is Not Null And d.COMPANY Is Null) Or (i.COMPANY Is Not Null And d.COMPANY Is Not Null And i.COMPANY <> d.COMPANY)) Then 'COMPANY = ' + Case When i.COMPANY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.COMPANY) + '''' End + ', ' Else '' End +  Case When ((i.SELECT_RESERVE Is Null And d.SELECT_RESERVE Is Not Null) Or (i.SELECT_RESERVE Is Not Null And d.SELECT_RESERVE Is Null) Or (i.SELECT_RESERVE Is Not Null And d.SELECT_RESERVE Is Not Null And i.SELECT_RESERVE <> d.SELECT_RESERVE)) Then 'SELECT_RESERVE = ' + Case When i.SELECT_RESERVE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.SELECT_RESERVE) + '''' End + ', ' Else '' End +  Case When ((i.OVERDUE Is Null And d.OVERDUE Is Not Null) Or (i.OVERDUE Is Not Null And d.OVERDUE Is Null) Or (i.OVERDUE Is Not Null And d.OVERDUE Is Not Null And i.OVERDUE <> d.OVERDUE)) Then 'OVERDUE = ' + Case When i.OVERDUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.OVERDUE) + '''' End + ', ' Else '' End +  Case When ((i.LESS_DEPOSIT Is Null And d.LESS_DEPOSIT Is Not Null) Or (i.LESS_DEPOSIT Is Not Null And d.LESS_DEPOSIT Is Null) Or (i.LESS_DEPOSIT Is Not Null And d.LESS_DEPOSIT Is Not Null And i.LESS_DEPOSIT <> d.LESS_DEPOSIT)) Then 'LESS_DEPOSIT = ' + Case When i.LESS_DEPOSIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.LESS_DEPOSIT) + '''' End + ', ' Else '' End +  Case When ((i.REFUND Is Null And d.REFUND Is Not Null) Or (i.REFUND Is Not Null And d.REFUND Is Null) Or (i.REFUND Is Not Null And d.REFUND Is Not Null And i.REFUND <> d.REFUND)) Then 'REFUND = ' + Case When i.REFUND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.REFUND) + '''' End + ', ' Else '' End +  Case When ((i.PAYMENT_SCHEDULE Is Null And d.PAYMENT_SCHEDULE Is Not Null) Or (i.PAYMENT_SCHEDULE Is Not Null And d.PAYMENT_SCHEDULE Is Null) Or (i.PAYMENT_SCHEDULE Is Not Null And d.PAYMENT_SCHEDULE Is Not Null And i.PAYMENT_SCHEDULE <> d.PAYMENT_SCHEDULE)) Then 'PAYMENT_SCHEDULE = ' + Case When i.PAYMENT_SCHEDULE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.PAYMENT_SCHEDULE) + '''' End + ', ' Else '' End +  Case When ((i.VOID_AM Is Null And d.VOID_AM Is Not Null) Or (i.VOID_AM Is Not Null And d.VOID_AM Is Null) Or (i.VOID_AM Is Not Null And d.VOID_AM Is Not Null And i.VOID_AM <> d.VOID_AM)) Then 'VOID_AM = ' + Case When i.VOID_AM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.VOID_AM) + '''' End + ', ' Else '' End +  Case When ((i.MODIFY_CONFIRM_MOA Is Null And d.MODIFY_CONFIRM_MOA Is Not Null) Or (i.MODIFY_CONFIRM_MOA Is Not Null And d.MODIFY_CONFIRM_MOA Is Null) Or (i.MODIFY_CONFIRM_MOA Is Not Null And d.MODIFY_CONFIRM_MOA Is Not Null And i.MODIFY_CONFIRM_MOA <> d.MODIFY_CONFIRM_MOA)) Then 'MODIFY_CONFIRM_MOA = ' + Case When i.MODIFY_CONFIRM_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), i.MODIFY_CONFIRM_MOA) + '''' End + ', ' Else '' End)  ChangedValue, Left('UID = ''' + Convert(NVarChar(4000), i.UID) + '''', 4000) KeyValue
					From Inserted i, Deleted d
					Where i.UID = d.UID
				) Temp 
				Where Temp.OriginalValue <> '' And Temp.ChangedValue <> ''Insert Into AUDIT_LOG (
				TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
				ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
			)Select Left('USER_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'D',
				Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_ID) + '''' End + ', FIRST_NAME = ' + Case When FIRST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FIRST_NAME) + '''' End + ', LAST_NAME = ' + Case When LAST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LAST_NAME) + '''' End + ', PASSWORD = ' + Case When PASSWORD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PASSWORD) + '''' End + ', ID = ' + Case When ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', ADDR1 = ' + Case When ADDR1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR1) + '''' End + ', ADDR2 = ' + Case When ADDR2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR2) + '''' End + ', ADDR3 = ' + Case When ADDR3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR3) + '''' End + ', TEL = ' + Case When TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEL) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GENDER) + '''' End + ', EXP_DATE = ' + Case When EXP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EXP_DATE, 121) + '''' End + ', TERMINATE = ' + Case When TERMINATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TERMINATE) + '''' End + ', LANG_ID = ' + Case When LANG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LANG_ID) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID_TYPE) + '''' End + ', COMPANY = ' + Case When COMPANY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COMPANY) + '''' End + ', SELECT_RESERVE = ' + Case When SELECT_RESERVE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECT_RESERVE) + '''' End + ', OVERDUE = ' + Case When OVERDUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OVERDUE) + '''' End + ', LESS_DEPOSIT = ' + Case When LESS_DEPOSIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LESS_DEPOSIT) + '''' End + ', REFUND = ' + Case When REFUND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REFUND) + '''' End + ', PAYMENT_SCHEDULE = ' + Case When PAYMENT_SCHEDULE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_SCHEDULE) + '''' End + ', VOID_AM = ' + Case When VOID_AM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VOID_AM) + '''' End + ', MODIFY_CONFIRM_MOA = ' + Case When MODIFY_CONFIRM_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MODIFY_CONFIRM_MOA) + '''' End + '', 4000), Left('', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000)
			From Deleted d
				Where Not Exists (
					Select *
					From Inserted i
					Where i.UID = d.UID
				)
				Insert Into AUDIT_LOG (
					TABLE_NAME, FUNCTION_ID, CR_TIME, CR_USER, MODE,
					ORIGINAL_VALUE, CHANGED_VALUE, PROJECT_ID, KEY_VALUE
				)
				Select Left('USER_PROFILE', 50), @FUNCTION_ID, @CR_TIME, @CR_USER, 'I', Left('', 4000), Left('UID = ' + Case When UID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), UID) + '''' End + ', LEVEL_ID = ' + Case When LEVEL_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LEVEL_ID) + '''' End + ', FIRST_NAME = ' + Case When FIRST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), FIRST_NAME) + '''' End + ', LAST_NAME = ' + Case When LAST_NAME Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LAST_NAME) + '''' End + ', PASSWORD = ' + Case When PASSWORD Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PASSWORD) + '''' End + ', ID = ' + Case When ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID) + '''' End + ', EMAIL = ' + Case When EMAIL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EMAIL) + '''' End + ', ADDR1 = ' + Case When ADDR1 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR1) + '''' End + ', ADDR2 = ' + Case When ADDR2 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR2) + '''' End + ', ADDR3 = ' + Case When ADDR3 Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ADDR3) + '''' End + ', TEL = ' + Case When TEL Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TEL) + '''' End + ', GENDER = ' + Case When GENDER Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), GENDER) + '''' End + ', EXP_DATE = ' + Case When EXP_DATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), EXP_DATE, 121) + '''' End + ', TERMINATE = ' + Case When TERMINATE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), TERMINATE) + '''' End + ', LANG_ID = ' + Case When LANG_ID Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LANG_ID) + '''' End + ', ID_TYPE = ' + Case When ID_TYPE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), ID_TYPE) + '''' End + ', COMPANY = ' + Case When COMPANY Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), COMPANY) + '''' End + ', SELECT_RESERVE = ' + Case When SELECT_RESERVE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), SELECT_RESERVE) + '''' End + ', OVERDUE = ' + Case When OVERDUE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), OVERDUE) + '''' End + ', LESS_DEPOSIT = ' + Case When LESS_DEPOSIT Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), LESS_DEPOSIT) + '''' End + ', REFUND = ' + Case When REFUND Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), REFUND) + '''' End + ', PAYMENT_SCHEDULE = ' + Case When PAYMENT_SCHEDULE Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), PAYMENT_SCHEDULE) + '''' End + ', VOID_AM = ' + Case When VOID_AM Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), VOID_AM) + '''' End + ', MODIFY_CONFIRM_MOA = ' + Case When MODIFY_CONFIRM_MOA Is Null Then 'Null' Else '''' + Convert(NVarChar(4000), MODIFY_CONFIRM_MOA) + '''' End + '', 4000), @PROJECT_ID, Left('UID = ''' + Convert(NVarChar(4000), UID) + '''', 4000)
				From Inserted i
				Where Not Exists (
					Select *
					From Deleted d
					Where i.UID = d.UID)  End
GO

ALTER TABLE [dbo].[USER_PROFILE] ENABLE TRIGGER [TG_AUD_USER_PROFILE_OnUpdated]
GO


